<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-10-20T18:33:42.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Find Minimum in Rotated Sorted Array</title>
    <link href="http://xinli90.com/2016/10/20/Find-Minimum-in-Rotated-Sorted-Array/"/>
    <id>http://xinli90.com/2016/10/20/Find-Minimum-in-Rotated-Sorted-Array/</id>
    <published>2016-10-20T18:06:54.000Z</published>
    <updated>2016-10-20T18:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.   </p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).    </p>
<p>Find the minimum element.    </p>
<p>You may assume no duplicate exists in the array.       </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate through the array to find out the element which is greater than the next one.</li>
<li>Time complexity is O(n)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Binary search to find out this element</li>
<li>If the middle one is less than right one, assign mid to right index.</li>
<li>If the middle one is greater than right one, assign mid+1 to left index.</li>
<li>Time complexity is O(lgn)</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> int findMin(int[] nums) &#123;</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;nums.length-<span class="number">1</span>; i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(nums[i] &gt; nums[i+<span class="number">1</span>]) &#123;</div><div class="line">        		<span class="keyword">return</span> nums[i+<span class="number">1</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;   </div><div class="line">        <span class="comment">//if sorted array is not rotated or rotated to the original one</span></div><div class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> int findMin(int[] nums) &#123;</div><div class="line">    	int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">    		int mid = <span class="keyword">left</span> + (<span class="keyword">right</span>-<span class="keyword">left</span>)/<span class="number">2</span>;</div><div class="line">    		<span class="keyword">if</span>(nums[mid] &gt; nums[<span class="keyword">right</span>]) &#123;</div><div class="line">    			<span class="keyword">left</span> = mid+<span class="number">1</span>;</div><div class="line">    		&#125;<span class="keyword">else</span> &#123;</div><div class="line">    			<span class="keyword">right</span> = mid;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> nums[<span class="keyword">left</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-First Bad V
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Rotate Array</title>
    <link href="http://xinli90.com/2016/10/19/Rotate-Array/"/>
    <id>http://xinli90.com/2016/10/19/Rotate-Array/</id>
    <published>2016-10-20T03:31:27.000Z</published>
    <updated>2016-10-20T15:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">Leetcode-Rotate Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Rotate an array of n elements to the right by k steps.</p>
<p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>rotete one by one.</li>
<li>Time complexity is O(k*n), Space complexity is O(1)     </li>
<li>TIme Limit Exceeded      </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use an array to store the last k elements first</li>
<li>shift all remaining elements to the right</li>
<li>put k elements to the left.</li>
<li>Time complexity is O(n), Space complexity is O(k)</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Reverse first size - k elements</li>
<li>Reverse last k elements</li>
<li>Reverse all elements</li>
<li>Time complexity is O(n), Space complexity is O(1)</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><ol>
<li>create a new array to store all elements</li>
<li>reasign the value into the original array</li>
<li>Time complexity is O(n), Space complexity is O(n)</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">while</span>(k&gt;<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> target = nums[<span class="keyword">size</span>-<span class="number">1</span>];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-<span class="number">1</span>; i&gt;<span class="number">0</span>; i++)&#123;</div><div class="line">				nums[i] = nums[i-<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">			nums[<span class="number">0</span>] = target;</div><div class="line">			k--;</div><div class="line">		&#125; </div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[k];</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-k; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			tempArr[i-(<span class="keyword">size</span>-k)] = nums[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-<span class="number">1</span>; i&gt;=k; i--) &#123;</div><div class="line">			nums[i] = nums[i-k];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</div><div class="line">			nums[i] = tempArr[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="number">0</span>,<span class="keyword">size</span>-k-<span class="number">1</span>);</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="keyword">size</span>-k,<span class="keyword">size</span>-<span class="number">1</span>);</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="number">0</span>,<span class="keyword">size</span>-<span class="number">1</span>);</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">reverse</span>(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right) &#123;</div><div class="line">		<span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line">			<span class="keyword">int</span> temp = nums[left];</div><div class="line">			nums[left] = nums[right];</div><div class="line">			nums[right] = temp;</div><div class="line">			left++;</div><div class="line">			right--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution4 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">int</span>[] copyArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">size</span>];</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			copyArray[i] = nums[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			nums[(i+k)%<span class="keyword">size</span>] = copyArray[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/rotate-array/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Rotate Array&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Remove Element</title>
    <link href="http://xinli90.com/2016/10/19/Remove-Element/"/>
    <id>http://xinli90.com/2016/10/19/Remove-Element/</id>
    <published>2016-10-20T03:17:55.000Z</published>
    <updated>2016-10-20T03:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="external">Leetcode - Remove Element</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>Example:<br>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Maintain one pointer, point to the first location</li>
<li>Iterate each element, if the element is the same with target, do nothing</li>
<li>If not, replace the value which the pointer points using this element.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> removeElement(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> val) &#123;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">    		<span class="keyword">if</span>(num != val) &#123;</div><div class="line">    			nums[<span class="keyword">index</span>++] = num;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">index</span>;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/remove-element/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Remove Eleme
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maximum XOR of Two Numbers in an Array</title>
    <link href="http://xinli90.com/2016/10/19/Maximum-XOR-of-Two-Numbers-in-an-Array/"/>
    <id>http://xinli90.com/2016/10/19/Maximum-XOR-of-Two-Numbers-in-an-Array/</id>
    <published>2016-10-20T02:40:39.000Z</published>
    <updated>2016-10-20T03:17:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Leetcode-Median of Two Sorted Arrays</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Create a new Array with length of nums1 and nums2 and sort them all</li>
<li>find the median from this array</li>
<li>Time complexity is O(m+n), Space complexity is O(m+n)    </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use Binary Search Tree to get Time complexity O(log(m+n))</li>
<li>需要求得中位数m，即找第m小的数。不断地比较两个数组m/2位置的数(如果两个数组长度均大于m/2),否则一个取本身长度，一个取m的剩下值。所以要一直保证第一个数组长度小于第二个数组</li>
<li>不断地递归调用，每次舍弃更小的一半数组，确保中位数一直位于另一半的数组中。在每次截取时，同时更新需要寻找的第k小的数。</li>
</ol>
<figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="keyword">double</span> findMedianSortedArrays(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        <span class="keyword">int</span> length1 = nums1.length<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> <span class="keyword">length2</span> = nums2.length<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> medianIndex = (length1+<span class="keyword">length2</span>)/<span class="number">2</span><span class="comment">; </span></div><div class="line">        <span class="keyword">double</span> median=<span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="keyword">int</span>[] array = new <span class="keyword">int</span>[length1+<span class="keyword">length2</span>]<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,index=<span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="keyword">while</span>(index&lt;length1+<span class="keyword">length2</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;=length1)&#123;</div><div class="line">                array[index++] = nums2[j++]<span class="comment">;</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=<span class="keyword">length2</span>)&#123;</div><div class="line">                array[index++] = nums1[i++]<span class="comment">;</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;length1&amp;&amp;j&lt;<span class="keyword">length2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(nums1[i]&gt;nums2[j])&#123;</div><div class="line">                    array[index++] = nums2[j++]<span class="comment">;</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    array[index++] = nums1[i++]<span class="comment">;</span></div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((length1+<span class="keyword">length2</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">            median = array[medianIndex]<span class="comment">;</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            median = (<span class="keyword">double</span>)(array[medianIndex<span class="number">-1</span>]+array[medianIndex])/<span class="number">2</span><span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> median<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	public <span class="keyword">double</span> findMedianSortedArrays(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">		<span class="keyword">int</span> length1 = nums1.length, <span class="keyword">length2</span> = nums2.length<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>((length1+<span class="keyword">length2</span>)%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">double</span>)(findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>)+findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>+<span class="number">1</span>))/<span class="number">2</span><span class="comment">;</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>+<span class="number">1</span>)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private <span class="keyword">int</span> findKth(<span class="keyword">int</span>[] nums1,<span class="keyword">int</span> start1,<span class="keyword">int</span> length1,<span class="keyword">int</span>[] nums2,<span class="keyword">int</span> start2,<span class="keyword">int</span> <span class="keyword">length2</span>, <span class="keyword">int</span> k)&#123;</div><div class="line">		<span class="comment">//mantain short array first</span></div><div class="line">		<span class="keyword">if</span>(length1&gt;<span class="keyword">length2</span>) <span class="keyword">return</span> findKth(nums2,start2,<span class="keyword">length2</span>,nums1,start1,length1,k)<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(length1==<span class="number">0</span>) <span class="keyword">return</span> nums2[k<span class="number">-1</span>]<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1],nums2[start2])<span class="comment">;</span></div><div class="line">		<span class="keyword">int</span> mid1 = Math.min(k/<span class="number">2</span>,length1)<span class="comment">;</span></div><div class="line">		<span class="keyword">int</span> mid2 = k-mid1<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(nums1[start1+mid1<span class="number">-1</span>]&gt;=nums2[start2+mid2<span class="number">-1</span>]) &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,start1,length1,nums2,start2+mid2,<span class="keyword">length2</span>-mid2,k-mid2)<span class="comment">;</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,start1+mid1,length1-mid1,nums2,start2,<span class="keyword">length2</span>,k-mid1)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-M
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Words in a String</title>
    <link href="http://xinli90.com/2016/10/17/Reverse-Words-in-a-String/"/>
    <id>http://xinli90.com/2016/10/17/Reverse-Words-in-a-String/</id>
    <published>2016-10-18T02:17:03.000Z</published>
    <updated>2016-10-18T03:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="external">Leetcode - Reverse Words in a String</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string, reverse the string word by word.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.    </p>
<p>Update (2015-02-12):<br>For C programmers: Try to solve it in-place in O(1) space.</p>
<p>click to show clarification.</p>
<p>Clarification:<br>What constitutes a word?<br>A sequence of non-space characters constitutes a word.<br>Could the input string contain leading or trailing spaces?<br>Yes. However, your reversed string should not contain leading or trailing spaces.<br>How about multiple spaces between two words?<br>Reduce them to a single space in the reversed string.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>splitting on the regex for one-or-more whitespace, this takes care of multiple spaces/tabs/newlines/etc in the input. </li>
<li>Since the input could have leading/trailing whitespace, which would result in empty matches, I first trim the input string.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reverseWords(<span class="keyword">String</span> s) &#123;</div><div class="line">        <span class="keyword">String</span>[] <span class="keyword">array</span> = s.trim().split(<span class="string">" +"</span>);</div><div class="line">        <span class="comment">//String[] arr = s.trim().split("\\s+");</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">String</span> <span class="keyword">string</span> : <span class="keyword">array</span>) &#123;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="string">" "</span>+ <span class="keyword">string</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.substring(<span class="number">1</span>).toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h4><p>If we want to get reversed string for both word in string and letters in each word.</p>
<p>1.If there is single whitespace, we can use below to get.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">StringBuilder </span><span class="built_in">sb</span> = new <span class="keyword">StringBuilder(s.trim());</span></div><div class="line"><span class="symbol">return</span> <span class="built_in">sb</span>.<span class="keyword">reverse().toString();</span></div></pre></td></tr></table></figure>
<p>2.If there are multiple whitespaces,then we can use reverse word first, and then reverse each word.   </p>
<p>Or<br>similar way with single whitespace solution and then eliminate the multiple whitespaces to single one. </p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">String</span>[] array = s.<span class="built_in">trim</span>().<span class="built_in">split</span>(<span class="string">" +"</span>);</div><div class="line">		<span class="comment">//String[] arr = s.trim().split("\\s+");</span></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> string : array) &#123;</div><div class="line">			sb.insert(<span class="number">0</span>, <span class="string">" "</span>+ reverseString2(string));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.substring(<span class="number">1</span>).toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseString(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">return</span> sb.<span class="built_in">reverse</span>().toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseString2(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="built_in">char</span>[] arr = s.toCharArray();</div><div class="line">		<span class="built_in">int</span> left = <span class="number">0</span>, right = arr.length<span class="number">-1</span>;</div><div class="line">		<span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line">			<span class="built_in">char</span> temp = arr[left];</div><div class="line">			arr[left] = arr[right];</div><div class="line">			arr[right] = temp;</div><div class="line">			left++;</div><div class="line">			right--;</div><div class="line"> 		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(arr);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">String</span>[] arr = sb.<span class="built_in">reverse</span>().toString().<span class="built_in">split</span>(<span class="string">" +"</span>);</div><div class="line">		StringBuilder sb2 = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> string : arr) &#123;</div><div class="line">			sb2.<span class="built_in">append</span>(string+<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb2.substring(<span class="number">0</span>,sb2.length()<span class="number">-1</span>).toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution3&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">return</span> sb.<span class="built_in">reverse</span>().toString().replaceAll(<span class="string">" +"</span>,<span class="string">" "</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-string/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - R
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Words in a String II</title>
    <link href="http://xinli90.com/2016/10/17/Reverse-Words-in-a-String-II/"/>
    <id>http://xinli90.com/2016/10/17/Reverse-Words-in-a-String-II/</id>
    <published>2016-10-18T01:57:43.000Z</published>
    <updated>2016-10-18T02:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-words-in-a-string-ii/" target="_blank" rel="external">Leetcode - Reverse Words in a String II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.</p>
<p>The input string does not contain leading or trailing spaces and the words are always separated by a single space.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.     </p>
<p>Could you do it in-place without allocating extra space?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Reverse the whole string first</li>
<li>Reverse the each word </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> void reverseWords(char[] s) &#123;</div><div class="line">        <span class="comment">//reverse the whole string</span></div><div class="line">        <span class="built_in">reverse</span>(s,<span class="number">0</span>,s.length-<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;=s.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(i==s.length || s[i]==' ')&#123;</div><div class="line">                <span class="built_in">reverse</span>(s,j,i-<span class="number">1</span>);</div><div class="line">                j = i+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void <span class="built_in">reverse</span>(char[] s, int <span class="keyword">left</span>, int <span class="keyword">right</span>) &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">            char temp = s[<span class="keyword">left</span>];</div><div class="line">            s[<span class="keyword">left</span>] = s[<span class="keyword">right</span>];</div><div class="line">            s[<span class="keyword">right</span>] = temp;</div><div class="line">            <span class="keyword">left</span>++;</div><div class="line">            <span class="keyword">right</span>--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-string-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Permutation Sequence</title>
    <link href="http://xinli90.com/2016/10/17/Permutation-Sequence/"/>
    <id>http://xinli90.com/2016/10/17/Permutation-Sequence/</id>
    <published>2016-10-17T18:32:00.000Z</published>
    <updated>2016-10-17T23:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="external">Leetcode - Permutation Sequence</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>
<p>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n = 3):   </p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"123"</span></div><div class="line"><span class="string">"132"</span></div><div class="line"><span class="string">"213"</span></div><div class="line"><span class="string">"231"</span></div><div class="line"><span class="string">"312"</span></div><div class="line"><span class="string">"321"</span></div></pre></td></tr></table></figure>
<p>Given n and k, return the kth permutation sequence.    </p>
<p>Note: Given n will be between 1 and 9 inclusive.   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Backtracking to get all string, and get the kth string.</li>
<li>For this solution it will get Time Limit Exceeded.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>If we don’t get Time Limit Exceeded, we shold use the formula to calculate each digit.</li>
<li>Notice that for n groups there are (n-1)! permutations in each group.(n-2)! permutations for n-1 groups…</li>
<li>So use k/(n-1)! to get first place, then k will be k%(n-1)!, it means we need iterate k%(n-1)! times for remaining numbers until the last place.</li>
</ol>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String getPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(lists,<span class="keyword">list</span>,n);</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : lists.get(k<span class="number">-1</span>)) &#123;</div><div class="line">            sb.append(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">int</span> n)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">list</span>.size() == n) &#123;</div><div class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">list</span>));</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">list</span>.contains(i)) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">list</span>.add(i);</div><div class="line">                helper(lists,<span class="keyword">list</span>,n);</div><div class="line">                <span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String getPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">    	<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</div><div class="line">    		<span class="keyword">list</span>.add(i);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">int</span>[] fact = <span class="keyword">new</span> fact[n];</div><div class="line">    	fact[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</div><div class="line">    		fact[i] = i*fact[i<span class="number">-1</span>];</div><div class="line">    	&#125;</div><div class="line">    	k = k<span class="number">-1</span>;</div><div class="line">    	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--)&#123;</div><div class="line">    		<span class="keyword">int</span> index = k/fact[i<span class="number">-1</span>];</div><div class="line">    		sb.append(<span class="keyword">list</span>.get(index));</div><div class="line">    		k = k%fact[i<span class="number">-1</span>];</div><div class="line">    		<span class="keyword">list</span>.remove(index);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/permutation-sequence/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Permut
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Permutations II</title>
    <link href="http://xinli90.com/2016/10/17/Permutations-II/"/>
    <id>http://xinli90.com/2016/10/17/Permutations-II/</id>
    <published>2016-10-17T18:17:43.000Z</published>
    <updated>2016-10-19T15:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="external">Leetcode-Permutations II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<p>For example,<br>[1,1,2] have the following unique permutations</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>sort the array first, make sure the same number cluster together.</li>
<li>In order to avoid duplicate array, we need to check if the duplicate elements have already been used. Use a boolean array to track it.</li>
<li>If the current element is used or the current one is the same with previous one and the previous one is used. Then we don’t use it anymore. </li>
</ol>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	 <span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</div><div class="line">        Arrays.sort(nums);</div><div class="line">        helper(lists,<span class="keyword">list</span>,used,nums);</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">boolean</span>[] used,<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">list</span>.size()==nums.length) &#123;</div><div class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">list</span>));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</div><div class="line">                <span class="keyword">if</span>(used[i] || (i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>] &amp;&amp; used[i<span class="number">-1</span>])) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    used[i] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">list</span>.add(nums[i]);</div><div class="line">                    helper(lists,<span class="keyword">list</span>,used,nums);</div><div class="line">                    <span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">                    used[i] = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/permutations-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Permutations 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Next Permutation</title>
    <link href="http://xinli90.com/2016/10/16/Next-Permutation/"/>
    <id>http://xinli90.com/2016/10/16/Next-Permutation/</id>
    <published>2016-10-16T18:37:12.000Z</published>
    <updated>2016-10-17T13:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations/" target="_blank" rel="external">Leetcode-Permutations</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place, do not allocate extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column. </p>
<p>1, 2, 3 → 1, 3, 2<br>3, 2, 1 → 1, 2, 3<br>1, 1, 5 → 1, 5, 1      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>首先从右往左找到一个点i, 使得nums[i]&lt;nums[i+1], 如果没有这样的点，说明该数组已经是Descending，直接reverse结束.</li>
<li>再从右往左找到大于i的点j，使得刚好nums[j]&gt;nums[i], 调换i 和 j 的值，找出下一个最大值，然后reverse后面的数组，使其数组变为最小值.</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> void nextPermutation(int[] nums) &#123;</div><div class="line">        int <span class="keyword">right</span> = nums.length-<span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">right</span>&gt;=<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[<span class="keyword">right</span>]&lt;nums[<span class="keyword">right</span>+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">right</span>--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">right</span>&lt;<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">reverse</span>(nums,<span class="keyword">right</span>+<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        int <span class="keyword">left</span> = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">right</span>&lt;<span class="keyword">left</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[<span class="keyword">left</span>]&gt;nums[<span class="keyword">right</span>])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">left</span>--;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">swap</span>(nums,<span class="keyword">right</span>,<span class="keyword">left</span>);</div><div class="line">        <span class="built_in">reverse</span>(nums,<span class="keyword">right</span>+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> void <span class="built_in">swap</span>(int[] nums, int i,int j) &#123;</div><div class="line">        int temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void <span class="built_in">reverse</span>(int[] nums,int <span class="keyword">left</span>) &#123;</div><div class="line">        int <span class="keyword">right</span> = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">            <span class="built_in">swap</span>(nums,<span class="keyword">left</span>,<span class="keyword">right</span>);</div><div class="line">            <span class="keyword">left</span>++;</div><div class="line">            <span class="keyword">right</span>--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/permutations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Permutations&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Permutations</title>
    <link href="http://xinli90.com/2016/10/16/Permutations/"/>
    <id>http://xinli90.com/2016/10/16/Permutations/</id>
    <published>2016-10-16T18:24:47.000Z</published>
    <updated>2016-10-16T18:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations/" target="_blank" rel="external">Leetcode-Permutations</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of distinct numbers, return all possible permutations.</p>
<p>For example,<br>[1,2,3] have the following permutations:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Backtracking</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(lists,<span class="keyword">list</span>,nums);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">list</span>.size() == nums.length) &#123;</div><div class="line">			lists.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="keyword">list</span>));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(!<span class="keyword">list</span>.contains(nums[i])) &#123;</div><div class="line">				<span class="keyword">list</span>.add(nums[i]);</div><div class="line">				helper(lists,<span class="keyword">list</span>,nums);</div><div class="line">				<span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/permutations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Permutations&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Remove Duplicates from Sorted Array</title>
    <link href="http://xinli90.com/2016/10/13/Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://xinli90.com/2016/10/13/Remove-Duplicates-from-Sorted-Array/</id>
    <published>2016-10-13T16:08:51.000Z</published>
    <updated>2016-10-13T16:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="external">Leetcode-Remove Duplicates from Sorted Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Maintain two pointers, left pointer and right pointer, they are adjacent at the beginning.</li>
<li>If the the value of first pointer is same to second one’s, shift second pointer right one step.</li>
<li>If they are not the same, then we will check the difference between two pointers first. If it’s greater than 1, it means we already have duplicate elements, we need change the value of index left+1 to the value of index right. If two pointer are still adjacent, do nothing. At last, shift two pointers right one step.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Just maintain one pointer, Using for each to iterate array, assign the value to the pointer’s location if the previous one and the current one are different.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">   <span class="keyword">public</span> <span class="built_in">int</span> removeDuplicates(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) return nums.length;</div><div class="line">       <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = <span class="number">1</span>;</div><div class="line">       <span class="keyword">while</span>(<span class="built_in">right</span>&lt;nums.length) &#123;</div><div class="line">           <span class="keyword">if</span>(nums[<span class="built_in">left</span>]!=nums[<span class="built_in">right</span>])&#123;</div><div class="line">               <span class="keyword">if</span>(<span class="built_in">left</span>+<span class="number">1</span>&lt;<span class="built_in">right</span>)&#123;</div><div class="line">                   nums[<span class="built_in">left</span>+<span class="number">1</span>] = nums[<span class="built_in">right</span>];</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">left</span>++;</div><div class="line">               <span class="built_in">right</span>++;</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               <span class="built_in">right</span>++;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       return <span class="built_in">left</span>+<span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">   <span class="keyword">public</span> <span class="built_in">int</span> removeDuplicates(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">   	<span class="built_in">int</span> i = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">       	<span class="keyword">if</span>(i==<span class="number">0</span> || nums[i<span class="number">-1</span>] &lt; num) &#123;</div><div class="line">       		nums[i++] = num;</div><div class="line">       	&#125;</div><div class="line">       &#125;</div><div class="line">       return i;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Le
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="http://xinli90.com/2016/10/13/House-Robber/"/>
    <id>http://xinli90.com/2016/10/13/House-Robber/</id>
    <published>2016-10-13T15:11:52.000Z</published>
    <updated>2016-10-13T15:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="external">Leetcode-House Robber</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>The time and space complexity is O(n)</p>
<ul>
<li>State: f[i] represents the maximum money the robber get rob until arriving the i-th house </li>
<li>Function: f[i] = Max(f[i-1],f[i-2]+nums[i])</li>
<li>Initialize: f[0] = nums[0], f[1] = nums[1]</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Similar way with solution1, but reduce the space complexity to O(1)</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="type">int</span> rob(<span class="type">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">length</span>==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="type">int</span>[] f = new <span class="type">int</span>[nums.<span class="built_in">length</span>];</div><div class="line">        f[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        f[<span class="number">1</span>] = Math.<span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">        	f[i] = Math.<span class="built_in">max</span>(f[i<span class="number">-1</span>],f[i<span class="number">-2</span>]+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[<span class="built_in">length</span><span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public <span class="type">int</span> rob(<span class="type">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">length</span>==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="type">int</span> last = <span class="number">0</span>, current = <span class="number">0</span>;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">        	<span class="type">int</span> temp = last; <span class="comment">// the i-2 th element</span></div><div class="line">        	last = current; <span class="comment">// the i-1 th element</span></div><div class="line">        	current = Math.<span class="built_in">max</span>(current,nums[i]+temp); <span class="comment">//the i-th element</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-House Robber&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Count and Say</title>
    <link href="http://xinli90.com/2016/10/13/Count-and-Say/"/>
    <id>http://xinli90.com/2016/10/13/Count-and-Say/</id>
    <published>2016-10-13T15:02:04.000Z</published>
    <updated>2016-10-13T15:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="external">Leetcode-Count and Say</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …     </p>
<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.   </p>
<p>Given an integer n, generate the nth sequence.     </p>
<p>Note: The sequence of integers will be represented as a string.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Notice: There is a misunderstanding place that we always start from “1”, not “n”. But we need calculate n times</p>
<ol>
<li>Maintain two pointers, Using first pointer iterate each element and the second pointer to find out if the adjacent element is the same.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> countAndSay(<span class="built_in">int</span> n) &#123;</div><div class="line">        return count(<span class="string">"1"</span>,n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="built_in">String</span> count(<span class="built_in">String</span> s, <span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) return s;</div><div class="line">        char[] arr = s.toCharArray();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">0</span>;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">left</span>&lt;arr.length) &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = <span class="built_in">left</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">right</span>&lt;arr.length &amp;&amp; arr[<span class="built_in">left</span>]==arr[<span class="built_in">right</span>])&#123;</div><div class="line">                <span class="built_in">right</span>++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">int</span> num = <span class="built_in">right</span>-<span class="built_in">left</span>;</div><div class="line">            sb.append(num+<span class="string">""</span>+arr[<span class="built_in">left</span>]);</div><div class="line">            <span class="built_in">left</span> = <span class="built_in">right</span>;</div><div class="line">        &#125;</div><div class="line">        return count(sb.toString(),n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/count-and-say/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Count and Say&lt;/
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Subarray</title>
    <link href="http://xinli90.com/2016/10/12/Maximum-Subarray/"/>
    <id>http://xinli90.com/2016/10/12/Maximum-Subarray/</id>
    <published>2016-10-12T14:55:20.000Z</published>
    <updated>2016-10-12T17:48:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.      </p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],</p>
<p>the contiguous subarray [4,-1,2,1] has the largest sum = 6.  </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution: DP"></a>Solution: DP</h4><ol>
<li>State: sum[i] represents the largest sum in location i.</li>
<li>Function: if(sum[i-1]&gt;0),then sum[i] = sum[i-1]+nums[i], else sum[i] = nums[i].</li>
<li>Initialize: sum[0] = nums[0]</li>
<li>Answer: the maximum of sum[i]</li>
</ol>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxSubArray(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">        <span class="built_in">int</span>[] <span class="built_in">sum</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">        //initiazlie</div><div class="line">        <span class="built_in">sum</span>[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="built_in">int</span> <span class="built_in">max</span> = <span class="built_in">sum</span>[<span class="number">0</span>];</div><div class="line">        //<span class="function"><span class="keyword">function</span></span></div><div class="line">        for(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(<span class="built_in">sum</span>[i-<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</div><div class="line">        		<span class="built_in">sum</span>[i] = <span class="built_in">sum</span>[i-<span class="number">1</span>] + nums[i];</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		<span class="built_in">sum</span>[i] = nums[i];</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, <span class="built_in">sum</span>[i]);</div><div class="line">        &#125;</div><div class="line">        //answer</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Maximum Suba
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Add Digits</title>
    <link href="http://xinli90.com/2016/10/12/Add-Digits/"/>
    <id>http://xinli90.com/2016/10/12/Add-Digits/</id>
    <published>2016-10-12T14:11:45.000Z</published>
    <updated>2016-10-12T14:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-digits/" target="_blank" rel="external">Leetcode-Add Digits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<p>Follow up:<br>Could you do it without any loop/recursion in O(1) runtime?   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Each time iterate the number and get sum of each digits. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>First you should understand:</p>
<p>10^k % 9 = 1<br>a*10^k % 9 = a % 9       </p>
<p>Then let’s use an example to help explain.</p>
<p>Say a number x = 23456</p>
<p>x = 2<em> 10000 + 3 </em> 1000 + 4 <em> 100 + 5 </em> 10 + 6</p>
<p>2 * 10000 % 9 = 2 % 9</p>
<p>3 * 1000 % 9 = 3 % 9</p>
<p>4 * 100 % 9 = 4 % 9</p>
<p>5 * 10 % 9 = 5 % 9</p>
<p>Then x % 9 = ( 2+ 3 + 4 + 5 + 6) % 9, note that x = 2<em> 10000 + 3 </em> 1000 + 4 <em> 100 + 5 </em> 10 + 6</p>
<p>So we have 23456 % 9 = (2 + 3 + 4 + 5 + 6) % 9</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> addDigits(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>&gt;=<span class="number">10</span>) &#123;</div><div class="line">            <span class="built_in">int</span> digit=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">num</span>&gt;<span class="number">0</span>) &#123;</div><div class="line">                digit += <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">                <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">num</span> = digit;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">     public <span class="built_in">int</span> addDigits(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">     	<span class="keyword">if</span>(<span class="built_in">num</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">num</span> % <span class="number">9</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">9</span>;</div><div class="line">     	<span class="keyword">return</span> <span class="built_in">num</span>%<span class="number">9</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/add-digits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Add Digits&lt;/a&gt;.&lt;/p
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Random Pick Index</title>
    <link href="http://xinli90.com/2016/10/11/Random-Pick-Index/"/>
    <id>http://xinli90.com/2016/10/11/Random-Pick-Index/</id>
    <published>2016-10-11T22:34:55.000Z</published>
    <updated>2016-10-11T22:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/random-pick-index/" target="_blank" rel="external">Leetcode-Random Pick Index</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>
<p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p>
<p>Example:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int[] nums =<span class="built_in"> new </span>int[] &#123;1,2,3,3,3&#125;;</div><div class="line">Solution solution =<span class="built_in"> new </span>Solution(nums);</div><div class="line"></div><div class="line">// pick(3) should<span class="built_in"> return </span>either index 2, 3,<span class="built_in"> or </span>4 randomly. Each index should have equal probability of returning.</div><div class="line">solution.pick(3);</div><div class="line"></div><div class="line">// pick(1) should<span class="built_in"> return </span>0. Since in the<span class="built_in"> array </span>only nums[0] is equal to 1.</div><div class="line">solution.pick(1);</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Use the similar solution in <a href="https://leetcode.com/problems/linked-list-random-node/" target="_blank" rel="external">Linked List Random Node</a></p>
<p><a href="https://en.wikipedia.org/wiki/Reservoir_sampling" target="_blank" rel="external">Wiki - Reservoir Sampling</a></p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</div><div class="line">    <span class="keyword">private</span> Random random;</div><div class="line">    <span class="keyword">public</span> Solution(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">this</span>.nums = nums;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pick(<span class="keyword">int</span> target) &#123;</div><div class="line">       <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">           <span class="keyword">if</span>(nums[i]==target) &#123;</div><div class="line">               <span class="keyword">count</span>++;</div><div class="line">               <span class="keyword">if</span>(random.nextInt(<span class="keyword">count</span>)==<span class="number">0</span>) &#123;</div><div class="line">                   result = i;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; </div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your Solution object will be instantiated and called as such:</div><div class="line"> * Solution obj = new Solution(nums);</div><div class="line"> * int param_1 = obj.pick(target);</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/random-pick-index/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Random Pick
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Linked List Random Node</title>
    <link href="http://xinli90.com/2016/10/11/Linked-List-Random-Node/"/>
    <id>http://xinli90.com/2016/10/11/Linked-List-Random-Node/</id>
    <published>2016-10-11T22:15:52.000Z</published>
    <updated>2016-10-11T22:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/linked-list-random-node/" target="_blank" rel="external">Leetcode-Linked List Random Node</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>
<p>Follow up:</p>
<p>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>
<p>Example:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init a singly linked list [1,2,3].</span></div><div class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">head.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</div><div class="line">head.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</div><div class="line">Solution solution = <span class="keyword">new</span> Solution(head);</div><div class="line"></div><div class="line"><span class="comment">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</span></div><div class="line">solution.getRandom();</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate each node and get the length of Linked list</li>
<li>randomly select one node</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>In order to get the same probabilities for each node, we should interate each node once and get the node</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">private</span> ListNode node;</div><div class="line">    <span class="keyword">private</span> Random random;</div><div class="line">    </div><div class="line">    /** @param head The linked list<span class="comment">'s head.</span></div><div class="line">        Note that the head <span class="keyword">is</span> guaranteed <span class="keyword">to</span> be <span class="keyword">not</span> <span class="literal">null</span>, so it contains at least one node. */</div><div class="line">    <span class="keyword">public</span> Solution(ListNode head) &#123;</div><div class="line">        node = head;</div><div class="line">        random = <span class="keyword">new</span> Random();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /** Returns a random node<span class="comment">'s value. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        ListNode result = <span class="literal">null</span>;</div><div class="line">        ListNode current = node;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;current!=<span class="literal">null</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(random.nextInt(i)==<span class="number">0</span>)&#123;</div><div class="line">                result = current;</div><div class="line">            &#125;</div><div class="line">            current = current.<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        return result.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Solution object will be instantiated <span class="keyword">and</span> called as such:</div><div class="line"> * Solution obj = <span class="keyword">new</span> Solution(head);</div><div class="line"> * <span class="built_in">int</span> param_1 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/linked-list-random-node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Linke
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day19 DataBase</title>
    <link href="http://xinli90.com/2016/10/11/Day19-DataBase/"/>
    <id>http://xinli90.com/2016/10/11/Day19-DataBase/</id>
    <published>2016-10-11T12:08:06.000Z</published>
    <updated>2016-10-11T14:20:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Database的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种SQL特性</li>
<li>总结用法和分析优化思路</li>
</ul>
<h2 id="Relational-DB-and-NoSql"><a href="#Relational-DB-and-NoSql" class="headerlink" title="Relational DB and NoSql"></a>Relational DB and NoSql</h2><ul>
<li><p>NoSQL与Relational DB区别：SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today’s real-world highly growing applications. NoSql in contrast uses a flexible structure which can be easily modified and extended.</p>
</li>
<li><p>NoSql: A NoSql database provides a mechanism for storage and retrieval of data that is modeled. The types : Document Oriented, Key Value, Graph, Column Oriented.</p>
</li>
<li><p>MongoDB: It is a document oriented database. It stores data in the form of BSON structure based documents. These documents are stored in a collection. Advantage: Flexible data model in form of documents, Agile and highly scalable database, Faster than traditional databases, Expressive query language.</p>
</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="UNION-and-UNION-ALL"><a href="#UNION-and-UNION-ALL" class="headerlink" title="UNION and UNION ALL"></a>UNION and UNION ALL</h3><ul>
<li><p>UNION:Merge two structurally-compatible tables into a single table and omit the duplicate records.</p>
</li>
<li><p>UNION ALL: Merge contents of two tables into one table but include duplicate records. It is more efficient than UNION, because it doesn’t need omit duplicate records.</p>
</li>
</ul>
<h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><ul>
<li><p>INNER JOIN: The simple and default join.</p>
</li>
<li><p>LEFT JOIN: Returns all rows from the left table, and the matched rows from the right table. This means that if the ON clause doesn’t match any records in the right table, the JOIN will still return a row in the result for that record in the left table, but with NULL in each column from the right table.</p>
</li>
<li><p>RIGHT JOIN: Returns all rows from the right table, and the matched rows from the left table. </p>
</li>
<li><p>FULL JOIN: Combine LEFT JOIN and RIGHT JOIN, return all rows for which there is a match in either of the tables. Its result is similar with UNION. (with NULL for some columns)</p>
</li>
<li><p>CROSS JOIN: Returns all records where each row from the first table is combined with each row from the second table.</p>
</li>
</ul>
<h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>customer id 不为123 的客户的数量：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">AS</span> cust_not_total </div><div class="line"><span class="keyword">from</span> orders</div><div class="line"><span class="keyword">where</span> customer_id &lt;&gt; <span class="string">'123'</span></div></pre></td></tr></table></figure>
<p>注意： Any records with a customer_id of NULL will not be included in either count.</p>
<h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><p>Use <code>is</code> instead of <code>=</code>, when we want to compare a value to null.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//expected result is YUP</div><div class="line"><span class="keyword">select</span> <span class="keyword">case</span></div><div class="line"><span class="keyword">when</span> <span class="literal">null</span> <span class="keyword">is</span> <span class="literal">null</span></div><div class="line"><span class="keyword">then</span> <span class="string">'YUP'</span> <span class="keyword">else</span> <span class="string">'Nope'</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">as</span> <span class="keyword">Result</span></div></pre></td></tr></table></figure>
<p>Anything compared to <code>NULL</code> evaluates to <code>UNKNOWN</code>, it includes NULL itself.</p>
<p>So below sql cannot get the result which ReferreddBy == NULL.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<p>We should use:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h3><p>If the set being evaluated by the <code>NOT IN</code> contains any null values, the result will return an empty set.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> *</div><div class="line"><span class="keyword">from</span> runners</div><div class="line"><span class="keyword">where</span> runners.id <span class="keyword">NOT</span> <span class="keyword">IN</span></div><div class="line">(<span class="keyword">select</span> winner_id <span class="keyword">from</span> races <span class="keyword">where</span> winner_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">null</span>)</div></pre></td></tr></table></figure>
<p>For MySql:</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">not</span> <span class="keyword">in</span> </div><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Sql Sergver, SQLite,PostgreSQL, we can also use:</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">except</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Oracle, we can use <code>minus</code>.</p>
<h3 id="Execution-order"><a href="#Execution-order" class="headerlink" title="Execution order"></a>Execution order</h3><p>The sql statement is not processed generally top-to-bottom or left-to-right. It’s in differenct order.<br>So this is wrong:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> BillingYear &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<p>It should be:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(BillingDate) &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<h3 id="WHERE-and-HAVING"><a href="#WHERE-and-HAVING" class="headerlink" title="WHERE and HAVING"></a>WHERE and HAVING</h3><p>When <code>GROUP BY</code> is not used, the <code>WHERE</code> and <code>HAVING</code> clauses are essentially equivalent.</p>
<p>However, when <code>GROUP BY</code> is used:</p>
<ul>
<li>The <code>WHERE</code> clause is used to filter records from a result. The filtering occurs before any grouping are made.</li>
<li>The <code>HAVING</code> clause is used to filter values from a group(to check conditions after aggregation into groups has been performed).</li>
</ul>
<h2 id="常见考题"><a href="#常见考题" class="headerlink" title="常见考题"></a>常见考题</h2><ol>
<li>Write a SQL query to find the 10th highest employee salary from an Employee table. Explain your answer.</li>
</ol>
<p>For MySQL and PostreSQL, we can use <code>LIMIT</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Salary <span class="keyword">from</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">LIMIT</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>For other database, we can use <code>TOP</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> TOP(<span class="number">1</span>) Salary <span class="keyword">From</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> TOP(<span class="number">10</span>) Salary</div><div class="line">	<span class="keyword">From</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">Order</span> <span class="keyword">by</span> Salary;</div></pre></td></tr></table></figure>
<h3 id="参考-Reference-："><a href="#参考-Reference-：" class="headerlink" title="参考(Reference)："></a>参考(Reference)：</h3><p><a href="">https://www.toptal.com/sql/interview-questions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Database的介绍和用途.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结归纳各种SQL特性&lt;/li&gt;
&lt;li&gt;总结用法和分析
    
    </summary>
    
      <category term="Database" scheme="http://xinli90.com/categories/Database/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Day18 Design Pattern</title>
    <link href="http://xinli90.com/2016/10/09/Day18-Design-Pattern/"/>
    <id>http://xinli90.com/2016/10/09/Day18-Design-Pattern/</id>
    <published>2016-10-10T02:08:50.000Z</published>
    <updated>2016-10-14T17:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Design Pattern的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种Design Pattern特性</li>
<li>总结Design Pattern用法和常见情景</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h3><p>一般在全局只有一个资源且需要保证只有一个时调用,我们在observer和Hibernate的sessionFactory中使用。</p>
<p>What’s the Singleton: Create the object while making sure only one instanec of object gets created. Provide one global point to access it.      </p>
<p>When to use: if we only have one resource, such as thread pool,in-memory cache, hardware resources(printer), many instances of one object will make the multiple result. </p>
<p>饿汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懒汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>= null;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">		<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程安全模式的三种方法：</p>
<ol>
<li>对getInstance()方法直接加synchronized，对整个方法加锁，比较耗资源</li>
<li>使用饿汉方法 </li>
<li>双重检查加锁法（推荐）</li>
</ol>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> volatile Singleton instance;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">			synchronized(Singleton.class) &#123;</div><div class="line">				if(instance == null) &#123;</div><div class="line">				<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h3><p>用clone的方式来创建<code>重复</code>对象，避免一直创建对象所带来的资源耗损。并且能够简化复杂对象的创建过程。<br>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>例如发送广告信息给500万用户，如果一条一条发的话可能需要好几天时间，相当于获取一个个创建的model object中信息并输出。如果创建多线程同时发送，并且避免创建500W个object带来的资源耗损，可以使用一个通用的object，然后每次copy得到新的实例而不是使用构造函数得到新实例，再修改里面一部分variable并且不会影响原Object来实现。</p>
<p>这就要求： 首先Object class 继承 Cloneable接口.     </p>
<p>注意： 这里的clone只能是shallow copy, 所以只能拷贝primitive type的值和对象、数组的reference，我们需要对 对象、数组进行deep copy.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; ars; </div><div class="line">	<span class="keyword">public</span> Message()&#123;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> Message <span class="keyword">clone</span>() &#123;	</div><div class="line">		Message message = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			message = (Message)super.<span class="keyword">clone</span>();</div><div class="line">			message.ars = (ArrayList&lt;String&gt;) this.ars.<span class="keyword">clone</span>();</div><div class="line">		&#125; <span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候则可以只创建一个新的object，之后不断clone来创建新的object.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Message</span> <span class="keyword">message</span> = new <span class="keyword">Message</span>();</div><div class="line">int i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</div><div class="line">	<span class="keyword">Message</span> cloneMes = <span class="keyword">message</span>.clone();</div><div class="line">	....</div><div class="line">	sendMessage(cloneMes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>在实现clone时可能需要实现复杂的代码，多重嵌套引用的deep copy很麻烦；     </li>
<li>每一个类都需要配置clone方法，当对已有类进行改造是，需要修改源代码，违背“开闭原则”.      </li>
</ol>
<h3 id="Memento-Patthern"><a href="#Memento-Patthern" class="headerlink" title="Memento Patthern"></a>Memento Patthern</h3><p>备忘录模式：在不破坏封装的前提下，存储关键对象的重要状态，从而可以在将来把对象还原到存储的那个状态.<br>场景应用：比如保存游戏进度，当前很多软件的撤销(Undo)操作。       </p>
<p>优点:</p>
<ol>
<li>状态存储在外面，不和关键对象混在一起，可以帮助维护内聚.</li>
<li>提供了容易实现的恢复能力</li>
<li>保持了关键对象的数据封装</li>
</ol>
<p>核心模块：</p>
<ul>
<li>Memento(备忘录): 是一个model object，用来保存数据.     </li>
<li>Originator(原发器): 用来操作Memento，拥有save()和restore()方法用来存储当前状态和恢复之前状态.     </li>
<li>CareTaker(负责人): 用它来负责保存所有Memento，但是不能对Memento进行操作.</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Class Memento &#123;</div><div class="line">	<span class="comment">//一个正常的model object</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Memento(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getStatus() &#123;</div><div class="line">		<span class="keyword">return</span> status;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Originator &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Originator(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setStatus(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Memento <span class="built_in">save</span>() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memento(status);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> restore(Memento me) &#123;</div><div class="line">		<span class="keyword">this</span>.status = me.getStatus();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class CareTaker &#123;</div><div class="line">	<span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">public</span> Memento getMemento(<span class="built_in">int</span> step) &#123;</div><div class="line">		<span class="keyword">return</span> mementoList.<span class="built_in">get</span>(step);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setMemento(Memento memento) &#123;</div><div class="line">		<span class="keyword">this</span>.mementoList.<span class="built_in">add</span>(memento);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Main &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		CareTaker careTaker = <span class="keyword">new</span> CareTaker();</div><div class="line">		Originator originator = <span class="keyword">new</span> Originator(<span class="string">"initialize"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"media"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"hard"</span>);</div><div class="line">		<span class="comment">//back to step 1</span></div><div class="line">		originator.restore(careTaker.getMemento(<span class="number">0</span>));</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Visitor-Pattern"><a href="#Visitor-Pattern" class="headerlink" title="Visitor Pattern"></a>Visitor Pattern</h3><p>访问者模式，行为模式之一，可以不修改已有类的情况下，增加新的操作。</p>
<p>优点：</p>
<ol>
<li>能够在不修改Model Object的情况下，为对象添加新的功能</li>
<li>可以通过访问者来分离无关的行为，把相关的行为封装在一起，构成访问者，这样每一个访问者的功能都比较单一</li>
</ol>
<p>缺点：</p>
<ol>
<li>不适用于object的结构经常变换的情况</li>
<li>访问者模式通常需要对象结构开放内部数据给访问者，破坏了对象的封装性.</li>
</ol>
<p>举例：雇员管理系统</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//雇员</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//把自己暴露给访问者</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">		visitor.Visit(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//唯一要根据需要 变的部分</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span></span>&#123;</div><div class="line">		Employee employee = ((Employee) element);</div><div class="line">		System.out.println(employee.getName()+<span class="string">"da"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//雇员管理</span></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Employees</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String,Employee&gt; employees;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">()</span></span>&#123;</div><div class="line">		employees = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Employee e : employees.values()) &#123;</div><div class="line">			e.Accept(visitor);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mediator-Pattern"><a href="#Mediator-Pattern" class="headerlink" title="Mediator Pattern"></a>Mediator Pattern</h3><p>替代原来各物体之间的交互，而使用中介者来与所有的物体打交道。<br>Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and suports easy maintance of the code by loose coupling.</p>
<p>适用场合：</p>
<ol>
<li>一组对象之间的通信复杂，导致相互依赖，结构混乱</li>
<li>一个对象引用很多其他对象并直接与这些对象通信，导致难以复用 </li>
</ol>
<p>优点：</p>
<ol>
<li>通过将对象彼此解耦，增加对象的复用性</li>
<li>将控制逻辑集中，简化系统维护</li>
<li>可以让对象之间所传递的消息变得简单且大幅减少</li>
<li>提供系统灵活性，易于扩展</li>
</ol>
<p>缺点：</p>
<ol>
<li>中介者承担较多责任，一旦出问题整个系统都会受到影响</li>
<li>如果设计不当，中介者对象本身变得过于复杂</li>
</ol>
<p>举例：<br>智能家电,中介者协调咖啡机，电视机，闹钟之间的通信</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class ConcreteMediator implements Mediator &#123;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String, String&gt; nameMap;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span> </span>&#123;</div><div class="line">		colleagueMap = <span class="keyword">new</span> HashMap&lt;String, Colleague&gt;();</div><div class="line">		nameMap = <span class="keyword">new</span> HashMap&lt;String, Colleague&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span> </span>&#123;</div><div class="line">		colleagueMap.put(colleagueName,colleague);</div><div class="line">		<span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> Alarm)&#123;</div><div class="line">			nameMap.put(<span class="string">"Alarm"</span>, colleagueName);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> CoffeeMachine)&#123;</div><div class="line">			nameMap.put(<span class="string">"CoffeeMachine"</span>, colleagueName);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> TV)&#123;</div><div class="line">			nameMap.put(<span class="string">"TV"</span>, colleagueName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Alarm) &#123;</div><div class="line">			<span class="keyword">if</span>(stateChange == <span class="number">0</span>) &#123;</div><div class="line">				((CoffeeMachine)(colleagueMap.get(nameMap.get(<span class="string">"CoffeeMachine"</span>)))).StartCoffee();	</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stateChange == <span class="number">1</span>) &#123;</div><div class="line">				((TV)(colleagueMap.get(nameMap.get(<span class="string">"TV"</span>)))).StartTV();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> TV)&#123;</div><div class="line">			...</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Mediator mediator;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mediator = mediator;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Mediator <span class="title">GetMediator</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.mediator;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Alarm</span><span class="params">(Mediator mediator, String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(mediator,name);</div><div class="line">		mediator.Register(name,<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendAlarm</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>&#123;</div><div class="line">		SendMessage(stateChange);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.GetMediator().ShowMessage(stateChange,<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMachine</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">		Alarm a = <span class="keyword">new</span> Alarm(mediator,<span class="string">"a"</span>);</div><div class="line">		CoffeeMachine c = <span class="keyword">new</span> CoffeeMachine(mediator,<span class="string">"c"</span>);</div><div class="line">		a.SendAlarm(<span class="number">0</span>);</div><div class="line">		a.SendAlarm(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Interpreter-Pattern"><a href="#Interpreter-Pattern" class="headerlink" title="Interpreter Pattern"></a>Interpreter Pattern</h3><p>解释器模式就是定义语言的文法，并且建立一个解释器来解释该语言中的句子.<br>Interpreter Pattern provides a way to evaluate language grammar or expression. </p>
<p>应用场合：SQL parsing, symbol processing engine(一些数据分析工具，报表设计工具，科学计算工具).</p>
<p>举例：Calculator</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	public <span class="keyword">abstract</span> <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">VarExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">String</span> key;</div><div class="line">	public <span class="type">VarExpression</span>(<span class="type">String</span> key) &#123;</div><div class="line">		<span class="keyword">this</span>.key = key;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">var</span>.get(<span class="keyword">this</span>.key);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	<span class="keyword">protected</span> <span class="type">AbstractExpresstion</span> left;</div><div class="line">	<span class="keyword">protected</span> <span class="type">AbstractExpresstion</span> right;</div><div class="line">	public <span class="type">SymbolExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">this</span>.left = left;</div><div class="line">		<span class="keyword">this</span>.right = right;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//乘法</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MultiExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</div><div class="line">	public <span class="type">MultiExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">super</span>(left,right);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="comment">//recrusive way to execute</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) * <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//加法</span></div><div class="line">public <span class="type">AddExpression</span> <span class="keyword">extends</span> <span class="type">SymbolExpression</span> &#123;</div><div class="line">	public <span class="type">MultiExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">super</span>(left,right);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) + <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RPN</span> </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">//添加HashMap里的+-*/()等，以及逻辑运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Chain-of-Responsibility-Pattern"><a href="#Chain-of-Responsibility-Pattern" class="headerlink" title="Chain of Responsibility Pattern"></a>Chain of Responsibility Pattern</h3><p>如果有多个对象都有机会处理请求，责任链可使请求的发送者和接收者解耦，请求沿着责任链传递，直到有一个处理了它为止.<br>It creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request.<br>In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on.</p>
<p>优点：</p>
<ol>
<li>将请求的发送者和接收者解耦，使多个对象都有机会处理这个请求</li>
<li>可以简化对象，因为无需知道链的结构</li>
<li>可以动态地增加或删减处理请求的链结构</li>
</ol>
<p>缺点：</p>
<ol>
<li>请求从链的开头进行遍历，对性能有一定的损耗</li>
<li>并不保证请求一定被处理</li>
</ol>
<p>适用场合：</p>
<ol>
<li>有多个对象可以处理一个请求</li>
<li>不明确接收者的情况</li>
<li>有序、无序链，线型、树形、环形链</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> PurchaseRequest &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	Approver successor;</div><div class="line">	String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Approver</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Approver successor)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.successor = successor;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GroupApprover</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Name + <span class="string">" GroupLeader"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(request.getSum()&gt;<span class="number">5000</span>)&#123;</div><div class="line">			...</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			successor.processRequest(request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViceApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViceApprover</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Name + <span class="string">" GroupLeader"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(request.getSum()&lt;<span class="number">5000</span>)&#123;</div><div class="line">			...</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			successor.processRequest(request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Approver groupLeader = <span class="keyword">new</span> GroupApprover(<span class="string">"Tom"</span>);</div><div class="line">		Approver vicePresident = <span class="keyword">new</span> ViceApprover(<span class="string">"Jim"</span>);</div><div class="line">		groupLeader.setSuccessor(vicePresident);</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Design Pattern的介绍和用途.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结归纳各种Design Pattern特性
    
    </summary>
    
      <category term="Design Pattern" scheme="http://xinli90.com/categories/Design-Pattern/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Day17 JavaScript Introduction</title>
    <link href="http://xinli90.com/2016/10/05/Day17-JavaScript-Introduction/"/>
    <id>http://xinli90.com/2016/10/05/Day17-JavaScript-Introduction/</id>
    <published>2016-10-05T16:54:03.000Z</published>
    <updated>2016-10-05T16:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于JavaScript高级特性和应用</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆JavaScript特性</li>
<li>总结JavaScript特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>prototype</li>
<li>闭包</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于JavaScript高级特性和应用&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆JavaScript特性&lt;/li&gt;
&lt;li&gt;总结
    
    </summary>
    
      <category term="HTTP" scheme="http://xinli90.com/categories/HTTP/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
</feed>
