<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-09-07T19:42:47.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://xinli90.com/2016/09/07/Roman-to-Integer/"/>
    <id>http://xinli90.com/2016/09/07/Roman-to-Integer/</id>
    <published>2016-09-07T18:04:36.000Z</published>
    <updated>2016-09-07T19:42:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1:"></a>Solution1:</h4><ol>
<li>The character which is greater precede the smaller one, add the original number. Otherwise, add the number which minus previous one.</li>
<li>Using Switch method to choose the right number to add based on the different character ordering. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2:"></a>Solution2:</h4><ol>
<li>Maintain previous pointer and current pointer, if current element is less than previous one, add it.  </li>
<li>Otherwise, minus the previous one and add the difference of current and previous element.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">		<span class="keyword">char</span> previous = <span class="string">'\0'</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="built_in">switch</span>(c) &#123;</div><div class="line">				<span class="built_in">case</span> <span class="string">'I'</span>: num++; <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'V'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">3</span> : <span class="number">5</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'X'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">8</span> : <span class="number">10</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'L'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">30</span> : <span class="number">50</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'C'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">80</span> : <span class="number">100</span>;</div><div class="line">						  <span class="built_in">break</span>;		  </div><div class="line">				<span class="built_in">case</span> <span class="string">'D'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">300</span> : <span class="number">500</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'M'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">800</span> : <span class="number">1000</span>;</div><div class="line">						  <span class="built_in">break</span>;	</div><div class="line">				<span class="built_in">default</span>: <span class="built_in">return</span> <span class="number">0</span>;	  </div><div class="line">			&#125;</div><div class="line">			previous = c;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="keyword">int</span> cur = <span class="built_in">map</span>.<span class="built_in">get</span>(c);</div><div class="line">			<span class="built_in">if</span>(cur&lt;=pre) sum += cur;</div><div class="line">			<span class="built_in">else</span> sum = sum - pre + cur - pre;</div><div class="line">			pre = cur;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Roman to Int
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day12 JAVA Key Words</title>
    <link href="http://xinli90.com/2016/09/06/Day12-JAVA-Key-Words/"/>
    <id>http://xinli90.com/2016/09/06/Day12-JAVA-Key-Words/</id>
    <published>2016-09-06T23:02:20.000Z</published>
    <updated>2016-09-06T23:02:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Word Search</title>
    <link href="http://xinli90.com/2016/09/06/Word-Search/"/>
    <id>http://xinli90.com/2016/09/06/Word-Search/</id>
    <published>2016-09-06T14:48:57.000Z</published>
    <updated>2016-09-06T18:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/word-search/" target="_blank" rel="external">Leetcode-Word Search</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board and a word, find if the word exists in the grid.    </p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.      </p>
<p>For example, </p>
<p>Given board =    </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'B</span>',<span class="symbol">'C</span>',<span class="symbol">'E</span>'],</div><div class="line">  [<span class="symbol">'S</span>',<span class="symbol">'F</span>',<span class="symbol">'C</span>',<span class="symbol">'S</span>'],</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'D</span>',<span class="symbol">'E</span>',<span class="symbol">'E</span>']</div><div class="line">]</div></pre></td></tr></table></figure>
<p>word = “ABCCED”, -&gt; returns true,<br>word = “SEE”, -&gt; returns true,<br>word = “ABCB”, -&gt; returns false.        </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Recursion and Backtracking.</li>
<li>Check each element for the find() method.  </li>
<li>Make the current element “#” so that we cannot move back to traverse.  After traversal, recover its value to the original one.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> exist(<span class="keyword">char</span>[][] board, <span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">		<span class="keyword">char</span>[] arr = <span class="keyword">word</span>.toCharArray();</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++) &#123;</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++) &#123;				<span class="built_in">if</span>(<span class="built_in">find</span>(board,arr,<span class="number">0</span>,i,j)) <span class="built_in">return</span> true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> <span class="built_in">find</span>(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] <span class="keyword">word</span>,<span class="keyword">int</span> index,<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">		<span class="built_in">if</span>(index == <span class="keyword">word</span>.length) <span class="built_in">return</span> true;</div><div class="line">		<span class="built_in">if</span>(x&gt;<span class="number">0</span> || x&gt;board.length<span class="number">-1</span> || y&lt;<span class="number">0</span> || y&gt;board[<span class="number">0</span>].length<span class="number">-1</span>) <span class="built_in">return</span> false;</div><div class="line">		<span class="built_in">if</span>(board[x][y]!=<span class="keyword">word</span>[index]) <span class="built_in">return</span> false;</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="keyword">boolean</span> exist = <span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x+<span class="number">1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y<span class="number">-1</span>)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y+<span class="number">1</span>);</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="built_in">return</span> exist;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/word-search/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Word Search&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expression Matching(unsolved)</title>
    <link href="http://xinli90.com/2016/09/06/Regular-Expression-Matching/"/>
    <id>http://xinli90.com/2016/09/06/Regular-Expression-Matching/</id>
    <published>2016-09-06T12:53:15.000Z</published>
    <updated>2016-09-06T14:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="external">Leetcode-Regular Expression Matching</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span> Matches any single character.</div><div class="line"><span class="string">'*'</span> Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire <span class="selector-tag">input</span> string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>1.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Solution1:recursion</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">0</span>) <span class="keyword">return</span> s.length()==<span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">1</span>) <span class="keyword">return</span> (s.length()==<span class="number">1</span>)&amp;&amp;(p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>);</div><div class="line">       <span class="keyword">if</span>(p.charAt(<span class="number">1</span>)!=<span class="string">'*'</span>) &#123;</div><div class="line">           <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">return</span> (s.charAt(<span class="number">0</span>)==p.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)&amp;&amp;isMatch(s.substring(<span class="number">1</span>),p.substring(<span class="number">1</span>));</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span> &amp;&amp; (p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)) &#123;</div><div class="line">               <span class="keyword">if</span>(isMatch(s,p.substring(<span class="number">2</span>)))<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               s = s.substring(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> isMatch(s,p.substring(<span class="number">2</span>));</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2:DP</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span> || p==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</div><div class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(p.charAt(i)==<span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">1</span>]) &#123;</div><div class="line">				dp[<span class="number">0</span>][i+<span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;p.length(); j++) &#123;</div><div class="line">				<span class="keyword">if</span>(s.charAt(i) == p.charAt(j)||p.charAt(j)==<span class="string">'.'</span>) &#123;</div><div class="line">					dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j];</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(p.charAt(j)==<span class="string">'*'</span>) &#123;</div><div class="line">					<span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>)!= s.charAt(i) &amp;&amp; p.charAt(j-<span class="number">1</span>)!=<span class="string">'.'</span>) &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">					&#125;<span class="keyword">else</span> &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j]||dp[i+<span class="number">1</span>][j-<span class="number">1</span>]||dp[i][j+<span class="number">1</span>]);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dp[s.length()][p.length()];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-R
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day11 Multithreading</title>
    <link href="http://xinli90.com/2016/09/02/Day11-Multithreading/"/>
    <id>http://xinli90.com/2016/09/02/Day11-Multithreading/</id>
    <published>2016-09-03T03:34:01.000Z</published>
    <updated>2016-09-05T03:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇关于Multithreading多线程的原理与应用.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆多线程特性</li>
<li>实现多线程结构</li>
<li>实战训练使用该多线程</li>
<li>总结该多线程特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><h2 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h2><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>Solution1: Thread safe</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">				<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">					instance = <span class="keyword">new</span> Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇关于Multithreading多线程的原理与应用.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆多线程特性&lt;/li&gt;
&lt;li&gt;实现多
    
    </summary>
    
      <category term="Multithreading" scheme="http://xinli90.com/categories/Multithreading/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Clone Graph</title>
    <link href="http://xinli90.com/2016/08/30/Clone-Graph/"/>
    <id>http://xinli90.com/2016/08/30/Clone-Graph/</id>
    <published>2016-08-30T17:50:49.000Z</published>
    <updated>2016-08-30T21:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/clone-graph/" target="_blank" rel="external">Leetcode-Clone Graph</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<p>OJ’s undirected graph serialization:     </p>
<p>Nodes are labeled uniquely.</p>
<p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.</p>
<p>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p>
<p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.   </p>
<ol>
<li>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.</li>
<li>Second node is labeled as 1. Connect node 1 to node 2.</li>
<li>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.    </li>
</ol>
<p>Visually, the graph looks like the following:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="number">1</span></div><div class="line">  / <span class="string">\</span></div><div class="line"> /   <span class="string">\</span></div><div class="line"><span class="number">0</span> --- <span class="number">2</span></div><div class="line">     / <span class="string">\</span></div><div class="line">     <span class="string">\_/</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use BFS</li>
<li>Queue + HashMap</li>
<li>In HashMap, key is label, value is new Object.  So each time we clone each node through HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use DFS + Recursive Solution</li>
<li>If node is empty, return null.</li>
<li>If there is already the node in HashMap, return it.</li>
<li>Else traverse neighbor nodes, clone it and store it into HashMap and recursively add new node into its neighbors.</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for undirected graph.</div><div class="line"> * class UndirectedGraphNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     List&lt;UndirectedGraphNode&gt; neighbors;</div><div class="line"> *     UndirectedGraphNode(int x) &#123; label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">public class Solution1 &#123;</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        <span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;    </div><div class="line">    	Queue&lt;UndirectedGraphNode&gt; queue = <span class="built_in">new</span> ArrayDeque&lt;&gt;();</div><div class="line">    	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    	queue.offer(node);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	</div><div class="line">    	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">    		UndirectedGraphNode input = queue.poll();</div><div class="line">    		List&lt;UndirectedGraphNode&gt; neighbor = input.<span class="built_in">neighbors</span>;</div><div class="line">    		<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    			int <span class="built_in">label</span> = neighbor.<span class="built_in">get</span>(i).<span class="built_in">label</span>;</div><div class="line">    			<span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(<span class="built_in">label</span>)) &#123;</div><div class="line">    				<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="built_in">label</span>,<span class="built_in">new</span> UndirectedGraphNode(<span class="built_in">label</span>));</div><div class="line">    				queue.offer(neighbor.<span class="built_in">get</span>(i));</div><div class="line">    			&#125;</div><div class="line">    			<span class="built_in">map</span>.<span class="built_in">get</span>(input.<span class="built_in">label</span>).<span class="built_in">neighbors</span>.add(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">label</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">    	<span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;</div><div class="line">    	<span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(node.<span class="built_in">label</span>)) <span class="built_in">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(node.<span class="built_in">label</span>);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	List&lt;UndirectedGraphNode&gt; neighbor = node.<span class="built_in">neighbors</span>;</div><div class="line">    	<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    		newNode.<span class="built_in">neighbors</span>.add(cloneGraph(neighbor.<span class="built_in">get</span>(i)));</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/clone-graph/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Clone Graph&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Insert Delete GetRandom O(1)</title>
    <link href="http://xinli90.com/2016/08/30/Insert-Delete-GetRandom-O-1/"/>
    <id>http://xinli90.com/2016/08/30/Insert-Delete-GetRandom-O-1/</id>
    <published>2016-08-30T16:00:55.000Z</published>
    <updated>2016-08-30T22:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/insert-delete-getrandom-o1/" target="_blank" rel="external">Leetcode-Insert Delete GetRandom O(1)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports all following operations in average O(1) time.</p>
<ol>
<li>insert(val): Inserts an item val to the set if not already present.</li>
<li>remove(val): Removes an item val from the set if present.</li>
<li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li>
</ol>
<p>Example:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init an empty set.</span></div><div class="line"><span class="type">RandomizedSet</span> randomSet = <span class="function"><span class="keyword">new</span> <span class="title">RandomizedSet</span>();</span></div><div class="line"></div><div class="line"><span class="comment">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Returns false as 2 does not exist in the set.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Inserts 2 to the set, returns true. Set now contains [1,2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// getRandom should return either 1 or 2 randomly.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div><div class="line"></div><div class="line"><span class="comment">// Removes 1 from the set, returns true. Set now contains [2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 2 was already in the set, so return false.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Since 1 is the only number in the set, getRandom always return 1.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use HashMap and ArrayList</li>
<li>Dlete operation: 1. Swap the target to the last of list and remove the last element. This takes O(1) time. 2. Should update the value of the last element in HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Keep two HashMap</li>
<li>One hashmap stores <value, location="">, another hashmap stores<location, value="">.</location,></value,></li>
<li>Dlete operation: Inorder to maintain the correct location, when delete one element from output HashMap, we need update the pair with the size of input as the key.  Then we need correspondingly update the value of this specific pair in input HashMap.</li>
<li>Random to get element from the second hashmap</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span>;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</div><div class="line">    </div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">map</span>.put(val,list.<span class="built_in">size</span>());</div><div class="line">            list.<span class="built_in">add</span>(val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">int</span> index = <span class="built_in">map</span>.<span class="built_in">get</span>(val);</div><div class="line">          </div><div class="line">            <span class="built_in">int</span> temp = list.<span class="built_in">get</span>(list.<span class="built_in">size</span>()<span class="number">-1</span>);                        </div><div class="line">            list.<span class="built_in">set</span>(index,temp);</div><div class="line">            <span class="built_in">map</span>.put(temp,index);</div><div class="line">            </div><div class="line">            <span class="built_in">map</span>.remove(val);</div><div class="line">            list.remove(list.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random rand = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = rand.nextInt(list.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> list.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;		</div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; input;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; output;</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        input = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        output = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">size</span>();</div><div class="line">        input.put(val,location);</div><div class="line">        output.put(location,val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">get</span>(val);</div><div class="line">        <span class="built_in">int</span> insteadValue = output.<span class="built_in">get</span>(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//update the pair which the key is the last location</span></div><div class="line">        output.put(location,insteadValue);</div><div class="line">        input.put(insteadValue,location);</div><div class="line">        </div><div class="line">        <span class="comment">//remove the key with the last location</span></div><div class="line">        output.remove(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        input.remove(val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = <span class="built_in">random</span>.nextInt(input.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> output.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/insert-delete-getrandom-o1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-In
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Alien Dictionary(UnSolved)</title>
    <link href="http://xinli90.com/2016/08/30/Alien-Dictionary/"/>
    <id>http://xinli90.com/2016/08/30/Alien-Dictionary/</id>
    <published>2016-08-30T14:04:07.000Z</published>
    <updated>2016-09-06T14:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/alien-dictionary/" target="_blank" rel="external">Leetcode-Alien Dictionary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.</p>
<p>For example,<br>Given the following words in dictionary,</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  <span class="string">"wrt"</span>,</div><div class="line">  <span class="string">"wrf"</span>,</div><div class="line">  <span class="string">"er"</span>,</div><div class="line">  <span class="string">"ett"</span>,</div><div class="line">  <span class="string">"rftt"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>The correct order is: “wertf”.</p>
<p>Note:</p>
<ol>
<li>You may assume all letters are in lowercase.</li>
<li>If the order is invalid, return an empty string.</li>
<li>There may be multiple valid order of letters, return any one of them is fine.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>BFS</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>DFS</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/alien-dictionary/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Alien Dictio
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sort Colors</title>
    <link href="http://xinli90.com/2016/08/30/Sort-Colors/"/>
    <id>http://xinli90.com/2016/08/30/Sort-Colors/</id>
    <published>2016-08-30T13:20:41.000Z</published>
    <updated>2016-08-30T17:52:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="external">Leetcode-Sort Colors</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p>Note:<br>You are not suppose to use the library’s sort function for this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n), space complexity is O(1)</li>
<li>Loop this array and count the frequency of each number.</li>
<li>Assign to original array one by one </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Follow the first step of solution1, loop the count array instead of loop the nums array.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[<span class="keyword">index</span>]&lt;=<span class="number">0</span> &amp;&amp; <span class="keyword">index</span>&lt;<span class="number">3</span>)&#123;</div><div class="line">				<span class="keyword">index</span>++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">index</span>==<span class="number">3</span>) <span class="keyword">return</span>;</div><div class="line">			nums[i] = <span class="keyword">index</span>;</div><div class="line">			<span class="keyword">count</span>[<span class="keyword">index</span>]--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">				nums[<span class="keyword">index</span>++] = i;</div><div class="line">				<span class="keyword">count</span>[i]--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Sort Colors&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Lowest Common Ancestor of a Binary Tree</title>
    <link href="http://xinli90.com/2016/08/25/Lowest-Common-Ancestor-of-a-Binary-Tree/"/>
    <id>http://xinli90.com/2016/08/25/Lowest-Common-Ancestor-of-a-Binary-Tree/</id>
    <published>2016-08-25T21:44:20.000Z</published>
    <updated>2016-08-28T20:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="external">Leetcode-Lowest Common Ancestor of a Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="external">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">     _______3______</div><div class="line">    /              \</div><div class="line"> ___5__          ___1__</div><div class="line">/      \        /      \</div><div class="line"><span class="number">6</span>      _2       <span class="number">0</span>       <span class="number">8</span></div><div class="line">      /  \</div><div class="line">      <span class="number">7</span>   <span class="number">4</span></div></pre></td></tr></table></figure>
<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>If search from root and find two target nodes in different sides. Then the LCA is root.</li>
<li>If find two nodes in left subtree, then recursively search from the left of root.</li>
<li>If find two nodes in right subtree, then recursively search from the right of root.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><ol>
<li>If root is null, return null</li>
<li>If root is one of two nodes, return root.</li>
<li>Recurseively traverse left subtree and right subtree.</li>
<li>If both left subtree and right subtree get the specific node, then return root.</li>
<li>If one of subtree is null, return another subtree.</li>
</ol>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Use List to record the path which find from root to the specific nodes.</li>
<li>Compare elements from two lists and get the last common elements.</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(findNode(root.left,p)) &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.left,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.left,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.right,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.right,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean findNode(TreeNode root, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(root==node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		</div><div class="line">		boolean found = findNode(root.left,node);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findNode(root.right,node);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</div><div class="line">		TreeNode commonLeft = getLastCommonParentRec(root.left,p,q);</div><div class="line">		TreeNode commonRight = getLastCommonParentRec(root.right,p,q);</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span> &amp;&amp; commonRight!=<span class="literal">null</span>) <span class="keyword">return</span> root;</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span>) <span class="keyword">return</span> commonLeft;</div><div class="line">		<span class="keyword">return</span> commonRight;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; list1 = new ArrayList&lt;&gt;();</div><div class="line">		ArrayList&lt;TreeNode&gt; list2 = new ArrayList&lt;&gt;();</div><div class="line">		boolean found1 = findPath(root,p,list1);</div><div class="line">		boolean found2 = findPath(root,q,list2);</div><div class="line">		<span class="keyword">if</span>(!found1 || !found2) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">	</div><div class="line">		TreeNode result = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;Math.min(list1.size(),list2.size());i++) &#123;</div><div class="line">			<span class="keyword">if</span>(list1.<span class="keyword">get</span>(i)==list2.<span class="keyword">get</span>(i))&#123;</div><div class="line">				result = list1.<span class="keyword">get</span>(i);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	boolean findPath(TreeNode root, TreeNode node, ArrayList&lt;TreeNode&gt; list) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		list.add(root);</div><div class="line">		<span class="keyword">if</span>(root == node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		boolean found = findPath(root.left,node,list);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findPath(root.right,node,list);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!found) list.remove(root);</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://xinli90.com/2016/08/25/Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/"/>
    <id>http://xinli90.com/2016/08/25/Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</id>
    <published>2016-08-25T21:43:58.000Z</published>
    <updated>2016-08-28T19:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="external">Leetcode-Construct Binary Tree from Preorder and Inorder Traversal </a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p>Note:<br>You may assume that duplicates do not exist in the tree.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-Iterative-solution"><a href="#Solution-Iterative-solution" class="headerlink" title="Solution: Iterative solution."></a>Solution: Iterative solution.</h4><ol>
<li>PreOrder: root is the first element in the array and use this element to divide inorder array. </li>
<li>InOrder: the left array of the root is left subtree and the right array of the root is right subtree.We can get the size of left subtree and right subtree and use for the preorder array. Use this size to divide preorder array and build tree.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> buildTree(preorder,<span class="number">0</span>,preorder.length<span class="number">-1</span>,inorder,<span class="number">0</span>,inorder.length<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="function">TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[]preorder,<span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[]inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">int</span> rootVal = preorder[preStart];</div><div class="line">		<span class="keyword">int</span> inRoot=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=inStart,j=inEnd; i&lt;=j; i++,j--) &#123;</div><div class="line">			<span class="keyword">if</span>(inorder[i] == rootVal) &#123;</div><div class="line">				inRoot = i;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">inorder[j] == rootVal</span>)</span>&#123;</div><div class="line">				inRoot = j;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; </div><div class="line">		TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</div><div class="line">		root.left = buildTree(preorder,preStart+<span class="number">1</span>,preStart+(inRoot-inStart), inorder,inStart,inRoot<span class="number">-1</span>);</div><div class="line">		root.right = buildTree(preorder,preEnd-(inEnd-inRoot)+<span class="number">1</span>,preEnd,inorder,inRoot+<span class="number">1</span>,inEnd);</div><div class="line">		<span class="keyword">return</span> root;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot; target=&quot;_bl
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Balanced Binary Tree</title>
    <link href="http://xinli90.com/2016/08/24/Balanced-Binary-Tree/"/>
    <id>http://xinli90.com/2016/08/24/Balanced-Binary-Tree/</id>
    <published>2016-08-24T21:31:16.000Z</published>
    <updated>2016-08-28T03:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/balanced-binary-tree/" target="_blank" rel="external">Leetcode-Balanced Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><p>Time complexity is O(nlogn).     </p>
<ol>
<li>if tree is null, return true;</li>
<li>if the difference of left subtree and right subtree is greater than 1, return false;</li>
<li>recursively compare left subtree and right subtree loop 1 and 2.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><p>Time complexity is O(n)</p>
<ol>
<li>Get the depth of left subtree and right subtree from bottom to the top.</li>
<li>Once the difference of two depth is greater than 1, it will always return -1 and there is no need to compare any more.  If not, return its depth for the father node.   </li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isBalanced(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(Math.abs(getDepth(root.left)-getDepth(root.right))&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	int getDepth(TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> Math.max(getDepth(node.left),getDepth(node.right))+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isBalanced(TreeNode root) &#123;			<span class="keyword">if</span>(getDepth(root)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	int getDepth(TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		</div><div class="line">		int leftDepth = getDepth(node.left);</div><div class="line">		<span class="keyword">if</span>(leftDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		int rightDepth = getDepth(node.right);</div><div class="line">		<span class="keyword">if</span>(rightDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		int diff = Math.abs(leftDepth-rightDepth);</div><div class="line">		<span class="keyword">if</span>(diff&gt;<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> Math.max(leftDepth,rightDepth) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/balanced-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Balanced
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Same Tree</title>
    <link href="http://xinli90.com/2016/08/24/Same-Tree/"/>
    <id>http://xinli90.com/2016/08/24/Same-Tree/</id>
    <published>2016-08-24T17:50:50.000Z</published>
    <updated>2016-08-28T20:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="external">Leetcode-Same Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if two nodes are null, return true;</li>
<li>if the value of two nodes are equivalent, recursively compare their left and right subtree.</li>
<li>else return false.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Traverse two trees and compare each nodes.</li>
<li>Use Pre-Order traversal.</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isSameTree(TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">if</span>(p.<span class="keyword">val</span>!=q.<span class="keyword">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">if</span>(p.<span class="keyword">val</span>==q.<span class="keyword">val</span>) <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;isSameTree(p.right,q.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isSameTree(TreeNode p, TreeNode q) &#123;		<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		Stack&lt;TreeNode&gt; s1 = new Stack&lt;&gt;();</div><div class="line">		Stack&lt;TreeNode&gt; s2 = new Stack&lt;&gt;();</div><div class="line">		s1.push(p);</div><div class="line">		s2.push(q);</div><div class="line">		<span class="keyword">while</span>(!s1.isEmpty() &amp;&amp; !s2.isEmpty()) &#123;</div><div class="line">			TreeNode node1 = s1.pop();</div><div class="line">			TreeNode node2 = s2.pop();</div><div class="line">			<span class="keyword">if</span>(node1==<span class="literal">null</span> &amp;&amp; node2==<span class="literal">null</span>) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span>(node1!=<span class="literal">null</span> &amp;&amp; node2!=<span class="literal">null</span> &amp;&amp; node1.<span class="keyword">val</span>==node2.<span class="keyword">val</span>) &#123;</div><div class="line">				s1.push(node1.left);</div><div class="line">				s1.push(node1.right);</div><div class="line">				s2.push(node2.left);</div><div class="line">				s2.push(node2.right);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/same-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Same Tree&lt;/a&gt;.&lt;/p&gt;

    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Flatten Binary Tree to Linked List</title>
    <link href="http://xinli90.com/2016/08/23/Flatten-Binary-Tree-to-Linked-List/"/>
    <id>http://xinli90.com/2016/08/23/Flatten-Binary-Tree-to-Linked-List/</id>
    <published>2016-08-23T19:53:28.000Z</published>
    <updated>2016-08-28T20:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Level Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, flatten it to a linked list in-place.</p>
<p>For example,<br>Given</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">5</span></div><div class="line"> / \   \</div><div class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></div></pre></td></tr></table></figure>
<p>The flattened tree should look like:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line">   \</div><div class="line">    <span class="number">3</span></div><div class="line">     \</div><div class="line">      <span class="number">4</span></div><div class="line">       \</div><div class="line">        <span class="number">5</span></div><div class="line">         \</div><div class="line">          <span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution-Like-post-order-solution"><a href="#Solution1-Recursive-solution-Like-post-order-solution" class="headerlink" title="Solution1: Recursive solution. Like post-order solution."></a>Solution1: Recursive solution. Like post-order solution.</h4><ol>
<li>if tree is null, return.</li>
<li>if tree is not null, Recursively traverse left subtree and then right subtree, change the left subtree to the right and the original right subtree as the most right node.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Each time, make the right subtree of root to be the right subtree of most right node of left child node of root.</li>
<li>Then make the left subtree as the right subtree of the root, move to the next right node, loop 1 and 2.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">		</div><div class="line">		flatten(root.<span class="built_in">left</span>);</div><div class="line">		flatten(root.<span class="built_in">right</span>);</div><div class="line">		</div><div class="line">		TreeNode <span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">		root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">		root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">		TreeNode cur = root;</div><div class="line">		<span class="keyword">while</span>(cur.<span class="built_in">right</span>!=<span class="literal">null</span>) cur = cur.<span class="built_in">right</span>;</div><div class="line">		cur.<span class="built_in">right</span> = <span class="built_in">right</span>;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">		<span class="keyword">while</span>(root!=<span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(root.<span class="built_in">left</span>==<span class="literal">null</span>)&#123;</div><div class="line">				root = root.<span class="built_in">right</span>;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			TreeNode <span class="built_in">left</span> = root.<span class="built_in">left</span>;</div><div class="line">			<span class="keyword">while</span>(<span class="built_in">left</span>.<span class="built_in">right</span>!=<span class="literal">null</span>) &#123;</div><div class="line">				<span class="built_in">left</span> = <span class="built_in">left</span>.<span class="built_in">right</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">left</span>.<span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">			root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">			root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leet
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Level Order Traversal</title>
    <link href="http://xinli90.com/2016/08/23/Binary-Tree-Level-Order-Traversal/"/>
    <id>http://xinli90.com/2016/08/23/Binary-Tree-Level-Order-Traversal/</id>
    <published>2016-08-23T18:29:04.000Z</published>
    <updated>2016-08-28T03:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Level Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">9</span>   <span class="number">20</span></div><div class="line"> / \   </div><div class="line"><span class="number">15</span>  <span class="number">7</span></div></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, compare if the size of lists equals to the level. If yes, directly add current node into lists.get(level). If no, create a new list into lists.</li>
<li>Recursively traverse left subtree and right subtree and the level+1.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Use BFS.</li>
<li>For each loop, we add them together into a new List.</li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(lists, root,<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists, TreeNode node, int level) &#123;</div><div class="line">		<span class="keyword">if</span>(node == <span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="comment">//add a new list to the new level of nodes</span></div><div class="line">		<span class="keyword">if</span>(lists.size() == level) lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">Integer</span>&gt;());</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; temp = lists.get(level);</div><div class="line">		temp.add(node.val);</div><div class="line">		helper(lists, node.left,level+<span class="number">1</span>);</div><div class="line">		helper(lists, node.right,level+<span class="number">1</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> lists;</div><div class="line">		<span class="built_in">Queue</span>&lt;TreeNode&gt; <span class="built_in">queue</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</div><div class="line">		<span class="built_in">queue</span>.add(root);</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">queue</span>.isEmpty()) &#123;</div><div class="line">			int size = <span class="built_in">queue</span>.size();</div><div class="line">			<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">			for(int i=<span class="number">0</span>;i&lt;size;i++) &#123;</div><div class="line">				TreeNode node = <span class="built_in">queue</span>.poll();</div><div class="line">				<span class="built_in">list</span>.add(node.val);</div><div class="line">				<span class="keyword">if</span>(node.left!=<span class="built_in">null</span>) <span class="built_in">queue</span>.add(node.left);</div><div class="line">				<span class="keyword">if</span>(node.right!=<span class="built_in">null</span>) <span class="built_in">queue</span>.add(node.right);</div><div class="line">			&#125;</div><div class="line">			lists.add(<span class="built_in">list</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leet
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Postorder Traversal</title>
    <link href="http://xinli90.com/2016/08/23/Binary-Tree-Postorder-Traversal/"/>
    <id>http://xinli90.com/2016/08/23/Binary-Tree-Postorder-Traversal/</id>
    <published>2016-08-23T18:09:59.000Z</published>
    <updated>2016-08-28T03:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Postorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[3,2,1]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, traverse left subtree, traverse right subtree, visit root and add the value of root into list.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Keep two stacks</li>
<li>Use the way similar to Preorder traversal, preorder is：<code>self, left, right</code>, change its order to <code>self, right, left</code>, then converse to <code>left, right, self</code>    </li>
</ol>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Only one stack. similar to preorder traversal(iterative solution), push root into stack first, then push right subnode and then left subnode.</li>
<li>There are two situations we need pop node from stack to the list. One is the left subnode and right subnode of the current node is null.  Another is the left subtree and right subtree have been visited.</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree <span class="keyword">node</span>.</div><div class="line"> <span class="title">* public</span> class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line">public class Solution1 &#123;</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		helper(list, root);</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">	void helper(List<span class="tag">&lt;Integer&gt;</span> list, TreeNode <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">		if(<span class="keyword">node</span> <span class="title">== null</span>) return;</div><div class="line">		helper(list, <span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">		helper(list, <span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">		list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	//Two stack</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		if(root == null) return list;</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> reverseStack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		stack.push(root);</div><div class="line">		while(!stack.isEmpty()) &#123;</div><div class="line">			TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">			reverseStack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">			if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">		&#125;</div><div class="line">		while(!reverseStack.isEmpty()) &#123;</div><div class="line">			list.add(reverseStack.pop());</div><div class="line">		&#125;</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution3 &#123;</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		if(root == null) return list;</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		stack.push(root);</div><div class="line">		TreeNode prev = null;</div><div class="line">		while(!stack.isEmpty()) &#123;</div><div class="line">			TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.peek();</div><div class="line">			</div><div class="line">			//<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null means <span class="keyword">node</span> <span class="title">is</span> leave</div><div class="line">			//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">left</span> means have already traversed left subtree, the right subtree is null			//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span> means have already traversed right subtree</div><div class="line">			//prev!=<span class="keyword">node</span>.<span class="title">left</span>&amp;&amp;prev!=<span class="keyword">node</span>.<span class="title">right</span> means have poped from stack several times <span class="keyword">and</span> get to the another side of tree.</div><div class="line">			</div><div class="line">			if((<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null)||(prev!=null &amp;&amp; (prev == <span class="keyword">node</span>.<span class="title">left</span> || <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span>))) &#123;</div><div class="line">				<span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">				list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">				prev = <span class="keyword">node</span><span class="title">;</span></div><div class="line">			&#125;else &#123;</div><div class="line">				if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">				if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			&#125;		</div><div class="line">		&#125;</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-postorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetco
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Inorder Traversal</title>
    <link href="http://xinli90.com/2016/08/23/Binary-Tree-Inorder-Traversal/"/>
    <id>http://xinli90.com/2016/08/23/Binary-Tree-Inorder-Traversal/</id>
    <published>2016-08-23T17:42:55.000Z</published>
    <updated>2016-08-28T03:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Inorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[1,3,2]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, traverse left subtree, visit root and add the value of root into list, and then right subtree.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Utilize Stack, traverse left subtree of the root to the left most node and push them into stack.      </li>
<li>If left subtree is null, pop() one node from stack and record its value into list. Visit the right subtree of this node once, and then repeat 1 and 2 operation.          </li>
<li>Notice: here is a tricky point. Since traverse left subtree of the root, there is no need to traverse left subtree again for the node which pop from the stack.  Therefore, we need have two nodes. One assigns to the node pop from stack. One assigns to the new node which we find when we traverse right subtree of someone. Traverse left subtree only for the second node.        </li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="comment">//Solution1: add helper() method</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(<span class="built_in">list</span>, root);</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span>, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node == <span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		helper(<span class="built_in">list</span>, node.left);</div><div class="line">		<span class="built_in">list</span>.add(node.val);</div><div class="line">		helper(<span class="built_in">list</span>,node.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">		<span class="built_in">stack</span>.push(root);</div><div class="line">		TreeNode node = root;</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;	</div><div class="line">			<span class="keyword">while</span>(node.left!=<span class="built_in">null</span>) &#123;</div><div class="line">				<span class="built_in">stack</span>.push(node.left);</div><div class="line">				node = node.left;</div><div class="line">			&#125;</div><div class="line">			TreeNode addNode = <span class="built_in">stack</span>.pop();</div><div class="line">			<span class="built_in">list</span>.add(addNode.val);</div><div class="line">			<span class="keyword">if</span>(addNode.right!=<span class="built_in">null</span>) &#123;</div><div class="line">				<span class="built_in">stack</span>.push(addNode.right);</div><div class="line">				node = addNode.right;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-inorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Preorder Traversal</title>
    <link href="http://xinli90.com/2016/08/23/Binary-Tree-Preorder-Traversal/"/>
    <id>http://xinli90.com/2016/08/23/Binary-Tree-Preorder-Traversal/</id>
    <published>2016-08-23T17:26:02.000Z</published>
    <updated>2016-08-28T04:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Preorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[1,2,3]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, visit root and add the value of root into list. Traverse left subtree and then right subtree.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><p>The similar way with solution1, but without helper() method.     </p>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Utilize Stack, Each time we use List to store the output node from stack.    </li>
<li>Traverse the output node from right to left and push into stack.    </li>
<li>Loop 1 and 2 operation.    </li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="comment">//Solution1: add helper() method</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(<span class="built_in">list</span>,root);</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span>, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="built_in">list</span>.add(node.val);</div><div class="line">		helper(<span class="built_in">list</span>,node.left);</div><div class="line">		helper(<span class="built_in">list</span>,node.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">list</span>.add(root.val);</div><div class="line">		<span class="built_in">list</span>.addAll(preorderTraversalRec(root.left));</div><div class="line">		<span class="built_in">list</span>.addAll(preorderTraversalRec(root.right));</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> class Solution3 &#123;</div><div class="line">		<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">		<span class="built_in">stack</span>.push(root);</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;</div><div class="line">			TreeNode node = <span class="built_in">stack</span>.pop();</div><div class="line">			<span class="built_in">list</span>.add(node.val);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.right);</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-preorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcod
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Depth of Binary Tree</title>
    <link href="http://xinli90.com/2016/08/23/Maximum-Depth-of-Binary-Tree/"/>
    <id>http://xinli90.com/2016/08/23/Maximum-Depth-of-Binary-Tree/</id>
    <published>2016-08-23T16:44:52.000Z</published>
    <updated>2016-08-28T20:22:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">Leetcode-Maximum Depth of Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, the depth is 0;      </li>
<li>if the tree is null, the depth = max(depth of left tree，depth of right tree) + 1       </li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><p>Utilize BFS, count the levels. It’s the same as the the number of loops.      </p>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><p>Utilize DFS, record the depth of each path and maintain the maximum one until traversal all paths.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxDepth(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="comment">//Traverse tree use BFS</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getNodeNum(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">		queue.add(root);</div><div class="line">		<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">size</span> = queue.<span class="keyword">size</span>();</div><div class="line">			<span class="keyword">count</span> += <span class="keyword">size</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++) &#123;</div><div class="line">				TreeNode node = queue.poll();</div><div class="line">				<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.add(node.left);</div><div class="line">				<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.add(node.right);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day10 Algorithm about Itetation and Recursion</title>
    <link href="http://xinli90.com/2016/08/22/Day10-Algorithm-about-Itetation-and-Recursion/"/>
    <id>http://xinli90.com/2016/08/22/Day10-Algorithm-about-Itetation-and-Recursion/</id>
    <published>2016-08-22T18:05:19.000Z</published>
    <updated>2016-08-22T18:05:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
