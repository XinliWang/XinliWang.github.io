<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-09-17T03:46:22.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Number of Islands</title>
    <link href="http://xinli90.com/2016/09/16/Number-of-Islands/"/>
    <id>http://xinli90.com/2016/09/16/Number-of-Islands/</id>
    <published>2016-09-17T03:13:32.000Z</published>
    <updated>2016-09-17T03:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Leetcode-Number of Islands</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div></pre></td></tr></table></figure>
<p>Answer: 1</p>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div></pre></td></tr></table></figure>
<p>Answer: 3</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Recursively to check each cell when we find the ‘1’</li>
<li>Just make the island disappear once a cell was found.</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">	public <span class="keyword">int</span> numIslands(char[][] <span class="keyword">grid</span>) &#123;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">grid</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="keyword">grid</span>[<span class="number">0</span>].length; j++) &#123;</div><div class="line">				count++;</div><div class="line">				disappear(<span class="keyword">grid</span>,i,j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void disappear(char[][] <span class="keyword">grid</span>, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=<span class="keyword">grid</span>.legnth || j&lt;<span class="number">0</span> || j&gt;=<span class="keyword">grid</span>[<span class="number">0</span>].length || <span class="keyword">grid</span>[i][j]==<span class="string">'0'</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">grid</span>[i][j]==<span class="string">'1'</span>) <span class="keyword">grid</span>[i][j]=<span class="string">'0'</span>;</div><div class="line">		disappear(<span class="keyword">grid</span>,i<span class="number">-1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i+<span class="number">1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j<span class="number">-1</span>);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Number of I
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Add Binary</title>
    <link href="http://xinli90.com/2016/09/16/Add-Binary/"/>
    <id>http://xinli90.com/2016/09/16/Add-Binary/</id>
    <published>2016-09-17T02:51:17.000Z</published>
    <updated>2016-09-17T03:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="external">Leetcode-Add Binary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).     </p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Set a flag to track if we have the carry.</li>
<li>Each time we use a and b with the same index together and plus flag to calculate which number we should to add into String.  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar with Solution1, but combine all while loops together.</li>
<li>We can use StringBuilder.inset(0,num) method instead of String operation.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        String result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> &amp;&amp; b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">            b_index--;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            b_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag==<span class="number">1</span>? <span class="string">"1"</span>+result : result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> || b_index &gt;= <span class="number">0</span> || carry==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a_index &lt; <span class="number">0</span>? <span class="number">0</span> : a.charAt(a_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b_index &lt; <span class="number">0</span>? <span class="number">0</span> : b.charAt(b_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="keyword">sum</span>%<span class="number">2</span>);</div><div class="line">            carry = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/add-binary/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Add Binary&lt;/a&gt;.&lt;/p
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>First Bad Version</title>
    <link href="http://xinli90.com/2016/09/15/First-Bad-Version/"/>
    <id>http://xinli90.com/2016/09/15/First-Bad-Version/</id>
    <published>2016-09-15T23:39:44.000Z</published>
    <updated>2016-09-15T23:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.       </p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.      </p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Binary Search.</li>
<li>If mid is bad and the number which is previous mid is not bad, return it.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The isBadVersion API <span class="keyword">is</span> defined <span class="keyword">in</span> the parent <span class="keyword">class</span> VersionControl.</div><div class="line">      boolean isBadVersion(<span class="built_in">int</span> version); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution extends VersionControl &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> firstBadVersion(<span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="built_in">int</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = low+(high-low)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(isBadVersion(<span class="built_in">mid</span>)&amp;&amp;!isBadVersion(<span class="built_in">mid</span><span class="number">-1</span>)) return <span class="built_in">mid</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isBadVersion(<span class="built_in">mid</span>)) low = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = <span class="built_in">mid</span><span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        return low; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-First Bad V
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Top K Frequent Elements</title>
    <link href="http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/"/>
    <id>http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/</id>
    <published>2016-09-13T21:12:13.000Z</published>
    <updated>2016-09-13T21:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">Leetcode-Top K Frequent Elements</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, return the k most frequent elements.     </p>
<p>For example,<br>Given [1,1,1,2,2,3] and k = 2, return [1,2].</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.<br>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n)</li>
<li>Use HashMap to count the frequency of each number, key is number ,value is frequency</li>
<li>Create a array with List, the maximum size is the 1+length of nums. Because we need consider that we only have multiple one number. The index of this number is length.</li>
<li>Put the number which has the same frequency together.</li>
<li>At last from the end to start, add the small list into list until the list size is not less than k.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(n+nlogk)</li>
<li>Use MinHeap. Each time we poll minimum element from PriorityQueue. Then we can keep track of k most significant entries.</li>
<li>Iterate through the final heap and get the keys.</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(num))&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="built_in">map</span>.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;Integer&gt;[] bucket = <span class="keyword">new</span> List[nums.length+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)]==<span class="keyword">null</span>)&#123;</div><div class="line">                bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            &#125;</div><div class="line">            bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)].<span class="built_in">add</span>(<span class="built_in">key</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> index = nums.length; index&gt;=<span class="number">0</span> &amp;&amp; list.<span class="built_in">size</span>()&lt;k; index--) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[index]!=<span class="keyword">null</span>)&#123;</div><div class="line">                list.addAll(bucket[index]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">     <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; counterMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(counterMap.containsKey(num))&#123;</div><div class="line">                counterMap.put(num,counterMap.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                counterMap.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue()-b.getValue());</div><div class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : counterMap.entrySet()) &#123;</div><div class="line">        pq.offer(entry);</div><div class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k) pq.poll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">while</span>(!pq.isEmpty()) &#123;</div><div class="line">        res.<span class="built_in">add</span>(<span class="number">0</span>, pq.poll().getKey());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Top K
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Number of 1 Bits</title>
    <link href="http://xinli90.com/2016/09/11/Number-of-1-Bits/"/>
    <id>http://xinli90.com/2016/09/11/Number-of-1-Bits/</id>
    <published>2016-09-11T16:19:08.000Z</published>
    <updated>2016-09-11T17:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">Leetcode-Number of 1 Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(size of num)</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>“n &amp;= n - 1” is used to delete the right “1” of n. </li>
<li>Count its “1”</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> number = n;</div><div class="line">		<span class="keyword">while</span>(number!=<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">count</span> += (number&amp;<span class="number">1</span>);</div><div class="line">			<span class="comment">//unsigned operation</span></div><div class="line">			number &gt;&gt;&gt;= <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(; n!=<span class="number">0</span>; n = (n &amp; (n<span class="number">-1</span>)))&#123;</div><div class="line">			<span class="keyword">count</span>++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Number of 1 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Counting Bits</title>
    <link href="http://xinli90.com/2016/09/11/Counting-Bits/"/>
    <id>http://xinli90.com/2016/09/11/Counting-Bits/</id>
    <published>2016-09-11T14:35:49.000Z</published>
    <updated>2016-09-11T15:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="external">Leetcode-Count Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.</p>
<p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p>
<p>Follow up:</p>
<p>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>Space complexity should be O(n).<br>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</p>
<p>Hint:</p>
<p>You should make use of what you have produced already.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n*(size of num)), but time limit exceeded.</li>
<li>count each number from 0 to num</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar to solution1.</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Recursion.  Make Use of what I have produced already. </li>
<li>Time complexity is O(n)</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><p>The number in one range are equal to 1 plus all of the numbers in the ranges before it. For example, the numbers 8-15 have the same pattern as 0-7 but with a 1 at the front.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">count</span> += number%<span class="number">2</span>;</div><div class="line">				number /= <span class="number">2</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">if</span>((number &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">count</span>++;</div><div class="line">				<span class="keyword">count</span> &gt;&gt;= <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			result[i] = result[i/<span class="number">2</span>] + i%<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="comment">//default: result[0] = 0</span></div><div class="line">		<span class="keyword">int</span> pow = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=num; i++,j++) &#123;</div><div class="line">			<span class="keyword">if</span>(i == pow) &#123;</div><div class="line">				pow &lt;&lt;=<span class="number">1</span>;</div><div class="line">				j=<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = result[j]+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/counting-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Count Bits&lt;/a&gt;.
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JAVA Web 01</title>
    <link href="http://xinli90.com/2016/09/09/JAVA-Web-01/"/>
    <id>http://xinli90.com/2016/09/09/JAVA-Web-01/</id>
    <published>2016-09-09T20:42:11.000Z</published>
    <updated>2016-09-10T22:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>一、HttpServlet首先必须读取Http请求的内容。Servlet容器负责创建HttpServlet对象，并把Http请求直接封装到HttpServlet对象中，大大简化了HttpServlet解析请求数据的工作量。HttpServlet容器响应Web客户请求流程如下：     </p>
<p>1）Web客户向Servlet容器发出Http请求；</p>
<p>2）Servlet容器解析Web客户的Http请求；</p>
<p>3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；</p>
<p>4）Servlet容器创建一个HttpResponse对象；</p>
<p>5）Servlet容器调用HttpServlet的service方法，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；</p>
<p>6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；</p>
<p>7）HttpServlet调用HttpResponse的有关方法，生成响应数据；</p>
<p>8）Servlet容器把HttpServlet的响应结果传给Web客户。</p>
<p>二、创建HttpServlet的步骤——“四部曲”</p>
<p>1）扩展HttpServlet抽象类；</p>
<p>2）覆盖HttpServlet的部分方法，如覆盖doGet()或doPost()方法；</p>
<p>3）获取HTTP请求信息。通过HttpServletRequest对象来检索HTML表单所提交的数据或URL上的查询字符串；</p>
<p>4）生成HTTP响应结果。通过HttpServletResponse对象生成响应结果，它有一个getWriter()方法，该方法返回一个PrintWriter对象。</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>Servlet主要功能是接受从浏览器发送来的HTTP请求（request），并返回HTTP响应（response）,这个在service方法中完成，service中包含了从request对象获得客户端数据和向response对象创建输出。如果Servlet 继承了 HttpServlet,实现了doPost或doGet方法，那么service只能对POST或GET做出响应。</p>
<p>Example:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mypack;</div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet//第一步：扩展HttpServlet抽象类</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//第二步：覆盖doGet()方法</span></div><div class="line"> 	public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line"> 		<span class="comment">//第三步：获取HTTP请求中的参数信息</span></div><div class="line"> 		<span class="type">String</span> clientName = request.getParameter(<span class="string">"clientName"</span>);</div><div class="line"> 		<span class="keyword">if</span>(clientName!=<span class="literal">null</span>) &#123;</div><div class="line"> 			clientName = clientName+<span class="string">"a"</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="comment">//第四步：生成HTTP响应结果</span></div><div class="line"> 		<span class="type">String</span> title=<span class="string">"HelloServlet"</span>;</div><div class="line">  		<span class="type">String</span> heading1=<span class="string">"HelloServlet的doGet方法的输出："</span>;</div><div class="line">  </div><div class="line"> 		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"> 		<span class="type">PrintWriter</span> out = response.getWriter();</div><div class="line"> 		<span class="comment">//写HTML Page</span></div><div class="line"> 		out.print(<span class="string">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;"</span>+title+<span class="string">"&lt;/TITLE&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/HEAD&gt;&lt;BODY&gt;"</span>);</div><div class="line">  		out.print(heading1);</div><div class="line">  		out.println(<span class="string">"&lt;h1&gt;&lt;p&gt;"</span>+clientName+<span class="string">":您好&lt;/h1&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/BODY&gt;&lt;/HTML&gt;"</span>);</div><div class="line">  		</div><div class="line">  		out.close();</div><div class="line"> 	&#125;</div><div class="line">	public void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line">		doGet(request,response);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">在web.xml中添加</div><div class="line">&lt;servlet&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;servlet-<span class="class"><span class="keyword">class</span><span class="title">&gt;mypack</span>.<span class="title">HelloServlet&lt;/servlet-class&gt;</span></span></div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol>
<li><p>关于<code>response.setContentTyep()</code>： response的的设置对应你看到的html，setContentType对应这句<br><meta http-equiv="Content-type" content="text/html; charset=utf-8"><br>意思是告诉浏览器我的这个内容是文本html，然后字符编码是utf-8，如果你不告诉浏览器编码，那么浏览器，一般会根据系统默认编码来解析你的页面中的字符。 </p>
</li>
<li><p>Response：封装响应消息，设置响应消息</p>
<ul>
<li><p>设置响应行：HTTP/1.1 200 ok        </p>
<ul>
<li><p>setStatus(int code)：设置响应状态码      </p>
<ul>
<li><p>演示重定向：302<br>  //简化版的重定向<br>  response.sendRedirect(“<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</p>
<ul>
<li>实现原理<br>//1.设置响应状态码为 302<br>response.setStatus(302);<br>//2.设置响应头 location<br>response.setHeader(“location”, “<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>设置响应头：</p>
<ul>
<li>setHeader(String name,String value):     </li>
<li>setDateHeader(String name, long date) </li>
<li>setIntHeader(String name, int value) </li>
</ul>
</li>
<li><p>设置响应体：</p>
<ul>
<li><p>getOutputStream():发送字节数据</p>
<ul>
<li>验证码：<ul>
<li>防止恶意注册</li>
</ul>
</li>
</ul>
</li>
<li><p>getWriter():发送字符数据         </p>
<ul>
<li>发送中文数据时，需要在获取流之前设置编码方式，并且要告诉客户端浏览器，服务器使用的编码方式<br>  //简化版设置编码的方式<br>  response.setContentType(“text/html;charset=utf-8”);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><code>response.setHeader()</code>:     </li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">response<span class="selector-class">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"><span class="comment">//设置响应消息头： 2 秒后刷新到Demo5</span></div><div class="line">response<span class="selector-class">.setHeader</span>(<span class="string">"refresh"</span>,<span class="string">"2:URL=/day10_response/servlet/ResponseDemo5"</span>)</div><div class="line"><span class="comment">//设置编码</span></div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.getWriter</span>()<span class="selector-class">.write</span>(<span class="string">"Congratulation! Login sucessfully! Will jump to main page after 2 seconds"</span>);</div></pre></td></tr></table></figure>
<h3 id="四大域"><a href="#四大域" class="headerlink" title="四大域"></a>四大域</h3><ol>
<li>PageContext: is only used in JSP for variables that don’t get passed if the request is forwarded.</li>
<li>ServletRequest: data can only exists during one request for one user.</li>
<li>HttpSession: only one user can use. An application may manage many sessions.</li>
<li>ServletContext: All users in entire web application can use.</li>
</ol>
<h3 id="EL-and-JSTL"><a href="#EL-and-JSTL" class="headerlink" title="EL and JSTL"></a>EL and JSTL</h3><p>In order to make the code more readable, we use EL instead of JAVA in HTML. It’s more like HTML tags. It’s only used for getting data in page, request, session and applicaiton scopes.</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>JDBC 连接步骤：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.注册驱动</span></div><div class="line"><span class="keyword">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//2.获取与数据库的连接</span></div><div class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/day17"</span>,<span class="string">"root"</span>,<span class="string">"sorry"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//3.得到代表SQL语句的对象，向数据库发送语句</span></div><div class="line">Statement stmt = conn.createStatement()<span class="comment">;</span></div><div class="line"><span class="comment">//4.执行语句</span></div><div class="line">ResultSet rs = stmt.executeQuery(<span class="string">"select id from users"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//5.如果执行是查询语句，就会有结果集，处理</span></div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">	rs.getObject(<span class="string">"id"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//6.释放占用的资源</span></div><div class="line">rs.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">stmt.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">conn.<span class="keyword">close</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h4 id="抽取JDBC工具类模板"><a href="#抽取JDBC工具类模板" class="headerlink" title="抽取JDBC工具类模板"></a>抽取JDBC工具类模板</h4><p>1.创建数据库配置文件: dbcfg.properties</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">driverClass</span>=com.mysql.jdbc.Driver</div><div class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/cloud</div><div class="line"><span class="attr">user</span>=root</div><div class="line"><span class="attr">password</span>=sorry</div></pre></td></tr></table></figure>
<p>2.抽取模板</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="comment">//JDBC工具类:与数据库无关</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> &#123;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="comment">//读取配置文件</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InputStream <span class="keyword">in</span> = JdbcUtil.<span class="keyword">class</span>.getClassLoader().getResourceAsStream(<span class="string">"dbcfg.properties"</span>);</div><div class="line">			Properties props = <span class="keyword">new</span> Properties();</div><div class="line">			props.load(<span class="keyword">in</span>);</div><div class="line">			driverClass = props.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">			url = props.getProperty(<span class="string">"url"</span>);</div><div class="line">			user = props.getProperty(<span class="string">"user"</span>);</div><div class="line">			password = props.getProperty(<span class="string">"password"</span>);</div><div class="line">			Class.forName(driverClass);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Connection getConnection() <span class="keyword">throws</span> Exception&#123;</div><div class="line">		Connection conn = DriverManager.getConnection(url,user,password);</div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> release(ResultSet rs,Statement stmt,Connection conn)&#123;</div><div class="line">		<span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			rs = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				stmt.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			stmt = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			conn = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.When you want to use this util class:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line">PreparedStatement stmt = <span class="keyword">null</span>;</div><div class="line">ResultSet rs = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	conn = JdbcUtil.getConnection();</div><div class="line">	<span class="comment">//prevent SQL Injection</span></div><div class="line">	stmt = conn.prepareStatement(<span class="string">"select..."</span>);</div><div class="line">	rs = stmt.executeQuery();</div><div class="line">	<span class="comment">//...code</span></div><div class="line">	</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	JdbcUtil.release(rs,stmt,conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="大数据存储"><a href="#大数据存储" class="headerlink" title="大数据存储"></a>大数据存储</h4><p>We can use batch processing, each time we excute a list of inserts in batch.  Instead of hitting database once for each insert statement, we will use JDBC batch operation and optimize the performance. </p>
<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p><code>Stored procedures</code>: A benefit of stored procedures is that you can centralize data access logic into a single place that is then easy for DBA’s to optimize. Stored procedures also have a security benefit in that you can grant execute rights to a stored procedure but the user will not need to have read/write permissions on the underlying tables. This is a good first step against SQL Injection.</p>
<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p><code>Trigger</code>: A trigger is a special kind of stored procedure that automatically executes when an event occurs in the database server.</p>
<h4 id="DataSource-Pool"><a href="#DataSource-Pool" class="headerlink" title="DataSource Pool"></a>DataSource Pool</h4><p>新建一个连接池，每次从连接池去conn, 用完后放回池中，而不是直接conn.close()。<br>因此我们需要改写close()方法，使用包装设计模式(Decorator), implement Connection,改写close()方法，不用改变的方法直接调用原来的方法。</p>
<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>实现自动登录功能：<br>把用户名：Base64编码，把密码：MD5加密。存入Cookie中，登录时取出解析并与数据库中的用户名和密码比较。</p>
<p>Filter先执行，chain.doFilter(request,reponse)过滤之后再执行servlet.</p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol>
<li>表单的method必须是post</li>
<li>表单的enctype属性值必须是multipart/form-data</li>
<li>表单中提供input type=”file”类型的上传输入域</li>
</ol>
<h4 id="显示上传文件条"><a href="#显示上传文件条" class="headerlink" title="显示上传文件条"></a>显示上传文件条</h4><p>使用Ajax+Listener, 不断监听文件上传多少，使用ajax不断回取数据以及更新图样。      </p>
<h4 id="8个监听器"><a href="#8个监听器" class="headerlink" title="8个监听器"></a>8个监听器</h4><ol>
<li>ServletContextListener: 完成系统初始化工作</li>
<li>HttpSessionListener: 可以统计HttpSession对象的个数，分析某个时间段同时在线的人数</li>
<li>ServletRequestListener: 可以统计每个页面的访问次数</li>
<li>HttpSessionAttributeListener: 显示在线用户列表,session.setAttribute(“user”,user);</li>
<li>ServletContextAttributeListener</li>
<li>ServletRequestAttributeListener</li>
<li>HttpSessionBindingListener: 监测何时随着HttpSession绑定和解绑</li>
<li>HttpSessionActivationListener: 监测何时随着HttpSession激活和钝化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HttpServlet&quot;&gt;&lt;a href=&quot;#HttpServlet&quot; class=&quot;headerlink&quot; title=&quot;HttpServlet&quot;&gt;&lt;/a&gt;HttpServlet&lt;/h3&gt;&lt;p&gt;一、HttpServlet首先必须读取Http请求的内容。Servl
    
    </summary>
    
      <category term="J2EE" scheme="http://xinli90.com/categories/J2EE/"/>
    
    
      <category term="J2EE" scheme="http://xinli90.com/tags/J2EE/"/>
    
  </entry>
  
  <entry>
    <title>Implement strStr()</title>
    <link href="http://xinli90.com/2016/09/08/Implement-strStr/"/>
    <id>http://xinli90.com/2016/09/08/Implement-strStr/</id>
    <published>2016-09-08T19:30:00.000Z</published>
    <updated>2016-09-13T20:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="external">Leetcode- Implement strStr()</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement strStr().</p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>This question test how to use indexOf() in String.</p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Using subString() method. Iterate the array and compare needle with substring of haystack.</li>
<li>Time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the array and compare each character with needle.</li>
<li>The worest time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>KMP, time complexity is O(n)</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">    	<span class="keyword">int</span> hayStackSize =  haystack.length();</div><div class="line">    	<span class="keyword">int</span> needleSize = needle.length();</div><div class="line">    	<span class="built_in">if</span>(hayStackSize&lt;needleSize) <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    	<span class="built_in">else</span> <span class="built_in">if</span>(needleSize==<span class="number">0</span>) <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=hayStackSize-needleSize; i++) &#123;</div><div class="line">    		<span class="built_in">if</span>(haystack.subtring(i,i+needleSize).equals(needle)) <span class="built_in">return</span> i;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> <span class="number">-1</span>;;</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">        <span class="keyword">int</span> hay_size = haystack.length();</div><div class="line">        <span class="keyword">int</span> nee_size = needle.length();</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;= hay_size-nee_size ; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="built_in">while</span>(j&lt;nee_size &amp;&amp; haystack.charAt(i+j)==needle.charAt(j)) &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">if</span>(j==nee_size) <span class="built_in">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/implement-strstr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode- Implement s
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="http://xinli90.com/2016/09/07/Integer-to-Roman/"/>
    <id>http://xinli90.com/2016/09/07/Integer-to-Roman/</id>
    <published>2016-09-07T22:08:05.000Z</published>
    <updated>2016-09-07T22:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><p>This is a very smart solution to simulate the number;</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	public <span class="built_in">String</span> intToRoman(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="built_in">String</span>[] M = &#123;<span class="string">""</span>,<span class="string">"M"</span>,<span class="string">"MM"</span>,<span class="string">"MMM"</span>,<span class="string">"MMMM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] C = &#123;<span class="string">""</span>,<span class="string">"C"</span>,<span class="string">"CC"</span>,<span class="string">"CCC"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"DCC"</span>,<span class="string">"DCCC"</span>,<span class="string">"CM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] X = &#123;<span class="string">""</span>,<span class="string">"X"</span>,<span class="string">"XX"</span>,<span class="string">"XXX"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"LXX"</span>,<span class="string">"LXXX"</span>,<span class="string">"XC"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] I = &#123;<span class="string">""</span>,<span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>&#125;;</div><div class="line">        <span class="keyword">return</span> M[<span class="built_in">num</span>/<span class="number">1000</span>]+C[<span class="built_in">num</span>%<span class="number">1000</span>/<span class="number">100</span>]+X[<span class="built_in">num</span>%<span class="number">100</span>/<span class="number">10</span>]+I[<span class="built_in">num</span>%<span class="number">10</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Roman to Int
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://xinli90.com/2016/09/07/Roman-to-Integer/"/>
    <id>http://xinli90.com/2016/09/07/Roman-to-Integer/</id>
    <published>2016-09-07T18:04:36.000Z</published>
    <updated>2016-09-07T22:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1:"></a>Solution1:</h4><ol>
<li>The character which is greater precede the smaller one, add the original number. Otherwise, add the number which minus previous one.</li>
<li>Using Switch method to choose the right number to add based on the different character ordering. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2:"></a>Solution2:</h4><ol>
<li>Maintain previous pointer and current pointer, if current element is less than previous one, add it.  </li>
<li>Otherwise, minus the previous one and add the difference of current and previous element.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">		<span class="keyword">char</span> previous = <span class="string">'\0'</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="built_in">switch</span>(c) &#123;</div><div class="line">				<span class="built_in">case</span> <span class="string">'I'</span>: num++; <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'V'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">3</span> : <span class="number">5</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'X'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">8</span> : <span class="number">10</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'L'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">30</span> : <span class="number">50</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'C'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">80</span> : <span class="number">100</span>;</div><div class="line">						  <span class="built_in">break</span>;		  </div><div class="line">				<span class="built_in">case</span> <span class="string">'D'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">300</span> : <span class="number">500</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'M'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">800</span> : <span class="number">1000</span>;</div><div class="line">						  <span class="built_in">break</span>;	</div><div class="line">				<span class="built_in">default</span>: <span class="built_in">return</span> <span class="number">0</span>;	  </div><div class="line">			&#125;</div><div class="line">			previous = c;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="keyword">int</span> cur = <span class="built_in">map</span>.<span class="built_in">get</span>(c);</div><div class="line">			<span class="built_in">if</span>(cur&lt;=pre) sum += cur;</div><div class="line">			<span class="built_in">else</span> sum = sum - pre + cur - pre;</div><div class="line">			pre = cur;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Roman to Int
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day12 JAVA Key Words</title>
    <link href="http://xinli90.com/2016/09/06/Day12-JAVA-Key-Words/"/>
    <id>http://xinli90.com/2016/09/06/Day12-JAVA-Key-Words/</id>
    <published>2016-09-06T23:02:20.000Z</published>
    <updated>2016-09-11T23:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Java各种关键字的区别。</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆关键字特性</li>
<li>总结关键字特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>private , protected, public: private 只有当前class内可见，protected当前class,subclass和一个package下可见，public所有可见。</li>
<li>Interface and Abstract class: Interface的方法不用具体实现，默认是public的方法，如果有成员变量也默认为 public， Abstact class中方法需要具体实现，用abstract 关键字来区别是否为abstract method,可以有非abstact得方法和成员变量。</li>
<li>extnds and implement: extends一个abstact class，implement多个interface</li>
<li>static用法：static可以在创建new instance of class 前直接调用。</li>
<li>final：定义后的变量初次赋值后，不可再变。</li>
<li>Polymorphism: 当一个类继承和实现其他抽象类或接口后，该类就具备了其他类所具备的方法</li>
<li>Encapsulation: 为了使代码解耦，使得相同功能的代码放在一起，加强代码的利用率。</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="class-and-object"><a href="#class-and-object" class="headerlink" title="class and object"></a>class and object</h3><p>Class is a general concept and the object is a very specific embodiment of that class, with a limited lifespan.</p>
<ol>
<li>Class: A class is a program construct which encapsulate data and operation on data.</li>
<li>Object: is an actual instance of a class.</li>
</ol>
<h3 id="Interface-and-Abstract-class"><a href="#Interface-and-Abstract-class" class="headerlink" title="Interface and Abstract class"></a>Interface and Abstract class</h3><ol>
<li><p><code>Interface</code>: All methods in interface are implictly abstract.  We should implement all the declared methods.  A class could implement multiple interface.  Members of interface are <code>public</code> and variables are <code>static,final and public</code> by default. (Since interface doesn’t have a direct object, the only way to access them is by using a class/interface and hence that is why if interface variable exists, it should be static otherwise it won’t be accessible at all to outside world. Now since it is static, it can be hold only one value and any classes that implements it can change it and it will be all mess. So it is final)</p>
</li>
<li><p><code>Abstract class</code>: It’s allowed to have non-abstract methods. So the memeber of abstract class can either be private,protected and public and may contain non-final variables.  A class can only extends one abstact class. They may not implement all declared methods, in this case, the subclass must be also declared as an abstract class. An abstract method could be protected or public.</p>
</li>
</ol>
<h3 id="Inner-class"><a href="#Inner-class" class="headerlink" title="Inner class"></a>Inner class</h3><p>A class can be a <code>member of another class</code>, which is an inner class.  </p>
<p><code>Non-static nested classes</code> (inner classes) have access to other members of the enclosing class, even if they are declared private.  It is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such “helper classes” makes their package more streamlined.  </p>
<p>It increases <code>encapsulation</code>: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A, A’s members can be declared private and B can access them. In addition, B itself can be hidden from the outside world.  It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.</p>
<h3 id="Inheritance-Polymorphism-Encapsulation"><a href="#Inheritance-Polymorphism-Encapsulation" class="headerlink" title="Inheritance,Polymorphism,Encapsulation"></a>Inheritance,Polymorphism,Encapsulation</h3><ol>
<li><p><code>Inheritance</code>: The ability of a new class to be created, from an existing class by extends it.</p>
</li>
<li><p><code>Polymorphism</code>: Polymorphism is a generic term that means ‘many shapes’.  More precisely means the ability to request that the same operations be performed by a wide range of different types of things.</p>
</li>
<li><p><code>Encapsulation</code>: is often used as a technique for encouraging decoupling.  This is useful because it prevents the external code from being concerned with teh internal workings of an object.</p>
</li>
</ol>
<h3 id="Override-and-Overload"><a href="#Override-and-Overload" class="headerlink" title="Override and Overload"></a>Override and Overload</h3><ol>
<li><p><code>Override</code> is defined as the case when a child class redefines the same method as a parent class. Override methods must have the same name, argumentlist and return type.</p>
</li>
<li><p><code>Overload</code> occurs when two or more methods in the same class have the exact same name, but different parameters.</p>
</li>
</ol>
<h3 id="private-protected-public"><a href="#private-protected-public" class="headerlink" title="private, protected, public"></a>private, protected, public</h3><ol>
<li><p><code>private</code>: We can only use the private variable in instance class.</p>
</li>
<li><p><code>protected</code>: Protected variable can be accessed in the same package and subclass.</p>
</li>
<li><p><code>public</code>: public opens for any scope.</p>
</li>
</ol>
<h3 id="static-and-static-block"><a href="#static-and-static-block" class="headerlink" title="static and static block"></a>static and static block</h3><ol>
<li><p><code>Static</code> function have no object to work with since they belong to the class as a whole. You can call a static function without an object.<br>So a static function cannot access non-static member variables of class. We cannot use ‘this’ pointer. <code>This</code> pointer is only used when a class is instantiated as an object.</p>
</li>
<li><p><code>Static block</code>: It’s a <code>static initializer</code>. It’s used when a block of code needs to be executed during loading of the class by JVM. It can be thought of as a “class constructor”. It’s mostly used for changing the default values of static variables. Execute static block first, then execute constructor.</p>
</li>
<li><p><code>static class</code>: A <code>class</code> can be made static only if it is a nested Class. The nested static class can be accessed without having an object of outer class. </p>
</li>
</ol>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">/* Java program to demonstrate how to implement<span class="keyword"> static</span><span class="built_in"> and </span>non-static</div><div class="line">   classes in a java program. */</div><div class="line">class OuterClass&#123;</div><div class="line">  <span class="keyword"> private</span><span class="keyword"> static</span> String msg = <span class="string">"GeeksForGeeks"</span>;</div><div class="line">    </div><div class="line">   // Static nested class</div><div class="line">  <span class="keyword"> public</span><span class="keyword"> static</span> class NestedStaticClass&#123;</div><div class="line">      </div><div class="line">       // Only<span class="keyword"> static</span> members of Outer class is directly accessible in nested </div><div class="line">       //<span class="keyword"> static</span> class </div><div class="line">      <span class="keyword"> public</span> void printMessage() &#123;</div><div class="line"> </div><div class="line">         // Try making 'message' a non-static variable, there will be </div><div class="line">         // compiler error  </div><div class="line">         System.out.println(<span class="string">"Message from nested static class: "</span> + msg); </div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // non-static nested class - also called Inner class</div><div class="line">   <span class="keyword"> public</span> class InnerClass&#123;</div><div class="line">        </div><div class="line">       // Both<span class="keyword"> static</span><span class="built_in"> and </span>non-static members of Outer class are accessible in </div><div class="line">       // this Inner class</div><div class="line">      <span class="keyword"> public</span> void display()&#123;</div><div class="line">          System.out.println(<span class="string">"Message from non-static nested class: "</span>+ msg);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">class Main</div><div class="line">&#123;</div><div class="line">    // How to create<span class="built_in"> instance </span>of<span class="keyword"> static</span><span class="built_in"> and </span>non<span class="keyword"> static</span> nested class?</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> void main(String args[])&#123;</div><div class="line">        </div><div class="line">       // create<span class="built_in"> instance </span>of nested Static class</div><div class="line">       OuterClass.NestedStaticClass printer =<span class="built_in"> new </span>OuterClass.NestedStaticClass();</div><div class="line">        </div><div class="line">       // call non<span class="keyword"> static</span> method of nested<span class="keyword"> static</span> class</div><div class="line">       printer.printMessage();   </div><div class="line">  </div><div class="line">       // In order to create<span class="built_in"> instance </span>of Inner class we need an Outer class </div><div class="line">       // instance. Let us create Outer class<span class="built_in"> instance </span>for creating </div><div class="line">       // non-static nested class</div><div class="line">       OuterClass outer =<span class="built_in"> new </span>OuterClass();        </div><div class="line">       OuterClass.InnerClass inner  = outer.new InnerClass();</div><div class="line">        </div><div class="line">       // calling non-static method of Inner class</div><div class="line">       inner.display();</div><div class="line">        </div><div class="line">       // we can also combine above steps in one step to create<span class="built_in"> instance </span>of </div><div class="line">       // Inner class</div><div class="line">       OuterClass.InnerClass innerObject =<span class="built_in"> new </span>OuterClass().new InnerClass();</div><div class="line">        </div><div class="line">       // similarly we can now call Inner class method</div><div class="line">       innerObject.display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><code>static method</code>: Static mehods and variables can be accessed using class name. In the static method, we can not use non-static variables.</p>
</li>
<li><p><code>static variable</code>: are known as Class Variables. Such variables get default values based on the data type. Memory allocation only happens once when the class is loaded in memory. Static variables are common for all instances.</p>
</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Example&#123;</div><div class="line">   static int Var1=<span class="number">77</span>; <span class="comment">//Static integer variable</span></div><div class="line">   <span class="keyword">String</span> Var2;<span class="comment">//non-static string variable</span></div><div class="line"></div><div class="line">   public static void main(<span class="keyword">String</span> args[])</div><div class="line">   &#123;</div><div class="line">      Example8 ob1 = <span class="keyword">new</span> Example8();</div><div class="line">      Example8 ob2 = <span class="keyword">new</span> Example8();</div><div class="line">      ob1.Var1=<span class="number">88</span>;</div><div class="line">      ob1.Var2=<span class="string">"I'm Object1"</span>;</div><div class="line">      ob2.Var2=<span class="string">"I'm Object2"</span>;</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob1 integer:"</span>+ob1.Var1);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob1 String:"</span>+ob1.Var2);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob2 integer:"</span>+ob2.Var1);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob2 STring:"</span>+ob2.Var2);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">Output</span>:</div><div class="line"></div><div class="line">ob1 integer:<span class="number">88</span></div><div class="line">ob1 <span class="keyword">String</span>:I'm Object1</div><div class="line">ob2 integer:<span class="number">88</span></div><div class="line">ob2 <span class="keyword">String</span>:I'm Object2</div></pre></td></tr></table></figure>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>The instance variable with final keyword can’t be changed.  When applied to either class(can not be used as base class to derive any class from it) or method(cann’t be overriden), turns off late binding, and thus prevents polymorphism.</p>
<h3 id="enum-and-Enumeration"><a href="#enum-and-Enumeration" class="headerlink" title="enum and Enumeration"></a>enum and Enumeration</h3><ol>
<li><code>enum</code> is a special data type that enables for a variable to be a set of predefined constants.  The variable must be equal to one of the values that have been predefined for it.</li>
<li><code>Enumeration</code> is an interface.  An object that implements the Enumeration interface generates a series of elements, one at a tiem. Successive calls to the ‘nextElement’ method return successive elements of the series.<br>For example, to print all elements of a Vector<e> v:</e></li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for (<span class="name">Enumeration&lt;E&gt;</span> e = v.elements()<span class="comment">; e.hasMoreElements();)</span></div><div class="line">       System.out.println(<span class="name">e</span>.nextElement())<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Java各种关键字的区别。&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆关键字特性&lt;/li&gt;
&lt;li&gt;总结关键字特性，并总结用法
    
    </summary>
    
      <category term="JAVA" scheme="http://xinli90.com/categories/JAVA/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Word Search</title>
    <link href="http://xinli90.com/2016/09/06/Word-Search/"/>
    <id>http://xinli90.com/2016/09/06/Word-Search/</id>
    <published>2016-09-06T14:48:57.000Z</published>
    <updated>2016-09-06T18:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/word-search/" target="_blank" rel="external">Leetcode-Word Search</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board and a word, find if the word exists in the grid.    </p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.      </p>
<p>For example, </p>
<p>Given board =    </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'B</span>',<span class="symbol">'C</span>',<span class="symbol">'E</span>'],</div><div class="line">  [<span class="symbol">'S</span>',<span class="symbol">'F</span>',<span class="symbol">'C</span>',<span class="symbol">'S</span>'],</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'D</span>',<span class="symbol">'E</span>',<span class="symbol">'E</span>']</div><div class="line">]</div></pre></td></tr></table></figure>
<p>word = “ABCCED”, -&gt; returns true,<br>word = “SEE”, -&gt; returns true,<br>word = “ABCB”, -&gt; returns false.        </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Recursion and Backtracking.</li>
<li>Check each element for the find() method.  </li>
<li>Make the current element “#” so that we cannot move back to traverse.  After traversal, recover its value to the original one.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> exist(<span class="keyword">char</span>[][] board, <span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">		<span class="keyword">char</span>[] arr = <span class="keyword">word</span>.toCharArray();</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++) &#123;</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++) &#123;				<span class="built_in">if</span>(<span class="built_in">find</span>(board,arr,<span class="number">0</span>,i,j)) <span class="built_in">return</span> true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> <span class="built_in">find</span>(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] <span class="keyword">word</span>,<span class="keyword">int</span> index,<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">		<span class="built_in">if</span>(index == <span class="keyword">word</span>.length) <span class="built_in">return</span> true;</div><div class="line">		<span class="built_in">if</span>(x&gt;<span class="number">0</span> || x&gt;board.length<span class="number">-1</span> || y&lt;<span class="number">0</span> || y&gt;board[<span class="number">0</span>].length<span class="number">-1</span>) <span class="built_in">return</span> false;</div><div class="line">		<span class="built_in">if</span>(board[x][y]!=<span class="keyword">word</span>[index]) <span class="built_in">return</span> false;</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="keyword">boolean</span> exist = <span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x+<span class="number">1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y<span class="number">-1</span>)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y+<span class="number">1</span>);</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="built_in">return</span> exist;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/word-search/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Word Search&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expression Matching(unsolved)</title>
    <link href="http://xinli90.com/2016/09/06/Regular-Expression-Matching/"/>
    <id>http://xinli90.com/2016/09/06/Regular-Expression-Matching/</id>
    <published>2016-09-06T12:53:15.000Z</published>
    <updated>2016-09-06T14:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="external">Leetcode-Regular Expression Matching</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span> Matches any single character.</div><div class="line"><span class="string">'*'</span> Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire <span class="selector-tag">input</span> string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>1.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Solution1:recursion</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">0</span>) <span class="keyword">return</span> s.length()==<span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">1</span>) <span class="keyword">return</span> (s.length()==<span class="number">1</span>)&amp;&amp;(p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>);</div><div class="line">       <span class="keyword">if</span>(p.charAt(<span class="number">1</span>)!=<span class="string">'*'</span>) &#123;</div><div class="line">           <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">return</span> (s.charAt(<span class="number">0</span>)==p.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)&amp;&amp;isMatch(s.substring(<span class="number">1</span>),p.substring(<span class="number">1</span>));</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span> &amp;&amp; (p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)) &#123;</div><div class="line">               <span class="keyword">if</span>(isMatch(s,p.substring(<span class="number">2</span>)))<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               s = s.substring(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> isMatch(s,p.substring(<span class="number">2</span>));</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2:DP</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span> || p==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</div><div class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(p.charAt(i)==<span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">1</span>]) &#123;</div><div class="line">				dp[<span class="number">0</span>][i+<span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;p.length(); j++) &#123;</div><div class="line">				<span class="keyword">if</span>(s.charAt(i) == p.charAt(j)||p.charAt(j)==<span class="string">'.'</span>) &#123;</div><div class="line">					dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j];</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(p.charAt(j)==<span class="string">'*'</span>) &#123;</div><div class="line">					<span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>)!= s.charAt(i) &amp;&amp; p.charAt(j-<span class="number">1</span>)!=<span class="string">'.'</span>) &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">					&#125;<span class="keyword">else</span> &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j]||dp[i+<span class="number">1</span>][j-<span class="number">1</span>]||dp[i][j+<span class="number">1</span>]);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dp[s.length()][p.length()];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-R
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day11 Multithreading</title>
    <link href="http://xinli90.com/2016/09/02/Day11-Multithreading/"/>
    <id>http://xinli90.com/2016/09/02/Day11-Multithreading/</id>
    <published>2016-09-03T03:34:01.000Z</published>
    <updated>2016-09-11T20:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇关于Multithreading多线程的原理与应用.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆多线程特性</li>
<li>实现多线程结构</li>
<li>实战训练使用该多线程</li>
<li>总结该多线程特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><h2 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h2><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>Solution1: Thread safe</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</div><div class="line">	<span class="comment">//privent others from instantiating this class</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">				<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">					instance = <span class="keyword">new</span> Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇关于Multithreading多线程的原理与应用.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆多线程特性&lt;/li&gt;
&lt;li&gt;实现多
    
    </summary>
    
      <category term="Multithreading" scheme="http://xinli90.com/categories/Multithreading/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Clone Graph</title>
    <link href="http://xinli90.com/2016/08/30/Clone-Graph/"/>
    <id>http://xinli90.com/2016/08/30/Clone-Graph/</id>
    <published>2016-08-30T17:50:49.000Z</published>
    <updated>2016-08-30T21:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/clone-graph/" target="_blank" rel="external">Leetcode-Clone Graph</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<p>OJ’s undirected graph serialization:     </p>
<p>Nodes are labeled uniquely.</p>
<p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.</p>
<p>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p>
<p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.   </p>
<ol>
<li>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.</li>
<li>Second node is labeled as 1. Connect node 1 to node 2.</li>
<li>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.    </li>
</ol>
<p>Visually, the graph looks like the following:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="number">1</span></div><div class="line">  / <span class="string">\</span></div><div class="line"> /   <span class="string">\</span></div><div class="line"><span class="number">0</span> --- <span class="number">2</span></div><div class="line">     / <span class="string">\</span></div><div class="line">     <span class="string">\_/</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use BFS</li>
<li>Queue + HashMap</li>
<li>In HashMap, key is label, value is new Object.  So each time we clone each node through HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use DFS + Recursive Solution</li>
<li>If node is empty, return null.</li>
<li>If there is already the node in HashMap, return it.</li>
<li>Else traverse neighbor nodes, clone it and store it into HashMap and recursively add new node into its neighbors.</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for undirected graph.</div><div class="line"> * class UndirectedGraphNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     List&lt;UndirectedGraphNode&gt; neighbors;</div><div class="line"> *     UndirectedGraphNode(int x) &#123; label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">public class Solution1 &#123;</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        <span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;    </div><div class="line">    	Queue&lt;UndirectedGraphNode&gt; queue = <span class="built_in">new</span> ArrayDeque&lt;&gt;();</div><div class="line">    	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    	queue.offer(node);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	</div><div class="line">    	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">    		UndirectedGraphNode input = queue.poll();</div><div class="line">    		List&lt;UndirectedGraphNode&gt; neighbor = input.<span class="built_in">neighbors</span>;</div><div class="line">    		<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    			int <span class="built_in">label</span> = neighbor.<span class="built_in">get</span>(i).<span class="built_in">label</span>;</div><div class="line">    			<span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(<span class="built_in">label</span>)) &#123;</div><div class="line">    				<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="built_in">label</span>,<span class="built_in">new</span> UndirectedGraphNode(<span class="built_in">label</span>));</div><div class="line">    				queue.offer(neighbor.<span class="built_in">get</span>(i));</div><div class="line">    			&#125;</div><div class="line">    			<span class="built_in">map</span>.<span class="built_in">get</span>(input.<span class="built_in">label</span>).<span class="built_in">neighbors</span>.add(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">label</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">    	<span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;</div><div class="line">    	<span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(node.<span class="built_in">label</span>)) <span class="built_in">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(node.<span class="built_in">label</span>);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	List&lt;UndirectedGraphNode&gt; neighbor = node.<span class="built_in">neighbors</span>;</div><div class="line">    	<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    		newNode.<span class="built_in">neighbors</span>.add(cloneGraph(neighbor.<span class="built_in">get</span>(i)));</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/clone-graph/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Clone Graph&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Insert Delete GetRandom O(1)</title>
    <link href="http://xinli90.com/2016/08/30/Insert-Delete-GetRandom-O-1/"/>
    <id>http://xinli90.com/2016/08/30/Insert-Delete-GetRandom-O-1/</id>
    <published>2016-08-30T16:00:55.000Z</published>
    <updated>2016-08-30T22:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/insert-delete-getrandom-o1/" target="_blank" rel="external">Leetcode-Insert Delete GetRandom O(1)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports all following operations in average O(1) time.</p>
<ol>
<li>insert(val): Inserts an item val to the set if not already present.</li>
<li>remove(val): Removes an item val from the set if present.</li>
<li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li>
</ol>
<p>Example:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init an empty set.</span></div><div class="line"><span class="type">RandomizedSet</span> randomSet = <span class="function"><span class="keyword">new</span> <span class="title">RandomizedSet</span>();</span></div><div class="line"></div><div class="line"><span class="comment">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Returns false as 2 does not exist in the set.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Inserts 2 to the set, returns true. Set now contains [1,2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// getRandom should return either 1 or 2 randomly.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div><div class="line"></div><div class="line"><span class="comment">// Removes 1 from the set, returns true. Set now contains [2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 2 was already in the set, so return false.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Since 1 is the only number in the set, getRandom always return 1.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use HashMap and ArrayList</li>
<li>Dlete operation: 1. Swap the target to the last of list and remove the last element. This takes O(1) time. 2. Should update the value of the last element in HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Keep two HashMap</li>
<li>One hashmap stores <value, location="">, another hashmap stores<location, value="">.</location,></value,></li>
<li>Dlete operation: Inorder to maintain the correct location, when delete one element from output HashMap, we need update the pair with the size of input as the key.  Then we need correspondingly update the value of this specific pair in input HashMap.</li>
<li>Random to get element from the second hashmap</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span>;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</div><div class="line">    </div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">map</span>.put(val,list.<span class="built_in">size</span>());</div><div class="line">            list.<span class="built_in">add</span>(val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">int</span> index = <span class="built_in">map</span>.<span class="built_in">get</span>(val);</div><div class="line">          </div><div class="line">            <span class="built_in">int</span> temp = list.<span class="built_in">get</span>(list.<span class="built_in">size</span>()<span class="number">-1</span>);                        </div><div class="line">            list.<span class="built_in">set</span>(index,temp);</div><div class="line">            <span class="built_in">map</span>.put(temp,index);</div><div class="line">            </div><div class="line">            <span class="built_in">map</span>.remove(val);</div><div class="line">            list.remove(list.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random rand = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = rand.nextInt(list.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> list.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;		</div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; input;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; output;</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        input = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        output = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">size</span>();</div><div class="line">        input.put(val,location);</div><div class="line">        output.put(location,val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">get</span>(val);</div><div class="line">        <span class="built_in">int</span> insteadValue = output.<span class="built_in">get</span>(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//update the pair which the key is the last location</span></div><div class="line">        output.put(location,insteadValue);</div><div class="line">        input.put(insteadValue,location);</div><div class="line">        </div><div class="line">        <span class="comment">//remove the key with the last location</span></div><div class="line">        output.remove(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        input.remove(val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = <span class="built_in">random</span>.nextInt(input.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> output.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/insert-delete-getrandom-o1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-In
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Alien Dictionary(UnSolved)</title>
    <link href="http://xinli90.com/2016/08/30/Alien-Dictionary/"/>
    <id>http://xinli90.com/2016/08/30/Alien-Dictionary/</id>
    <published>2016-08-30T14:04:07.000Z</published>
    <updated>2016-09-06T14:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/alien-dictionary/" target="_blank" rel="external">Leetcode-Alien Dictionary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.</p>
<p>For example,<br>Given the following words in dictionary,</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  <span class="string">"wrt"</span>,</div><div class="line">  <span class="string">"wrf"</span>,</div><div class="line">  <span class="string">"er"</span>,</div><div class="line">  <span class="string">"ett"</span>,</div><div class="line">  <span class="string">"rftt"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>The correct order is: “wertf”.</p>
<p>Note:</p>
<ol>
<li>You may assume all letters are in lowercase.</li>
<li>If the order is invalid, return an empty string.</li>
<li>There may be multiple valid order of letters, return any one of them is fine.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>BFS</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>DFS</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/alien-dictionary/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Alien Dictio
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sort Colors</title>
    <link href="http://xinli90.com/2016/08/30/Sort-Colors/"/>
    <id>http://xinli90.com/2016/08/30/Sort-Colors/</id>
    <published>2016-08-30T13:20:41.000Z</published>
    <updated>2016-09-13T18:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="external">Leetcode-Sort Colors</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p>Note:<br>You are not suppose to use the library’s sort function for this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n), space complexity is O(3)</li>
<li>Loop this array and count the frequency of each number.</li>
<li>Assign to original array one by one </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Follow the first step of solution1, loop the count array instead of loop the nums array.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Solution1 and solution2 are two-pass algorithm</li>
<li>We can track low and high pointer and use i to iterate this array to make 0 left and 2 right. </li>
<li>That would be one pass and constant space.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[<span class="keyword">index</span>]&lt;=<span class="number">0</span> &amp;&amp; <span class="keyword">index</span>&lt;<span class="number">3</span>)&#123;</div><div class="line">				<span class="keyword">index</span>++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">index</span>==<span class="number">3</span>) <span class="keyword">return</span>;</div><div class="line">			nums[i] = <span class="keyword">index</span>;</div><div class="line">			<span class="keyword">count</span>[<span class="keyword">index</span>]--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">				nums[<span class="keyword">index</span>++] = i;</div><div class="line">				<span class="keyword">count</span>[i]--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> high = nums.length<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=low; i&lt;=high;) &#123;</div><div class="line">			<span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</div><div class="line">				swap(nums,i,low);</div><div class="line">				<span class="comment">//in order to maintain low point to 1,and we don't handle 1,so to do the next round.</span></div><div class="line">				low++;</div><div class="line">				i++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==<span class="number">2</span>) &#123;</div><div class="line">				swap(nums,i,high);</div><div class="line">				high--;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> swap(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">int</span> temp = nums[i];</div><div class="line">		nums[i] = nums[j];</div><div class="line">		nums[j] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Sort Colors&lt;/a&gt;.&lt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Lowest Common Ancestor of a Binary Tree</title>
    <link href="http://xinli90.com/2016/08/25/Lowest-Common-Ancestor-of-a-Binary-Tree/"/>
    <id>http://xinli90.com/2016/08/25/Lowest-Common-Ancestor-of-a-Binary-Tree/</id>
    <published>2016-08-25T21:44:20.000Z</published>
    <updated>2016-08-28T20:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="external">Leetcode-Lowest Common Ancestor of a Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="external">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">     _______3______</div><div class="line">    /              \</div><div class="line"> ___5__          ___1__</div><div class="line">/      \        /      \</div><div class="line"><span class="number">6</span>      _2       <span class="number">0</span>       <span class="number">8</span></div><div class="line">      /  \</div><div class="line">      <span class="number">7</span>   <span class="number">4</span></div></pre></td></tr></table></figure>
<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>If search from root and find two target nodes in different sides. Then the LCA is root.</li>
<li>If find two nodes in left subtree, then recursively search from the left of root.</li>
<li>If find two nodes in right subtree, then recursively search from the right of root.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><ol>
<li>If root is null, return null</li>
<li>If root is one of two nodes, return root.</li>
<li>Recurseively traverse left subtree and right subtree.</li>
<li>If both left subtree and right subtree get the specific node, then return root.</li>
<li>If one of subtree is null, return another subtree.</li>
</ol>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Use List to record the path which find from root to the specific nodes.</li>
<li>Compare elements from two lists and get the last common elements.</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(findNode(root.left,p)) &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.left,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.left,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.right,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.right,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean findNode(TreeNode root, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(root==node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		</div><div class="line">		boolean found = findNode(root.left,node);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findNode(root.right,node);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</div><div class="line">		TreeNode commonLeft = getLastCommonParentRec(root.left,p,q);</div><div class="line">		TreeNode commonRight = getLastCommonParentRec(root.right,p,q);</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span> &amp;&amp; commonRight!=<span class="literal">null</span>) <span class="keyword">return</span> root;</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span>) <span class="keyword">return</span> commonLeft;</div><div class="line">		<span class="keyword">return</span> commonRight;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; list1 = new ArrayList&lt;&gt;();</div><div class="line">		ArrayList&lt;TreeNode&gt; list2 = new ArrayList&lt;&gt;();</div><div class="line">		boolean found1 = findPath(root,p,list1);</div><div class="line">		boolean found2 = findPath(root,q,list2);</div><div class="line">		<span class="keyword">if</span>(!found1 || !found2) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">	</div><div class="line">		TreeNode result = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;Math.min(list1.size(),list2.size());i++) &#123;</div><div class="line">			<span class="keyword">if</span>(list1.<span class="keyword">get</span>(i)==list2.<span class="keyword">get</span>(i))&#123;</div><div class="line">				result = list1.<span class="keyword">get</span>(i);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	boolean findPath(TreeNode root, TreeNode node, ArrayList&lt;TreeNode&gt; list) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		list.add(root);</div><div class="line">		<span class="keyword">if</span>(root == node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		boolean found = findPath(root.left,node,list);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findPath(root.right,node,list);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!found) list.remove(root);</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://xinli90.com/2016/08/25/Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/"/>
    <id>http://xinli90.com/2016/08/25/Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</id>
    <published>2016-08-25T21:43:58.000Z</published>
    <updated>2016-08-28T19:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="external">Leetcode-Construct Binary Tree from Preorder and Inorder Traversal </a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p>Note:<br>You may assume that duplicates do not exist in the tree.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-Iterative-solution"><a href="#Solution-Iterative-solution" class="headerlink" title="Solution: Iterative solution."></a>Solution: Iterative solution.</h4><ol>
<li>PreOrder: root is the first element in the array and use this element to divide inorder array. </li>
<li>InOrder: the left array of the root is left subtree and the right array of the root is right subtree.We can get the size of left subtree and right subtree and use for the preorder array. Use this size to divide preorder array and build tree.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> buildTree(preorder,<span class="number">0</span>,preorder.length<span class="number">-1</span>,inorder,<span class="number">0</span>,inorder.length<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="function">TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[]preorder,<span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[]inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">int</span> rootVal = preorder[preStart];</div><div class="line">		<span class="keyword">int</span> inRoot=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=inStart,j=inEnd; i&lt;=j; i++,j--) &#123;</div><div class="line">			<span class="keyword">if</span>(inorder[i] == rootVal) &#123;</div><div class="line">				inRoot = i;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">inorder[j] == rootVal</span>)</span>&#123;</div><div class="line">				inRoot = j;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; </div><div class="line">		TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</div><div class="line">		root.left = buildTree(preorder,preStart+<span class="number">1</span>,preStart+(inRoot-inStart), inorder,inStart,inRoot<span class="number">-1</span>);</div><div class="line">		root.right = buildTree(preorder,preEnd-(inEnd-inRoot)+<span class="number">1</span>,preEnd,inorder,inRoot+<span class="number">1</span>,inEnd);</div><div class="line">		<span class="keyword">return</span> root;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot; target=&quot;_bl
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
</feed>
