<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-10-11T14:20:38.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day19 DataBase</title>
    <link href="http://xinli90.com/2016/10/11/Day19-DataBase/"/>
    <id>http://xinli90.com/2016/10/11/Day19-DataBase/</id>
    <published>2016-10-11T12:08:06.000Z</published>
    <updated>2016-10-11T14:20:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Database的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种SQL特性</li>
<li>总结用法和分析优化思路</li>
</ul>
<h2 id="Relational-DB-and-NoSql"><a href="#Relational-DB-and-NoSql" class="headerlink" title="Relational DB and NoSql"></a>Relational DB and NoSql</h2><ul>
<li><p>NoSQL与Relational DB区别：SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today’s real-world highly growing applications. NoSql in contrast uses a flexible structure which can be easily modified and extended.</p>
</li>
<li><p>NoSql: A NoSql database provides a mechanism for storage and retrieval of data that is modeled. The types : Document Oriented, Key Value, Graph, Column Oriented.</p>
</li>
<li><p>MongoDB: It is a document oriented database. It stores data in the form of BSON structure based documents. These documents are stored in a collection. Advantage: Flexible data model in form of documents, Agile and highly scalable database, Faster than traditional databases, Expressive query language.</p>
</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="UNION-and-UNION-ALL"><a href="#UNION-and-UNION-ALL" class="headerlink" title="UNION and UNION ALL"></a>UNION and UNION ALL</h3><ul>
<li><p>UNION:Merge two structurally-compatible tables into a single table and omit the duplicate records.</p>
</li>
<li><p>UNION ALL: Merge contents of two tables into one table but include duplicate records. It is more efficient than UNION, because it doesn’t need omit duplicate records.</p>
</li>
</ul>
<h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><ul>
<li><p>INNER JOIN: The simple and default join.</p>
</li>
<li><p>LEFT JOIN: Returns all rows from the left table, and the matched rows from the right table. This means that if the ON clause doesn’t match any records in the right table, the JOIN will still return a row in the result for that record in the left table, but with NULL in each column from the right table.</p>
</li>
<li><p>RIGHT JOIN: Returns all rows from the right table, and the matched rows from the left table. </p>
</li>
<li><p>FULL JOIN: Combine LEFT JOIN and RIGHT JOIN, return all rows for which there is a match in either of the tables. Its result is similar with UNION. (with NULL for some columns)</p>
</li>
<li><p>CROSS JOIN: Returns all records where each row from the first table is combined with each row from the second table.</p>
</li>
</ul>
<h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>customer id 不为123 的客户的数量：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">AS</span> cust_not_total </div><div class="line"><span class="keyword">from</span> orders</div><div class="line"><span class="keyword">where</span> customer_id &lt;&gt; <span class="string">'123'</span></div></pre></td></tr></table></figure>
<p>注意： Any records with a customer_id of NULL will not be included in either count.</p>
<h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><p>Use <code>is</code> instead of <code>=</code>, when we want to compare a value to null.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//expected result is YUP</div><div class="line"><span class="keyword">select</span> <span class="keyword">case</span></div><div class="line"><span class="keyword">when</span> <span class="literal">null</span> <span class="keyword">is</span> <span class="literal">null</span></div><div class="line"><span class="keyword">then</span> <span class="string">'YUP'</span> <span class="keyword">else</span> <span class="string">'Nope'</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">as</span> <span class="keyword">Result</span></div></pre></td></tr></table></figure>
<p>Anything compared to <code>NULL</code> evaluates to <code>UNKNOWN</code>, it includes NULL itself.</p>
<p>So below sql cannot get the result which ReferreddBy == NULL.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<p>We should use:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h3><p>If the set being evaluated by the <code>NOT IN</code> contains any null values, the result will return an empty set.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> *</div><div class="line"><span class="keyword">from</span> runners</div><div class="line"><span class="keyword">where</span> runners.id <span class="keyword">NOT</span> <span class="keyword">IN</span></div><div class="line">(<span class="keyword">select</span> winner_id <span class="keyword">from</span> races <span class="keyword">where</span> winner_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">null</span>)</div></pre></td></tr></table></figure>
<p>For MySql:</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">not</span> <span class="keyword">in</span> </div><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Sql Sergver, SQLite,PostgreSQL, we can also use:</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">except</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Oracle, we can use <code>minus</code>.</p>
<h3 id="Execution-order"><a href="#Execution-order" class="headerlink" title="Execution order"></a>Execution order</h3><p>The sql statement is not processed generally top-to-bottom or left-to-right. It’s in differenct order.<br>So this is wrong:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> BillingYear &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<p>It should be:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(BillingDate) &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<h3 id="WHERE-and-HAVING"><a href="#WHERE-and-HAVING" class="headerlink" title="WHERE and HAVING"></a>WHERE and HAVING</h3><p>When <code>GROUP BY</code> is not used, the <code>WHERE</code> and <code>HAVING</code> clauses are essentially equivalent.</p>
<p>However, when <code>GROUP BY</code> is used:</p>
<ul>
<li>The <code>WHERE</code> clause is used to filter records from a result. The filtering occurs before any grouping are made.</li>
<li>The <code>HAVING</code> clause is used to filter values from a group(to check conditions after aggregation into groups has been performed).</li>
</ul>
<h2 id="常见考题"><a href="#常见考题" class="headerlink" title="常见考题"></a>常见考题</h2><ol>
<li>Write a SQL query to find the 10th highest employee salary from an Employee table. Explain your answer.</li>
</ol>
<p>For MySQL and PostreSQL, we can use <code>LIMIT</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Salary <span class="keyword">from</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">LIMIT</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>For other database, we can use <code>TOP</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> TOP(<span class="number">1</span>) Salary <span class="keyword">From</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> TOP(<span class="number">10</span>) Salary</div><div class="line">	<span class="keyword">From</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">Order</span> <span class="keyword">by</span> Salary;</div></pre></td></tr></table></figure>
<h3 id="参考-Reference-："><a href="#参考-Reference-：" class="headerlink" title="参考(Reference)："></a>参考(Reference)：</h3><p><a href="">https://www.toptal.com/sql/interview-questions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Database的介绍和用途.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结归纳各种SQL特性&lt;/li&gt;
&lt;li&gt;总结用法和分析
    
    </summary>
    
      <category term="Database" scheme="http://xinli90.com/categories/Database/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Day18 Design Pattern</title>
    <link href="http://xinli90.com/2016/10/09/Day18-Design-Pattern/"/>
    <id>http://xinli90.com/2016/10/09/Day18-Design-Pattern/</id>
    <published>2016-10-10T02:08:50.000Z</published>
    <updated>2016-10-10T19:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Design Pattern的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种Design Pattern特性</li>
<li>总结Design Pattern用法和常见情景</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h3><p>一般在全局只有一个资源且需要保证只有一个时调用,我们在observer和Hibernate的sessionFactory中使用。</p>
<p>What’s the Singleton: Create the object while making sure only one instanec of object gets created. Provide one global point to access it.      </p>
<p>When to use: if we only have one resource, such as thread pool,in-memory cache, hardware resources(printer), many instances of one object will make the multiple result. </p>
<p>饿汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懒汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>= null;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">		<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程安全模式的三种方法：</p>
<ol>
<li>对getInstance()方法直接加synchronized，对整个方法加锁，比较耗资源</li>
<li>使用饿汉方法 </li>
<li>双重检查加锁法（推荐）</li>
</ol>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> volatile Singleton instance;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">			synchronized(Singleton.class) &#123;</div><div class="line">				if(instance == null) &#123;</div><div class="line">				<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h3><p>用clone的方式来创建<code>重复</code>对象，避免一直创建对象所带来的资源耗损。并且能够简化复杂对象的创建过程。<br>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>例如发送广告信息给500万用户，如果一条一条发的话可能需要好几天时间，相当于获取一个个创建的model object中信息并输出。如果创建多线程同时发送，并且避免创建500W个object带来的资源耗损，可以使用一个通用的object，然后每次copy得到新的实例而不是使用构造函数得到新实例，再修改里面一部分variable并且不会影响原Object来实现。</p>
<p>这就要求： 首先Object class 继承 Cloneable接口.     </p>
<p>注意： 这里的clone只能是shallow copy, 所以只能拷贝primitive type的值和对象、数组的reference，我们需要对 对象、数组进行deep copy.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; ars; </div><div class="line">	<span class="keyword">public</span> Message()&#123;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> Message <span class="keyword">clone</span>() &#123;	</div><div class="line">		Message message = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			message = (Message)super.<span class="keyword">clone</span>();</div><div class="line">			message.ars = (ArrayList&lt;String&gt;) this.ars.<span class="keyword">clone</span>();</div><div class="line">		&#125; <span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候则可以只创建一个新的object，之后不断clone来创建新的object.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Message</span> <span class="keyword">message</span> = new <span class="keyword">Message</span>();</div><div class="line">int i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</div><div class="line">	<span class="keyword">Message</span> cloneMes = <span class="keyword">message</span>.clone();</div><div class="line">	....</div><div class="line">	sendMessage(cloneMes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>在实现clone时可能需要实现复杂的代码，多重嵌套引用的deep copy很麻烦；     </li>
<li>每一个类都需要配置clone方法，当对已有类进行改造是，需要修改源代码，违背“开闭原则”.      </li>
</ol>
<h3 id="Memento-Patthern"><a href="#Memento-Patthern" class="headerlink" title="Memento Patthern"></a>Memento Patthern</h3><p>备忘录模式：在不破坏封装的前提下，存储关键对象的重要状态，从而可以在将来把对象还原到存储的那个状态.<br>场景应用：比如保存游戏进度，当前很多软件的撤销(Undo)操作。       </p>
<p>优点:</p>
<ol>
<li>状态存储在外面，不和关键对象混在一起，可以帮助维护内聚.</li>
<li>提供了容易实现的恢复能力</li>
<li>保持了关键对象的数据封装</li>
</ol>
<p>核心模块：</p>
<ul>
<li>Memento(备忘录): 是一个model object，用来保存数据.     </li>
<li>Originator(原发器): 用来操作Memento，拥有save()和restore()方法用来存储当前状态和恢复之前状态.     </li>
<li>CareTaker(负责人): 用它来负责保存所有Memento，但是不能对Memento进行操作.</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Class Memento &#123;</div><div class="line">	<span class="comment">//一个正常的model object</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Memento(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getStatus() &#123;</div><div class="line">		<span class="keyword">return</span> status;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Originator &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Originator(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setStatus(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Memento <span class="built_in">save</span>() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memento(status);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> restore(Memento me) &#123;</div><div class="line">		<span class="keyword">this</span>.status = me.getStatus();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class CareTaker &#123;</div><div class="line">	<span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">public</span> Memento getMemento(<span class="built_in">int</span> step) &#123;</div><div class="line">		<span class="keyword">return</span> mementoList.<span class="built_in">get</span>(step);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setMemento(Memento memento) &#123;</div><div class="line">		<span class="keyword">this</span>.mementoList.<span class="built_in">add</span>(memento);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Main &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		CareTaker careTaker = <span class="keyword">new</span> CareTaker();</div><div class="line">		Originator originator = <span class="keyword">new</span> Originator(<span class="string">"initialize"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"media"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"hard"</span>);</div><div class="line">		<span class="comment">//back to step 1</span></div><div class="line">		originator.restore(careTaker.getMemento(<span class="number">0</span>));</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Design Pattern的介绍和用途.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结归纳各种Design Pattern特性
    
    </summary>
    
      <category term="Design Pattern" scheme="http://xinli90.com/categories/Design-Pattern/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Day17 JavaScript Introduction</title>
    <link href="http://xinli90.com/2016/10/05/Day17-JavaScript-Introduction/"/>
    <id>http://xinli90.com/2016/10/05/Day17-JavaScript-Introduction/</id>
    <published>2016-10-05T16:54:03.000Z</published>
    <updated>2016-10-05T16:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于JavaScript高级特性和应用</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆JavaScript特性</li>
<li>总结JavaScript特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>prototype</li>
<li>闭包</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于JavaScript高级特性和应用&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆JavaScript特性&lt;/li&gt;
&lt;li&gt;总结
    
    </summary>
    
      <category term="HTTP" scheme="http://xinli90.com/categories/HTTP/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Max Points on a Line</title>
    <link href="http://xinli90.com/2016/10/05/Max-Points-on-a-Line/"/>
    <id>http://xinli90.com/2016/10/05/Max-Points-on-a-Line/</id>
    <published>2016-10-05T16:07:19.000Z</published>
    <updated>2016-10-05T16:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="external">Leetcode-Max Points on a Line</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>A line is determined by two factors, y = ax +b.<br>If two points (x1,y1) and (x2,y2) are in the same line.<br>Then a = y1-y2/x1-x2. We can count each point for all other points and get the maximum.<br>If there are some overlap points, just count it and add at last.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * class Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() &#123; x = 0; y = 0; &#125;</div><div class="line"> *     Point(int a, int b) &#123; x = a; y = b; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxPoints(Point[] points) &#123;</div><div class="line">        <span class="keyword">if</span>(points==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(points.length&lt;=<span class="number">2</span>) <span class="keyword">return</span> points.length;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,<span class="keyword">HashMap</span>&lt;Integer,Integer&gt;&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="built_in">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;points.length<span class="number">-1</span>; i++) &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> overlap = <span class="number">0</span>;</div><div class="line">            <span class="built_in">map</span>.<span class="built_in">clear</span>();</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j=i+<span class="number">1</span>; j&lt;points.length; j++) &#123;</div><div class="line">                <span class="built_in">int</span> x = points[j].x - points[i].x;</div><div class="line">                <span class="built_in">int</span> y = points[j].y - points[i].y;</div><div class="line">                <span class="keyword">if</span>(x==<span class="number">0</span> &amp;&amp; y==<span class="number">0</span>)&#123;</div><div class="line">                    overlap++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//in order to get y/x, we need simplify the integrals</span></div><div class="line">                <span class="built_in">int</span> gcd = generateGCD(x,y);</div><div class="line">                <span class="keyword">if</span>(gcd!=<span class="number">0</span>) &#123;</div><div class="line">                    x /= gcd;</div><div class="line">                    y /= gcd;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(x))&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(x).containsKey(y)) &#123;</div><div class="line">                        <span class="built_in">map</span>.<span class="built_in">get</span>(x).put(y,<span class="built_in">map</span>.<span class="built_in">get</span>(x).<span class="built_in">get</span>(y)+<span class="number">1</span>);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">map</span>.<span class="built_in">get</span>(x).put(y,<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; m = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">                    m.put(y,<span class="number">1</span>);</div><div class="line">                    <span class="built_in">map</span>.put(x,m);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,<span class="built_in">map</span>.<span class="built_in">get</span>(x).<span class="built_in">get</span>(y));</div><div class="line">            &#125;</div><div class="line">            result = Math.<span class="built_in">max</span>(result,<span class="built_in">max</span>+overlap+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span> generateGCD(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">return</span> x%y == <span class="number">0</span>? y : generateGCD(y,x%y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/max-points-on-a-line/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Max Poin
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day16 Linux common operation</title>
    <link href="http://xinli90.com/2016/10/04/Day16-Linux-common-operation/"/>
    <id>http://xinli90.com/2016/10/04/Day16-Linux-common-operation/</id>
    <published>2016-10-04T16:56:29.000Z</published>
    <updated>2016-10-05T01:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于Linux常用命令</p>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><ul>
<li>ls: 显示文件和目录列表<ul>
<li>ls -l : 列出所有文件的详细信息</li>
<li>ls -a : 列出当前目录的所有文件，包含隐藏文件</li>
</ul>
</li>
<li>mkdir ** : 创建文件夹 (mkdir job)<ul>
<li>mkdir -p <em>/*</em> :     创建多层文件夹</li>
</ul>
</li>
<li>cd ** : 进入目录<ul>
<li>cd - : 进入这个目录之前的那个目录 </li>
</ul>
</li>
<li>touch **文件名 : 生成一个空文件 (touch s.text)</li>
<li>echo ‘<em>内容’&gt; </em>文件名(带类型) : 生成一个带内容的文件 (echo ‘I love you’&gt;s.text)</li>
<li>cat/tac **文件名 : 显示文本文件内容 (cat s.text)</li>
<li>cp <em>文件名1(source file) </em>文件名2(target file): 复制文件或者目录，从一个文件到另一个文件(cp s.text d.text)<ul>
<li>cp -r <strong>文件夹1 </strong>文件夹2 : 把一个文件夹及其里面所有文件复制到另一个文件夹，-r表示recursive (cp -r ss sa/)</li>
</ul>
</li>
<li><p>rm **文件名 : 删除文件(rm s.text)</p>
<ul>
<li>rm -r **文件名 : 同时删除该目录下的所有文件</li>
<li>rm -f **文件名 : 强制删除文件或目录 (rm -fr job)</li>
</ul>
</li>
<li><p>mv 文件或文件夹1 文件夹2 : (mv aa bb)如果bb存在则把文件夹aa移动到bb文件夹下，如果bb不存在则把文件夹aa改名为bb</p>
</li>
<li>find 查找指定文件<ul>
<li>find -name 文件名: 查找指定文件名的文件</li>
<li>find -iname 文件名: 忽略大小写查找文件</li>
</ul>
</li>
<li>wc 文件 : 统计文本文档的行数、字数、字符数（wc t.text）</li>
<li>grep : 查找指定的文本文件中指定的字符串<ul>
<li>grep -rsi 关键字 目录: (grep -rsni lvoe .)在当前目录下寻找关键字为lvoe的文件，显示行数，忽略大小写、错误拼写 </li>
</ul>
</li>
<li>rmdir: 删除空目录 </li>
<li>pwd: 显示当前工作目录</li>
<li>more/less : 分页显示文本文件内容</li>
<li>ln : 建立链接文件<ul>
<li>ln -s 路径 代号: (ln -s cc/bb/aa/ ee) 保存cc/bb/aa/ 这个路径为ee，之后可以直接cd ee/进入</li>
</ul>
</li>
</ul>
<h3 id="信息显示命令"><a href="#信息显示命令" class="headerlink" title="信息显示命令"></a>信息显示命令</h3><ul>
<li>stat 文件名 : 显示文件或者文件夹更详细的信息</li>
<li>who : 显示在线登录用户</li>
<li>whoami : 显示用户自己的身份</li>
<li>hostname : 显示主机名称</li>
<li>uname : 显示系统信息</li>
<li>dmesg : 显示系统启动信息，通常权限不够需要使用sudo dmesg</li>
<li>top : 显示当前系统中耗费资源最多的进程</li>
<li>ps :  显示瞬间的进程状态</li>
<li>du : 显示指定文件或目录已使用的磁盘空间总量<ul>
<li>du -h : 显示具体占用多少MB</li>
</ul>
</li>
<li>df : 显示文件系统磁盘空间的使用情况 </li>
<li>ifconfig : 显示网络接口信息</li>
<li>ping : 测试网络的连通性</li>
<li>netstat : 显示网络状态信息</li>
<li>man : 命令帮助信息查询</li>
<li>clear : 清屏</li>
</ul>
<h3 id="文件压缩tar命令"><a href="#文件压缩tar命令" class="headerlink" title="文件压缩tar命令"></a>文件压缩tar命令</h3><p>tar -cxzjvf:  </p>
<ol>
<li>-c : 压缩文件</li>
<li>-x : 解压文件</li>
<li>-z : 是否需要gzip压缩</li>
<li>-j : 是否需要bzip2压缩</li>
<li>-v : 压缩过程中显示文件</li>
<li>-f : 使用档名</li>
<li>-tf : 查看归档文件里面的文件</li>
</ol>
<p>tar -zxvf aaa.tar.gz : 解压文件aaa.tar.gz到当前文件夹.<br>tar -czvf aaa.tar.gz aaa/ : 压缩文件夹aaa为aaa.tar.gz    </p>
<h3 id="VIM-的简单使用"><a href="#VIM-的简单使用" class="headerlink" title="VIM 的简单使用"></a>VIM 的简单使用</h3><ul>
<li>vi : 进入VIM界面模式 (vi aa.text) 表明如果没有的话则新建aa.text，然后在vim中打开</li>
<li>i : 开始编写内容</li>
<li>Esc : 结束编写内容</li>
<li>q : 直接退出vi</li>
<li>wq : 保存后退出vi</li>
<li>q! : 强制退出</li>
<li>set number:在编辑文件中显示行号</li>
<li>set nonumber: 不显示行号</li>
</ul>
<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><p>R 读权限 read 4<br>W 写权限 write 2<br>X 执行权限 execute 1        </p>
<p>drwxr-xr-x : d表示是文件夹，rwx表示当前用户有读写执行的权限，r-x表示当前用户所在的组里的成员所具有读和执行的权限，r-x表示除此组之外其他人的权限<br>修改权限：chmod 777 file文件名 : 4+2+1所以把文件权限更改为rwxrwxrwx</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于Linux常用命令&lt;/p&gt;
&lt;h2 id=&quot;学习后总结&quot;&gt;&lt;a href=&quot;#学习后总结&quot; class=&quot;headerlink&quot; title=&quot;学习后总结&quot;&gt;&lt;/a&gt;学习后总结&lt;/h2&gt;&lt;h3 id=&quot;文件目录操作命令&quot;&gt;&lt;a href=&quot;#文件目录操作命令&quot; c
    
    </summary>
    
      <category term="Linux" scheme="http://xinli90.com/categories/Linux/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Day15 HTTP</title>
    <link href="http://xinli90.com/2016/10/02/Day15-HTTP/"/>
    <id>http://xinli90.com/2016/10/02/Day15-HTTP/</id>
    <published>2016-10-02T22:25:28.000Z</published>
    <updated>2016-10-05T02:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于HTTP协议原理和应用</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆HTTP特性</li>
<li>总结HTTP特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>在提交表单时有get和post方式，发出的http请求</li>
<li>HTTP的状态码</li>
<li>HTTP从发出请求到结束的全部过程</li>
<li>HTTP和TCP/IP的区别</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="一次完整的HTTP事务过程"><a href="#一次完整的HTTP事务过程" class="headerlink" title="一次完整的HTTP事务过程"></a>一次完整的HTTP事务过程</h3><p>Look at the steps below in a high level that occurs at the background when a user tried to access a website:<br>DNS Resulution -&gt; TCP HandShake -&gt; HTTP using the connection to exchange information between clint and server.</p>
<p>在浏览器输入一个网址，然后回车，之后发生了什么：    </p>
<ol>
<li>首先查看浏览器自身、整个系统的DNS Caching中有没有访问过该网址，如果有，且没有过期则直接返回</li>
<li>DNS域名解析（解析网址的IP地址）</li>
<li>浏览器以此IP地址向服务器发起TCP/IP的3次握手</li>
<li>建立TCP连接后发起HTTP请求<ul>
<li>这里HTTP请求可以使用GET(完整请求一个资源)，HEAD(仅请求响应首部),POST(提交表单),PUT(上传),DELETE(删除)</li>
<li>URL: Uniform Resource Locator统一资源定位符； URI: Uniform Resource Identifier统一资源标识符</li>
</ul>
</li>
<li>服务器响应HTTP请求，浏览器得到HTML代码<ul>
<li>1xx : 信息性状态码 <ul>
<li>100，101</li>
</ul>
</li>
<li>2xx : 成功状态码 <ul>
<li>200 : OK</li>
</ul>
</li>
<li>3xx : 重定向状态码<ul>
<li>301 : 永久重定向，location响应首部的值仍为当前URL</li>
<li>302 : 临时重定向， 显示重定向，location响应首部的值为新的URL</li>
<li>304 : Not Modified 未修改，缓存里有，直接使用本地资源即可</li>
</ul>
</li>
<li>4xx : 客户端错误状态码<ul>
<li>404 : Not Found 请求的URL资源不存在</li>
</ul>
</li>
<li>5xx : 服务器错误状态码<ul>
<li>500 : Internal Server Error 服务器内部错误</li>
<li>502 : Bad Gateway 前面代理服务器联系不到后端的服务器时出现</li>
<li>504 : Gateway Timeout 代理能联系到后端服务器，但后端服务器在规定时间内没有给代理服务器响应</li>
</ul>
</li>
</ul>
</li>
<li>浏览器解析HTML代码，并请求HTML代码的资源（如js,css,图片等),使用多线程向服务器端去请求下载，如果服务器返回304，则浏览器直接从本地读取该资源的缓存文件。 服务器端关闭连接。</li>
<li>浏览器对页面进行渲染呈现给用户</li>
</ol>
<h3 id="Socket-TCP-IP-and-HTTP"><a href="#Socket-TCP-IP-and-HTTP" class="headerlink" title="Socket,TCP/IP and HTTP"></a>Socket,TCP/IP and HTTP</h3><p>TCP/IP是传输层协议Transport layer protocol，主要解决数据如何在网络中传输。</p>
<p>Socket是对TCP/IP协议的封装，是长连接，一旦建立起来不会主动断掉，但也可能连接断开，比如 服务器或客户端主机down了，网络故障，两者之间长时间没有数据传输，防火墙断开该链接释放资源。</p>
<p>HTTP是应用层协议Application layer protocol，主要解决如何包装数据。HTTP连接是短连接，客户端发送一次请求后，服务器端响应后即会断掉。</p>
<p>Web 使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。Socket是对TCP/IP的封装，是一个API. HTTP works on top of TCP, TCP is in charge of setting up a reliable connection between two machines and HTTP uses this connection to transfer data between the server and client.  Without TCP, HTTP cannot function.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于HTTP协议原理和应用&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆HTTP特性&lt;/li&gt;
&lt;li&gt;总结HTTP特性，并总结用法
    
    </summary>
    
      <category term="HTTP" scheme="http://xinli90.com/categories/HTTP/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Recover Binary Search Tree</title>
    <link href="http://xinli90.com/2016/09/25/Recover-Binary-Search-Tree/"/>
    <id>http://xinli90.com/2016/09/25/Recover-Binary-Search-Tree/</id>
    <published>2016-09-26T00:59:40.000Z</published>
    <updated>2016-09-26T04:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/recover-binary-search-tree/" target="_blank" rel="external">Leetcode-Recover Binary Search Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Two elements of a binary search tree (BST) are swapped by mistake.</p>
<p>Recover the tree without changing its structure.   </p>
<p>Note:<br>A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><p>Inorder Traversal, if left child node is greater than root or rihgt child node is less than root. They would be the mistake elements.  </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	TreeNode firstNode = <span class="literal">null</span>;</div><div class="line">	TreeNode secondNode = <span class="literal">null</span>;</div><div class="line">	TreeNode preNode = new TreeNode(Integer.MIN_VALUE);</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> void recoverTree(TreeNode root) &#123;</div><div class="line">		traversal(root);</div><div class="line">		int temp = firstNode.<span class="keyword">val</span>;</div><div class="line">		firstNode.<span class="keyword">val</span> = secondNode.<span class="keyword">val</span>;</div><div class="line">		secondNode.<span class="keyword">val</span> = temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	purivate void traversal(TreeNode root)&#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">		traversal(root.left);</div><div class="line">		<span class="keyword">if</span>(firstNode==<span class="literal">null</span> &amp;&amp; preNode.<span class="keyword">val</span>&gt;=root.<span class="keyword">val</span>) &#123;</div><div class="line">			firstNode = preNode;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(firstNode!=<span class="literal">null</span> &amp;&amp; preNode.<span class="keyword">val</span>&gt;=root.<span class="keyword">val</span>) &#123;</div><div class="line">			secondNode = root;</div><div class="line">		&#125;</div><div class="line">		preNode = root;</div><div class="line">		traversal(root.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/recover-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Re
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day14 Introduction to AWS</title>
    <link href="http://xinli90.com/2016/09/25/Day14-Introduction-to-AWS/"/>
    <id>http://xinli90.com/2016/09/25/Day14-Introduction-to-AWS/</id>
    <published>2016-09-25T14:14:40.000Z</published>
    <updated>2016-09-25T16:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于各种语言特性的区别以及技术栈的选择</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆各服务特性</li>
<li>总结服务特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>EC2: Elastic Compute Cloud, 虚拟云服务器，为了程序运算。</li>
<li>S3: Simple Storage Service, 存放静态数据。</li>
<li>Elastic Beanstalk: 为了部署各种服务，提供监控。</li>
<li>AWS RDS: AWS Rational Database Service,AWS MySql数据库。</li>
<li>SQS: Simple Queue Service, 可以无限数量的接收和发送message。</li>
<li>SNS: Simple Notification Service, 可以实现通知功能。</li>
<li>ELB: Elastic Load Balancing,实现负载均衡。</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h3><ol>
<li><code>EC2</code>: Elastic Compute Cloud. It is a web service that provide resizable compute capacity in the cloud. It’s a vitual server in the AWS cloud.</li>
<li><code>EC2 Container Service</code>: 可以放置整个Docker集群，对其进行管理。</li>
<li><code>AWS Lambda</code>: 计算服务，采用事件响应机制,可以快速处理缩略图。As an event-driven compute service where AWS Lambda runs your code in response to events. We use for Real-time file processing, real-time stream processing</li>
<li><code>Elastic Beanstalk</code>: It’s for deploying and scaling web applications and service(Run and manage other AWS services). Simply upload the code and Elastic Beanstalk will set up an “environment” to contain number of EC2 instances,database and automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring.</li>
</ol>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><ol>
<li><code>S3</code>: Simple Storage Service, it provides secure, durable and highly-scalable cloud storage. It is easy to use object storage and can store very large objects. It’s typically used for storing images, videos, logs and other types of files. It’s a file system.</li>
</ol>
<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><ol>
<li><code>RDS</code>: Relational Database Service. It’s used for managing the rational database.</li>
<li><code>DynamoDB</code>: Manage the NoSQL Database.</li>
</ol>
<h3 id="Application-Service"><a href="#Application-Service" class="headerlink" title="Application Service"></a>Application Service</h3><ol>
<li><code>SQS</code>: Simple Queue Service. It’s a distributed queuing system. It was designed to enbale an unlimited number of messaging services to read and write an unlimited number of messages at any time. 你必须要先获取message到queue,才能写出和处理。</li>
</ol>
<h3 id="Mobile-Services"><a href="#Mobile-Services" class="headerlink" title="Mobile Services"></a>Mobile Services</h3><ol>
<li><code>SNS</code>:Simple Notification Service. It is a distributed publish-subscribe system. You can send individual messages or to bulk messages to large numbers of recipients. SNS supports several endpoints such as email, sms, http end point and SQS. 如果你不知道需要发给多少人信息，可以使用SNS.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于各种语言特性的区别以及技术栈的选择&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆各服务特性&lt;/li&gt;
&lt;li&gt;总结服务特性，并总
    
    </summary>
    
      <category term="AWS" scheme="http://xinli90.com/categories/AWS/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="http://xinli90.com/2016/09/22/Longest-Common-Prefix/"/>
    <id>http://xinli90.com/2016/09/22/Longest-Common-Prefix/</id>
    <published>2016-09-22T17:13:31.000Z</published>
    <updated>2016-09-22T17:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">Leetcode-Longest Common Prefix</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate array and compare each string with prefix, and update it.</li>
<li>Time complexity is O(n*m)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Sort the array first and directly compare the first string and the last one to get the prefix.</li>
<li>Time complexity is O(nlogn)</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public String longestCommonPrefix(String[] strs) &#123;</div><div class="line">        <span class="keyword">if</span>(strs==null || strs.<span class="built_in">length</span>==<span class="number">0</span>) <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</div><div class="line">        int i=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;strs.<span class="built_in">length</span> &amp;&amp; <span class="built_in">prefix</span>.<span class="built_in">length</span>()&gt;<span class="number">0</span>) &#123;</div><div class="line">            int j=<span class="number">0</span>;</div><div class="line">            String str = strs[i];</div><div class="line">            <span class="keyword">while</span>(j&lt;<span class="built_in">prefix</span>.<span class="built_in">length</span>() &amp;&amp; j&lt;str.<span class="built_in">length</span>()) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">prefix</span>.charAt(j)==str.charAt(j)) j++;</div><div class="line">                <span class="keyword">else</span> <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">prefix</span> = <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>,j);    </div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="built_in">prefix</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public String longestCommonPrefix(String[] strs) &#123;</div><div class="line">        <span class="keyword">if</span>(strs==null || strs.<span class="built_in">length</span>==<span class="number">0</span>) <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(strs.<span class="built_in">length</span>==<span class="number">1</span>) <span class="built_in">return</span> strs[<span class="number">0</span>];</div><div class="line">        Arrays.<span class="built_in">sort</span>(strs);</div><div class="line">        String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</div><div class="line">        String s = strs[strs.<span class="built_in">length</span>-<span class="number">1</span>];</div><div class="line">        int i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i&lt;<span class="built_in">prefix</span>.<span class="built_in">length</span>()&amp;&amp;i&lt;s.<span class="built_in">length</span>();i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(s.charAt(i)!=<span class="built_in">prefix</span>.charAt(i))&#123;</div><div class="line">        		<span class="built_in">break</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;    </div><div class="line">        <span class="built_in">return</span> <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>,i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Longest
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring</title>
    <link href="http://xinli90.com/2016/09/22/Longest-Palindromic-Substring/"/>
    <id>http://xinli90.com/2016/09/22/Longest-Palindromic-Substring/</id>
    <published>2016-09-22T14:46:59.000Z</published>
    <updated>2016-09-22T16:38:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="external">Leetcode-Longest Palindromic Substring</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><ul>
<li>State: f[i][j] represents if the substring from i to j is palindromic.</li>
<li>Function: f[i][j] = f[i+1][j-1] &amp;&amp; a[i]==a[j] (i&lt;j)</li>
<li>Initialize: f[i][i] = true, f[i][i+1] = a[i]==a[i+1]</li>
<li>Answer: f[i][j]==true &amp;&amp; MAX(j-i)</li>
</ul>
<p>自上而下，所以需要先初始化，然后根据小范围推倒大范围结果，层层推进：从1个字符是否对称..2..3..到n个字符是否对称推进。</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>如果采用自下而上，虽然也是小范围推倒大范围，但是不需要先初始化。（算法以后补）</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> longestPalindrome(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</div><div class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">        	isPalindrome[i][i] = true;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</div><div class="line">        	isPalindrome[i][i+<span class="number">1</span>] = arr[i]==arr[i+<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">3</span>; <span class="built_in">size</span>&lt;=length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>; start + <span class="built_in">size</span> &lt;=length; j++) &#123;</div><div class="line">        		isPalindrome[start][start+<span class="built_in">size</span><span class="number">-1</span>] = (arr[start]==arr[start+<span class="built_in">size</span><span class="number">-1</span>]) &amp;&amp; isPalindrome[start+<span class="number">1</span>][start+<span class="built_in">size</span><span class="number">-2</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> <span class="built_in">max</span> = Integer.MIN_VALUE;</div><div class="line">        <span class="keyword">String</span> result = <span class="string">""</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> j=i; j&lt;length;j++) &#123;</div><div class="line">        		<span class="built_in">if</span>(isPalindrome[i][j]) &#123;</div><div class="line">        			<span class="built_in">if</span>(<span class="built_in">max</span>&lt;j-i) &#123;</div><div class="line">        				<span class="built_in">max</span> = j-i;</div><div class="line">        				result = s.substring(i,j+<span class="number">1</span>);</div><div class="line">        			&#125;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day13 Tradeoff of Different Language</title>
    <link href="http://xinli90.com/2016/09/21/Day13-Tradeoff-of-Different-Language/"/>
    <id>http://xinli90.com/2016/09/21/Day13-Tradeoff-of-Different-Language/</id>
    <published>2016-09-22T01:37:49.000Z</published>
    <updated>2016-09-27T14:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于各种语言特性的区别以及技术栈的选择</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆各语言特性</li>
<li>总结语言特性，并总结用法</li>
<li>比较其优缺点</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>JAVA: Strongly-typed language, have the garbage collection mechanism.</li>
<li>C++: similar to JAVA, but no garbage collection mechanism.</li>
<li>PHP: similar syntax, dynamic script programming</li>
<li>Ruby on Rails: Ruby is a web framework. We write it using Rails language. It’s hard to learn.</li>
<li>Python: Very easy to learn. It’s very convenient to handle data and crawl web page.</li>
<li>JavaScript: We can use both frontend and backend, AngularJS for frontend and NodeJS for backend.</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="JAVA中的-“-”-用法"><a href="#JAVA中的-“-”-用法" class="headerlink" title="JAVA中的 “@” 用法"></a>JAVA中的 “@” 用法</h3><p>Annotations are a form of metadata added to a JAVA source file. It’s primarily used by code that is inpecting other code. They are often used for modifying existing classes at run-time to change their behavior. Frameworks such as JUnit and Hibernate use annotation to minimize the amount of code you need to write youself to use the frameworks.</p>
<p>参考：<a href="http://www.importnew.com/10294.html" target="_blank" rel="external">http://www.importnew.com/10294.html</a></p>
<h3 id="Strongly-vs-Weakly-and-Dynamicly-vs-Staticly-type-language"><a href="#Strongly-vs-Weakly-and-Dynamicly-vs-Staticly-type-language" class="headerlink" title="Strongly vs. Weakly and Dynamicly vs. Staticly type language"></a>Strongly vs. Weakly and Dynamicly vs. Staticly type language</h3><table>
<thead>
<tr>
<th>Type</th>
<th>Strongly</th>
<th>Weakly</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dynamically</td>
<td>Ruby, Python, Groovy</td>
<td>PHP, JavaScript, VBScript</td>
</tr>
<tr>
<td>Statically</td>
<td>JAVA, C#, Scala, Haskel</td>
<td>C, C++</td>
</tr>
</tbody>
</table>
<ol>
<li>Staticly typed: A language in which types are fixed at compile time. Most statically typed languages enforce this by requiring you to declare all variables with their datatypes before using them. 即编译的时候知道每个变量的类型，因为类型错误而不能做的事情是语法错误。</li>
<li>Dynamicly typed: A language in which types are discovered at execution time. 即编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。</li>
<li>Strongly typed: 一个变量不进行强制转换，它永远是这个数据类型，不允许隐式的类型转换。</li>
<li>Weekly typed:与强类型语言定义相反，允许编译器进行隐式的类型转换</li>
</ol>
<h3 id="J2EE-vs-PHP-Framework"><a href="#J2EE-vs-PHP-Framework" class="headerlink" title="J2EE vs. PHP Framework"></a>J2EE vs. PHP Framework</h3><ol>
<li>J2EE: is a bunch of standards that can be used for a lot of stuff. Java has more functionality and security than PHP. J2EE is going to expensive, complex to set-up and maintain, and difficult to code. J2EE handles Transaction very well, easy, and simple configuration;2.It can handle multi thread;Many Hardware appliance (for example Cisco) have build-in Java API, rather than PHP API.</li>
<li>PHP: is a scripting language. PHP is very easy to use with any framework like CodeIgniter or YII. If you need to quickly build website with more forms-validation-database interaction, PHP is the answer. </li>
</ol>
<h3 id="Python-vs-JAVA"><a href="#Python-vs-JAVA" class="headerlink" title="Python vs. JAVA"></a>Python vs. JAVA</h3><ol>
<li>Java creates applications that work across various platforms(complie once, run everywhere), while Python does not.</li>
<li>Java programs tend to run slower compared to Python pragrams.</li>
<li>Java uses traditional braces to start and end blocks, while Python uses indentation.</li>
<li>Java is statically typed and strongly typed language, while Python is dynamically and strongly typed language.</li>
<li>Python is simpler and more compact compared to JAVA.</li>
<li>Java runs faster than Python.</li>
</ol>
<h3 id="PHP-vs-Ruby-on-rails"><a href="#PHP-vs-Ruby-on-rails" class="headerlink" title="PHP vs. Ruby on rails"></a>PHP vs. Ruby on rails</h3><ol>
<li>PHP: PHP is simple and relatively shallow learning curve. PHP is really focused entirely for the web. It’s not a general purpose programming language like Ruby,Python,JAVA. Many hosting services just use a LAMP enviroment(Linux,Apache,MySql,PHP), so as long as your files are in place they just run and that’s it.</li>
<li>Ruby on Rails: Ruby on Rails is a web development framework based on the scripting language Ruby. It actually has a deep learning curve. It has Generators/Scaffolding features. The rails community provides a wealth of plygins as Ruby Gems that you simply add to the project Gemfile and install. THe active record ORM is simply the best. Rails has a testing framework that can be used. Unlike PHP, it really is Object Oriented from the ground up.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于各种语言特性的区别以及技术栈的选择&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;回忆各语言特性&lt;/li&gt;
&lt;li&gt;总结语言特性，并总
    
    </summary>
    
      <category term="JAVA" scheme="http://xinli90.com/categories/JAVA/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer (atoi)</title>
    <link href="http://xinli90.com/2016/09/21/String-to-Integer-atoi/"/>
    <id>http://xinli90.com/2016/09/21/String-to-Integer-atoi/</id>
    <published>2016-09-22T01:12:34.000Z</published>
    <updated>2016-09-22T01:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="external">Leetcode-String to Integer (atoi)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement atoi to convert a string to an integer. </p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.   </p>
<p>spoilers alert… click to show requirements for atoi.    </p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>首先要消除空格</li>
<li>可能会有正负号，所以要取出第一个符号，之后如果还有符号，则需要返回0</li>
<li>如果数字超出最大或者最小数，一律返回最大或最小数  </li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> myAtoi(String <span class="keyword">str</span>) &#123;</div><div class="line">        <span class="keyword">str</span> = <span class="keyword">str</span>.trim();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, sign = <span class="number">1</span>, num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>.charAt(i)==<span class="string">'-'</span> || <span class="keyword">str</span>.charAt(i)==<span class="string">'+'</span>)&#123;</div><div class="line">            sign = <span class="keyword">str</span>.charAt(i++)==<span class="string">'-'</span>? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;<span class="keyword">str</span>.length()&amp;&amp; <span class="keyword">str</span>.charAt(i)&gt;=<span class="string">'0'</span>&amp;&amp; <span class="keyword">str</span>.charAt(i)&lt;=<span class="string">'9'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;Integer.MAX_VALUE/<span class="number">10</span> || (num==Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; <span class="keyword">str</span>.charAt(i)-<span class="string">'0'</span>&gt;<span class="number">7</span>))&#123;</div><div class="line">                <span class="keyword">return</span> sign==<span class="number">1</span>? Integer.MAX_VALUE:Integer.MIN_VALUE;</div><div class="line">            &#125;</div><div class="line">            num = num*<span class="number">10</span> + <span class="keyword">str</span>.charAt(i++)-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num*sign;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-String
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer</title>
    <link href="http://xinli90.com/2016/09/21/Reverse-Integer/"/>
    <id>http://xinli90.com/2016/09/21/Reverse-Integer/</id>
    <published>2016-09-21T23:03:14.000Z</published>
    <updated>2016-09-22T00:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="external">Leetcode-Reverse Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Reverse digits of an integer.</p>
<p>Example1: x = 123, return 321<br>Example2: x = -123, return -321     </p>
<p>click to show spoilers.      </p>
<p>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!       </p>
<p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>
<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>
<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<p>Update (2014-11-10):<br>Test cases had been added to test the overflow behavior.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Reverse as usual but maintain the last digit in order not to overflow.(don’t add it)  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>when the overflow happens, newResult will have garbage value</li>
<li>We cannot get back to the original value, then we can use the equal method</li>
</ol>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> reverse(<span class="built_in">int</span> x) &#123;</div><div class="line">    	<span class="comment">//to avoid negative number overflow when invert to positive number</span></div><div class="line">    	<span class="keyword">if</span>(x==Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = x&gt;<span class="number">0</span>? x : -x;</div><div class="line">        <span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>&gt;=<span class="number">10</span>)&#123;</div><div class="line">        	y = y*<span class="number">10</span> + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">        	<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>) &#123;</div><div class="line">        	<span class="built_in">int</span> compare = Integer.MAX_VALUE/<span class="number">10</span>;</div><div class="line">        	<span class="keyword">if</span>(y&lt;compare)&#123;</div><div class="line">        		result = y*<span class="number">10</span>+<span class="built_in">num</span>;</div><div class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==compare) &#123;</div><div class="line">        		result = Integer.MAX_VALUE%<span class="number">10</span>&gt;<span class="built_in">num</span>? y*<span class="number">10</span>+<span class="built_in">num</span> : <span class="number">0</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">        	<span class="built_in">int</span> compare = Integer.MIN_VALUE/<span class="number">10</span>;</div><div class="line">        	<span class="keyword">if</span>(y&lt;-compare)&#123;</div><div class="line">        		result = -(y*<span class="number">10</span>+<span class="built_in">num</span>);</div><div class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==-compare) &#123;</div><div class="line">        		result = Integer.MIN_VALUE%<span class="number">10</span>&lt;-<span class="built_in">num</span>? -(y*<span class="number">10</span>+<span class="built_in">num</span>) : <span class="number">0</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public <span class="built_in">int</span> reverse(<span class="built_in">int</span> x) &#123;</div><div class="line">		<span class="built_in">int</span> result = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(x!=<span class="number">0</span>) &#123;</div><div class="line">			<span class="built_in">int</span> tail = x%<span class="number">10</span>;</div><div class="line">			<span class="built_in">int</span> newResult = result*<span class="number">10</span> + tail;</div><div class="line">			<span class="keyword">if</span>((newResult-tail)/<span class="number">10</span> != result) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			result = newResult;</div><div class="line">			x /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Reverse Integ
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Majority Element</title>
    <link href="http://xinli90.com/2016/09/21/Majority-Element/"/>
    <id>http://xinli90.com/2016/09/21/Majority-Element/</id>
    <published>2016-09-21T22:44:12.000Z</published>
    <updated>2016-09-21T23:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="external">Leetcode-Majority Element</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Sort the array, the majority element must appear in the middle.   </li>
<li>Time Complexity is O(nlgn)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use HashMap to count all elements.</li>
<li>get the value which is greater than ⌊ n/2 ⌋ times.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Track the count, only if the element that appears more than ⌊ n/2 ⌋ times can make count is greater than 0.</li>
<li>Time Complexity is O(n),Space Complexity is O(1)</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> majorityElement(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> majorityElement(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> majority = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">count</span>==<span class="number">0</span>)&#123;</div><div class="line">				majority = num;</div><div class="line">				<span class="keyword">count</span>++</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(majority==nums[i]) &#123;</div><div class="line">				<span class="keyword">count</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">count</span>--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> majority;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/majority-element/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Majority Ele
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion</title>
    <link href="http://xinli90.com/2016/09/21/ZigZag-Conversion/"/>
    <id>http://xinli90.com/2016/09/21/ZigZag-Conversion/</id>
    <published>2016-09-21T21:52:51.000Z</published>
    <updated>2016-09-21T22:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/zigzag-conversion/" target="_blank" rel="external">Leetcode-ZigZag Conversion</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   <span class="keyword">N</span></div><div class="line">A P L S <span class="keyword">I</span> <span class="keyword">I</span> G</div><div class="line">Y   <span class="keyword">I</span>   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”      </p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</div></pre></td></tr></table></figure>
<p>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Create nRows StringBuffers, and keep collecting characters from original string to corresponding StringBuffer.  </p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String convert(String s, <span class="keyword">int</span> numRows) &#123;</div><div class="line">    	StringBuilder[] sb = <span class="keyword">new</span> StringBuilder[numRows];</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">index</span> &lt; s.length()) &#123;</div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numRows &amp;&amp; <span class="keyword">index</span>&lt;s.length(); i++) &#123;</div><div class="line">    			sb[i].append(arr[<span class="keyword">index</span>++]);</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j=numRows<span class="number">-2</span>; j&gt;=<span class="number">1</span> &amp;&amp; <span class="keyword">index</span>&lt;s.length(); j--) &#123;</div><div class="line">    			sb[j].append(arr[<span class="keyword">index</span>++]);</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;numRows; i++) &#123;</div><div class="line">    		sb[<span class="number">0</span>].append(sb[i]);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> sb[<span class="number">0</span>].toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/zigzag-conversion/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-ZigZag Conv
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Title</title>
    <link href="http://xinli90.com/2016/09/21/Excel-Sheet-Column-Title/"/>
    <id>http://xinli90.com/2016/09/21/Excel-Sheet-Column-Title/</id>
    <published>2016-09-21T21:22:03.000Z</published>
    <updated>2016-09-21T21:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">Leetcode-Excel Sheet Column Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> -&gt; A</div><div class="line"><span class="number">2</span> -&gt; B</div><div class="line"><span class="number">3</span> -&gt; C</div><div class="line">...</div><div class="line"><span class="number">26</span> -&gt; Z</div><div class="line"><span class="number">27</span> -&gt; AA</div><div class="line"><span class="number">28</span> -&gt; AB</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    	<span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</div><div class="line">    		sb.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(<span class="string">'A'</span>+(n<span class="number">-1</span>)%<span class="number">26</span>));</div><div class="line">    		n = (n<span class="number">-1</span>)/<span class="number">26</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="function"><span class="keyword">return</span> sb.<span class="title">toString</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/excel-sheet-column-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Exc
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Number</title>
    <link href="http://xinli90.com/2016/09/21/Excel-Sheet-Column-Number/"/>
    <id>http://xinli90.com/2016/09/21/Excel-Sheet-Column-Number/</id>
    <published>2016-09-21T21:07:34.000Z</published>
    <updated>2016-09-21T21:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">Leetcode-Excel Sheet Column Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Related to question Excel Sheet Column Title</p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A -&gt; <span class="number">1</span></div><div class="line">B -&gt; <span class="number">2</span></div><div class="line">C -&gt; <span class="number">3</span></div><div class="line">...</div><div class="line">Z -&gt; <span class="number">26</span></div><div class="line">AA -&gt; <span class="number">27</span></div><div class="line">AB -&gt; <span class="number">28</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> titleToNumber(<span class="built_in">String</span> s) &#123;</div><div class="line">        <span class="built_in">int</span> length = s.length();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">            <span class="built_in">num</span> = <span class="built_in">num</span>*<span class="number">26</span>+ (s.charAt(i)<span class="number">-64</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/excel-sheet-column-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Exc
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number</title>
    <link href="http://xinli90.com/2016/09/21/Palindrome-Number/"/>
    <id>http://xinli90.com/2016/09/21/Palindrome-Number/</id>
    <published>2016-09-21T17:24:01.000Z</published>
    <updated>2016-09-21T21:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="external">Leetcode-Palindrome Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p>click to show spoilers.</p>
<p>Some hints:<br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Get how many digits for this number</li>
<li>Each time compare the lowest and highest digit.</li>
<li>Time Limit Exceed </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>We can use reverse method. But mantain the reversed version of int is always 1 time short in the factor of 10s</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>we can compare half of the digits </p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">    	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">        <span class="built_in">int</span> numDigit = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">            numDigit *= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        numDigit /= <span class="number">10</span>;</div><div class="line">        <span class="built_in">num</span> = x;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">int</span> low = <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">            <span class="built_in">int</span> high = <span class="built_in">num</span>/numDigit;</div><div class="line">            <span class="keyword">if</span>(low!=high) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="built_in">num</span> = (<span class="built_in">num</span>-high*numDigit)/<span class="number">10</span>;</div><div class="line">            numDigit /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">num</span> &gt;= <span class="number">10</span>) &#123;</div><div class="line">			y = y*<span class="number">10</span> + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">num</span> == x%<span class="number">10</span> &amp;&amp; y==x/<span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">	 	<span class="keyword">if</span>(x&lt;<span class="number">0</span>||(x!=<span class="number">0</span>&amp;&amp;x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(y&lt;<span class="built_in">num</span>) &#123;</div><div class="line">			y = <span class="number">10</span>*y + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> y==<span class="built_in">num</span> || y/<span class="number">10</span> == <span class="built_in">num</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Palindrome 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse String</title>
    <link href="http://xinli90.com/2016/09/21/Reverse-String/"/>
    <id>http://xinli90.com/2016/09/21/Reverse-String/</id>
    <published>2016-09-21T16:56:31.000Z</published>
    <updated>2016-09-21T17:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">Leetcode-Reverse String</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello”, return “olleh”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use StringBuilder reverse() method    </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate String from end to start, at each character to a new string.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>Use swap method. Fastest solution.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        return <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=s.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i++) &#123;</div><div class="line">        	sb.append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;</div><div class="line">        char[] arr = s.toCharArray();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span>=s.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">left</span>&lt;<span class="built_in">right</span>) &#123;</div><div class="line">            char temp = arr[<span class="built_in">left</span>];</div><div class="line">            arr[<span class="built_in">left</span>] = arr[<span class="built_in">right</span>];</div><div class="line">            arr[<span class="built_in">right</span>] = temp;</div><div class="line">            <span class="built_in">left</span>++;</div><div class="line">            <span class="built_in">right</span>--;</div><div class="line">        &#125;</div><div class="line">        return <span class="keyword">new</span> <span class="built_in">String</span>(arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/reverse-string/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Reverse String
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Nim Game</title>
    <link href="http://xinli90.com/2016/09/21/Nim-Game/"/>
    <id>http://xinli90.com/2016/09/21/Nim-Game/</id>
    <published>2016-09-21T16:16:01.000Z</published>
    <updated>2016-09-21T16:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/nim-game/" target="_blank" rel="external">Leetcode-Nim Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>BrainTest</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Recursive way. Time Limited Exceed.</li>
<li>The basic idea is if the opponent can win, then the player will lose. No matter how many stones the player move, the opponent will win. So       if(canWinNim(n-1)&amp;&amp;canWinNim(n-2)&amp;&amp;canWinNim(n-3)) return false;</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> n%<span class="number">4</span>!=<span class="number">0</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(canWinNim(n-<span class="number">1</span>)&amp;&amp;canWinNim(n-<span class="number">2</span>)&amp;&amp;canWinNim(n-<span class="number">3</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/nim-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Nim Game&lt;/a&gt;.&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
</feed>
