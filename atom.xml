<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-09-21T21:01:36.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Palindrome Number</title>
    <link href="http://xinli90.com/2016/09/21/Palindrome-Number/"/>
    <id>http://xinli90.com/2016/09/21/Palindrome-Number/</id>
    <published>2016-09-21T17:24:01.000Z</published>
    <updated>2016-09-21T21:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="external">Leetcode-Palindrome Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p>click to show spoilers.</p>
<p>Some hints:<br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Get how many digits for this number</li>
<li>Each time compare the lowest and highest digit.</li>
<li>Time Limit Exceed </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>We can use reverse method. But mantain the reversed version of int is always 1 time short in the factor of 10s</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>we can compare half of the digits </p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">    	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">        <span class="built_in">int</span> numDigit = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">            numDigit *= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        numDigit /= <span class="number">10</span>;</div><div class="line">        <span class="built_in">num</span> = x;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">int</span> low = <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">            <span class="built_in">int</span> high = <span class="built_in">num</span>/numDigit;</div><div class="line">            <span class="keyword">if</span>(low!=high) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="built_in">num</span> = (<span class="built_in">num</span>-high*numDigit)/<span class="number">10</span>;</div><div class="line">            numDigit /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">num</span> &gt;= <span class="number">10</span>) &#123;</div><div class="line">			y = y*<span class="number">10</span> + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">num</span> == x%<span class="number">10</span> &amp;&amp; y==x/<span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">	 	<span class="keyword">if</span>(x&lt;<span class="number">0</span>||(x!=<span class="number">0</span>&amp;&amp;x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(y&lt;<span class="built_in">num</span>) &#123;</div><div class="line">			y = <span class="number">10</span>*y + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> y==<span class="built_in">num</span> || y/<span class="number">10</span> == <span class="built_in">num</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Palindrome 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse String</title>
    <link href="http://xinli90.com/2016/09/21/Reverse-String/"/>
    <id>http://xinli90.com/2016/09/21/Reverse-String/</id>
    <published>2016-09-21T16:56:31.000Z</published>
    <updated>2016-09-21T17:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">Leetcode-Reverse String</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello”, return “olleh”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use StringBuilder reverse() method    </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate String from end to start, at each character to a new string.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>Use swap method. Fastest solution.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        return <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=s.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i++) &#123;</div><div class="line">        	sb.append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;</div><div class="line">        char[] arr = s.toCharArray();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span>=s.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">left</span>&lt;<span class="built_in">right</span>) &#123;</div><div class="line">            char temp = arr[<span class="built_in">left</span>];</div><div class="line">            arr[<span class="built_in">left</span>] = arr[<span class="built_in">right</span>];</div><div class="line">            arr[<span class="built_in">right</span>] = temp;</div><div class="line">            <span class="built_in">left</span>++;</div><div class="line">            <span class="built_in">right</span>--;</div><div class="line">        &#125;</div><div class="line">        return <span class="keyword">new</span> <span class="built_in">String</span>(arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/reverse-string/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Reverse String
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Nim Game</title>
    <link href="http://xinli90.com/2016/09/21/Nim-Game/"/>
    <id>http://xinli90.com/2016/09/21/Nim-Game/</id>
    <published>2016-09-21T16:16:01.000Z</published>
    <updated>2016-09-21T16:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/nim-game/" target="_blank" rel="external">Leetcode-Nim Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>BrainTest</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Recursive way. Time Limited Exceed.</li>
<li>The basic idea is if the opponent can win, then the player will lose. No matter how many stones the player move, the opponent will win. So       if(canWinNim(n-1)&amp;&amp;canWinNim(n-2)&amp;&amp;canWinNim(n-3)) return false;</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> n%<span class="number">4</span>!=<span class="number">0</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(canWinNim(n-<span class="number">1</span>)&amp;&amp;canWinNim(n-<span class="number">2</span>)&amp;&amp;canWinNim(n-<span class="number">3</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/nim-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Nim Game&lt;/a&gt;.&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Median of Two Sorted Arrays</title>
    <link href="http://xinli90.com/2016/09/21/Median-of-Two-Sorted-Arrays/"/>
    <id>http://xinli90.com/2016/09/21/Median-of-Two-Sorted-Arrays/</id>
    <published>2016-09-21T15:08:42.000Z</published>
    <updated>2016-09-21T15:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Leetcode-Median of Two Sorted Arrays</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</div><div class="line">nums2 = [<span class="number">2</span>]</div><div class="line"></div><div class="line">The median is <span class="number">2.0</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">The median is (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Create a new Array with length of nums1 and nums2 and sort them all</li>
<li>find the median from this array</li>
<li>Time complexity is O(m+n), Space complexity is O(m+n)    </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> findMedianSortedArrays(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        <span class="keyword">int</span> length1 = nums1.length;</div><div class="line">        <span class="keyword">int</span> length2 = nums2.length;</div><div class="line">        <span class="keyword">int</span> medianIndex = (length1+length2)/<span class="number">2</span>; </div><div class="line">        <span class="keyword">double</span> median=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] <span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[length1+length2];</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,index=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(index&lt;length1+length2)&#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;=length1)&#123;</div><div class="line">                <span class="keyword">array</span>[index++] = nums2[j++];</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=length2)&#123;</div><div class="line">                <span class="keyword">array</span>[index++] = nums1[i++];</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;length1&amp;&amp;j&lt;length2)&#123;</div><div class="line">                <span class="keyword">if</span>(nums1[i]&gt;nums2[j])&#123;</div><div class="line">                    <span class="keyword">array</span>[index++] = nums2[j++];</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">array</span>[index++] = nums1[i++];</div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((length1+length2)%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">            median = <span class="keyword">array</span>[medianIndex];</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            median = (<span class="keyword">double</span>)(<span class="keyword">array</span>[medianIndex<span class="number">-1</span>]+<span class="keyword">array</span>[medianIndex])/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> median;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-M
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Edit Distance</title>
    <link href="http://xinli90.com/2016/09/21/Edit-Distance/"/>
    <id>http://xinli90.com/2016/09/21/Edit-Distance/</id>
    <published>2016-09-21T13:19:00.000Z</published>
    <updated>2016-09-21T14:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="external">Leetcode-Edit Distance</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)</p>
<p>You have the following 3 operations permitted on a word:</p>
<p>a) Insert a character<br>b) Delete a character<br>c) Replace a character     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents word1的前i个字母和word2的前j个字母相同所需要的操作数</li>
<li>Function: f[i][j] = MIN(f[i-1][j-1],f[i][j-1]+1,f[i-1][j]+1) (word1[i] == word2[j]) Or MIN(f[i-1][j],f[i][j-1],f[i-1][j-1])+1  (word1[i] != word2[j])</li>
<li>Initialize: f[i][0] = i; f[0][j] = j</li>
<li>Answer: f[word1.length()][word2.length()]</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minDistance(<span class="keyword">String</span> word1,<span class="keyword">String</span> word2) &#123;</div><div class="line">       <span class="keyword">int</span> length1 = word1.length();</div><div class="line">       <span class="keyword">int</span> length2 = word2.length();</div><div class="line">       <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</div><div class="line">       <span class="comment">//initialize</span></div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=length1; i++) &#123;</div><div class="line">       		f[i][<span class="number">0</span>] = i;</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=length2; j++) &#123;</div><div class="line">       		f[<span class="number">0</span>][j] = j;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//function</span></div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=length1; i++) &#123;</div><div class="line">       		<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=length2; j++) &#123;</div><div class="line">       			<span class="built_in">if</span>(word1.charAt(i<span class="number">-1</span>)==word2.charAt(j<span class="number">-1</span>))&#123;</div><div class="line">       				f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j]+<span class="number">1</span>,f[i][j<span class="number">-1</span>]+<span class="number">1</span>));</div><div class="line">       			&#125;<span class="built_in">else</span> &#123;</div><div class="line">       				f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]))+<span class="number">1</span>;</div><div class="line">       			&#125;</div><div class="line">       			</div><div class="line">       		&#125;</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">return</span> f[length1][length2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Edit Distance&lt;/
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Strobogrammatic Number</title>
    <link href="http://xinli90.com/2016/09/20/Strobogrammatic-Number/"/>
    <id>http://xinli90.com/2016/09/20/Strobogrammatic-Number/</id>
    <published>2016-09-20T22:39:14.000Z</published>
    <updated>2016-09-20T22:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/strobogrammatic-number/" target="_blank" rel="external">Leetcode-Strobogrammatic Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>
<p>Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p>
<p>For example, the numbers “69”, “88”, and “818” are all strobogrammatic.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Just checking the pairs, going inwards from the ends.</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    public boolean isStrobogrammatic(<span class="built_in">String</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>,j=<span class="built_in">num</span>.length()<span class="number">-1</span>; i&lt;=j; i++,j--) &#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="string">"00 11 88 696"</span>.contains(<span class="built_in">num</span>.charAt(i)+<span class="string">""</span>+<span class="built_in">num</span>.charAt(j)))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/strobogrammatic-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Strobo
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Longest Increasing Subsequence</title>
    <link href="http://xinli90.com/2016/09/20/Longest-Increasing-Subsequence/"/>
    <id>http://xinli90.com/2016/09/20/Longest-Increasing-Subsequence/</id>
    <published>2016-09-20T20:09:25.000Z</published>
    <updated>2016-09-20T21:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-increasing-subsequence/" target="_blank" rel="external">Leetcode-Longest Increasing Subsequence</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,     </p>
<p>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.       </p>
<p>Your algorithm should run in O(n2) complexity.   </p>
<p>Follow up: Could you improve it to O(n log n) time complexity?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><ul>
<li>State: f[i] represents the longest increasing subsequence</li>
<li>Function: f[i] = MAX(f[j]+1) &amp;&amp; j&lt;i &amp;&amp; nums[j]&lt;nums[i]</li>
<li>Initialize: f[i] = 1,</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Mantain an array, use Binary search to insert or update this array.</li>
<li>We will get the longest array.</li>
</ol>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="type">int</span>[] f = new <span class="type">int</span>[<span class="built_in">length</span>];</div><div class="line">        <span class="type">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">                    <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,f[i]);</div><div class="line">                &#125;   </div><div class="line">            &#125;     </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> tails[] = new <span class="type">int</span>[nums.<span class="built_in">length</span>+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</div><div class="line">        	<span class="type">int</span> left = <span class="number">0</span>; </div><div class="line">        	<span class="type">int</span> right = <span class="built_in">length</span>;</div><div class="line">        	while(left&lt;right) &#123;</div><div class="line">        		<span class="type">int</span> mid = left+(right-left)/<span class="number">2</span>;</div><div class="line">        		<span class="keyword">if</span>(tails[mid]&lt;num)&#123;</div><div class="line">        			left = mid+<span class="number">1</span>;</div><div class="line">        		&#125;<span class="keyword">else</span> &#123;</div><div class="line">        			right = mid;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	tails[left] = num;</div><div class="line">        	<span class="keyword">if</span>(left==<span class="built_in">length</span>) ++<span class="built_in">length</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">length</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcod
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Valid Palindrome</title>
    <link href="http://xinli90.com/2016/09/20/Valid-Palindrome/"/>
    <id>http://xinli90.com/2016/09/20/Valid-Palindrome/</id>
    <published>2016-09-20T14:48:23.000Z</published>
    <updated>2016-09-20T17:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="external">Leetcode-Valid Palindrome</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example, </p>
<p>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.      </p>
<p>Note:      </p>
<p>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Mantain two pointers, iterate from start and end respectively and compare if its lowercase is equal.</li>
<li>When meet the character is not letter or digit, move to the next character.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use Regex to replace all non digit or letter.</li>
<li>Reverse the string and compare to itself. </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s.length()-<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">			char c_left = s.charAt(<span class="keyword">left</span>);</div><div class="line">			char c_right = s.charAt(<span class="keyword">right</span>);</div><div class="line">			<span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_left))&#123;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_right))&#123;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="type">Character</span>.toLowerCase(c_left)!=<span class="type">Character</span>.toLowerCase(c_right))&#123;</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		<span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		s = s.replaceAll(<span class="string">"\\W"</span>,<span class="string">""</span>);</div><div class="line">		<span class="type">String</span> s2 = new <span class="type">StringBuilder</span>(s).<span class="built_in">reverse</span>().<span class="built_in">toString</span>();</div><div class="line">		<span class="keyword">return</span> s.equalsIgnoreCase(s2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/valid-palindrome/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Valid Palind
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Partitioning II</title>
    <link href="http://xinli90.com/2016/09/19/Palindrome-Partitioning-II/"/>
    <id>http://xinli90.com/2016/09/19/Palindrome-Partitioning-II/</id>
    <published>2016-09-20T00:08:20.000Z</published>
    <updated>2016-09-20T20:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning-ii/" target="_blank" rel="external">Leetcode-Palindrome Partitioning II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return the minimum cuts needed for a palindrome partitioning of s.</p>
<p>For example, given s = “aab”,      </p>
<p>Return 1 since the palindrome partitioning [“aa”,”b”] could be produced using 1 cut.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents the minimum cut in first i length of string</li>
<li>Function: f[i] = MIN(f[j]+1) &amp;&amp; 拿到j的最小，第j+1到第i个能组成回文即为f[j]+1</li>
<li>Initialize: f[i] = i-1,</li>
<li>Answer: f[s.length()]</li>
</ul>
<p>We use a two dimentional array to record if each substring is palindrome</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minCut(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome = getPalindrome(s);</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</div><div class="line">        	f[i] = i<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">        		<span class="built_in">if</span>(isPalindrome[j][i<span class="number">-1</span>]) &#123;</div><div class="line">        			f[i] = Math.<span class="built_in">min</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[length];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//row represents start, col represents end.</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] getPalindrome(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">    	<span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[][];</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">    		isPalindrome[i][i] = true;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</div><div class="line">    		isPalindrome[i][i+<span class="number">1</span>] = (s.charAt(i)==s.charAt(i+<span class="number">1</span>));</div><div class="line">    	&#125;</div><div class="line">    	<span class="comment">//record 1 length of substring,then 2... more and more to get the entire string.</span></div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">2</span>; <span class="built_in">size</span>&lt;length;<span class="built_in">size</span>++) &#123;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> start=<span class="number">0</span>; start+<span class="built_in">size</span>&lt;length; start++) &#123;</div><div class="line">    			isPalindrome[start][start+<span class="built_in">size</span>] = isPalindrome[start+<span class="number">1</span>][start+<span class="built_in">size</span><span class="number">-1</span>]&amp;&amp;(s.charAt(start)==s.charAt(start+<span class="built_in">size</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> isPalindrome;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Pa
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Partitioning</title>
    <link href="http://xinli90.com/2016/09/19/Palindrome-Partitioning/"/>
    <id>http://xinli90.com/2016/09/19/Palindrome-Partitioning/</id>
    <published>2016-09-19T14:08:01.000Z</published>
    <updated>2016-09-19T15:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="external">Leetcode-Palindrome Partitioning</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>For example, given s = “aab”,     </p>
<p>Return</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="string">"aa"</span>,<span class="string">"b"</span>],</div><div class="line">  [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Backtracking</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; partition(<span class="built_in">String</span> s) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(s,<span class="number">0</span>,lists,<span class="built_in">list</span>);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="literal">void</span> helper(<span class="built_in">String</span> s, int start, <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists,<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(index==s.length()) &#123;</div><div class="line">			lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(<span class="built_in">list</span>));</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		for(int i=start; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(isPalindrome(s,start,i)) &#123;</div><div class="line">				<span class="built_in">list</span>.add(s.substring(start,i+<span class="number">1</span>));</div><div class="line">				helper(s,i+<span class="number">1</span>,lists,<span class="built_in">list</span>);</div><div class="line">				<span class="built_in">list</span>.remove(<span class="built_in">list</span>.size()<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> isPalindrome(<span class="built_in">String</span> p,int left,int right) &#123;</div><div class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</div><div class="line">            <span class="keyword">if</span>(p.charAt(left++) != p.charAt(right--))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Palin
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jump Game II</title>
    <link href="http://xinli90.com/2016/09/18/Jump-Game-II/"/>
    <id>http://xinli90.com/2016/09/18/Jump-Game-II/</id>
    <published>2016-09-19T01:22:33.000Z</published>
    <updated>2016-09-19T02:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="external">Leetcode-Jump Game II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<p>For example:     </p>
<p>Given array A = [2,3,1,1,4]        </p>
<p>The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)</p>
<p>Note:<br>You can assume that you can always reach the last index.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents the minimum number which we jump from start to i.</li>
<li>Function: f[i] = Min(f[j]+1,j&lt;i &amp;&amp; j could jump to i)</li>
<li>Initialize: f[0] = 0</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Each time we move to the farthest position which we can get in the previous range. It will be the minimum steps.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</div><div class="line">        	f[i] = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="built_in">if</span>(f[j]!=Integer.MAX_VALUE &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">min</span>(f[i], f[j]+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[nums.length<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">int</span> start=<span class="number">0</span>, <span class="built_in">end</span>=<span class="number">0</span>, steps = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">int</span> length = nums.length;</div><div class="line">    	<span class="built_in">while</span>(<span class="built_in">end</span>&lt;length<span class="number">-1</span>) &#123;</div><div class="line">    		steps++;</div><div class="line">    		<span class="keyword">int</span> farthest = <span class="built_in">end</span>;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> i=start; i&lt;=<span class="built_in">end</span>; i++) &#123;</div><div class="line">    			<span class="built_in">if</span>(i+nums[i] &gt; farthest) &#123;</div><div class="line">    				farthest = i+nums[i];</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    		start = <span class="built_in">end</span>+<span class="number">1</span>;</div><div class="line">    		<span class="built_in">end</span> = farthest;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> steps;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Jump Game II&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jump Game</title>
    <link href="http://xinli90.com/2016/09/18/Jump-Game/"/>
    <id>http://xinli90.com/2016/09/18/Jump-Game/</id>
    <published>2016-09-19T00:48:44.000Z</published>
    <updated>2016-09-19T01:21:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="external">Leetcode-Jump Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.     </p>
<p>For example:   </p>
<p>A = [2,3,1,1,4], return true.     </p>
<p>A = [3,2,1,0,4], return false.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents if we can get to the i location.</li>
<li>Function: if(f[i-1] &amp;&amp; nums[i-1]&gt;0)f[i] = true, or f[i]=false;</li>
<li>Initialize: f[0] = true</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate teh array, get the farthest position and check if it can get the last position.<br>The time complexity is O(n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> f[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="keyword">if</span>(f[j] &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[nums.length-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    	<span class="keyword">int</span> farthest = nums[<span class="number">0</span>];</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="keyword">if</span>(i &lt;= farthest &amp;&amp; i+nums[i] &gt; farthest) &#123;</div><div class="line">    			farthest = i+nums[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> farthest &gt;= nums.length-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/jump-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Jump Game&lt;/a&gt;.&lt;/p&gt;

    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Climbing Stairs</title>
    <link href="http://xinli90.com/2016/09/18/Climbing-Stairs/"/>
    <id>http://xinli90.com/2016/09/18/Climbing-Stairs/</id>
    <published>2016-09-19T00:37:12.000Z</published>
    <updated>2016-09-19T00:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="external">Leetcode-Climbing Stairs</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents ways of climbing from start to i step.</li>
<li>Function: f[i] = f[i-1] + f[i-2]; 到达第i步之前，需要i-1或者i-2步</li>
<li>Initialize: f[0] = 1, f[1] = 1</li>
<li>Answer: f[n]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n; i++)&#123;</div><div class="line">            f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Climbing Stai
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Unique Paths</title>
    <link href="http://xinli90.com/2016/09/18/Unique-Paths/"/>
    <id>http://xinli90.com/2016/09/18/Unique-Paths/</id>
    <published>2016-09-18T23:10:54.000Z</published>
    <updated>2016-09-20T00:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/unique-paths/" target="_blank" rel="external">Leetcode-Unique Paths</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents the number of unique paths from start to coordinate(x,y)</li>
<li>Function: f[i][j] = f[i-1][j] + f[i][j-1]  (思考：怎样到达(i,j)这一步，到达这一步之前我们有多少选择)</li>
<li>Initialize: f[0][0] = 1; f[i][0] = 1; f[0][j] = 1</li>
<li>Answer: f[m-1][n-1]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span>(<span class="params"><span class="keyword">int</span> m, <span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span> [m][n];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">            f[<span class="number">0</span>][j] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/unique-paths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Unique Paths&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Path Sum</title>
    <link href="http://xinli90.com/2016/09/18/Minimum-Path-Sum/"/>
    <id>http://xinli90.com/2016/09/18/Minimum-Path-Sum/</id>
    <published>2016-09-18T22:46:49.000Z</published>
    <updated>2016-09-18T23:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="external">Leetcode-Minimum Path Sum</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p>Note: You can only move either down or right at any point in time.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: sum[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: sum[i][j] = MIN(sum[i-1][j],sum[i][j-1]) + grid[i][j], i&gt;1,j&gt;1,i&lt;m,j&lt;n</li>
<li>Initialization: f[0][0] = grid[0][0]; sum[i][0] = sum[i-1][0] + triangle[i][0]; sum[0][j] = sum[0][j-1] + grid[0][j]</li>
<li>Answer: sum[m-1][n-1]</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minPathSum(<span class="keyword">int</span>[][] grid) &#123;</div><div class="line">        <span class="keyword">if</span>(grid==<span class="keyword">null</span> || grid.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = grid.length;</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] <span class="keyword">sum</span> = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">sum</span>[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">sum</span>[i][<span class="number">0</span>] = <span class="keyword">sum</span>[i<span class="number">-1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</div><div class="line">            <span class="keyword">sum</span>[<span class="number">0</span>][j] = <span class="keyword">sum</span>[<span class="number">0</span>][j<span class="number">-1</span>] + grid[<span class="number">0</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">sum</span>[i][j] = Math.min(<span class="keyword">sum</span>[i<span class="number">-1</span>][j],<span class="keyword">sum</span>[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Minimum Path
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Triangle</title>
    <link href="http://xinli90.com/2016/09/18/Triangle/"/>
    <id>http://xinli90.com/2016/09/18/Triangle/</id>
    <published>2016-09-18T20:22:16.000Z</published>
    <updated>2016-09-18T22:23:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/triangle/" target="_blank" rel="external">Leetcode-Triangle</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>
<p>For example, given the following triangle</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p>
<p>Note:<br>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: f[i][j] = MIN(f[i-1][j],f[i-1][j-1])+triangle[i][j], j&lt;=i</li>
<li>Initialization: f[0][0] = triangle[0][0];f[i][0]=f[i-1][0]+triangle[i][0];f[i][i]=f[i-1][i-1]+triangle[i][i]</li>
<li>Answer: f[list.length-1][j]</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> minimumTotal(List&lt;List&lt;Integer&gt;&gt; <span class="built_in">triangle</span>) &#123;</div><div class="line">        <span class="built_in">int</span> n = <span class="built_in">triangle</span>.<span class="built_in">size</span>();</div><div class="line">        <span class="built_in">int</span>[][] f = <span class="keyword">new</span> <span class="built_in">int</span>[n][n];</div><div class="line">        <span class="built_in">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE;</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">triangle</span>.<span class="built_in">get</span>(<span class="number">0</span>).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n;i++)&#123;</div><div class="line">            f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">            f[i][i] = f[i<span class="number">-1</span>][i<span class="number">-1</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</div><div class="line">                f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</div><div class="line">            <span class="built_in">min</span> = Math.<span class="built_in">min</span>(<span class="built_in">min</span>,f[n<span class="number">-1</span>][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/triangle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Triangle&lt;/a&gt;.&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Number of Islands</title>
    <link href="http://xinli90.com/2016/09/16/Number-of-Islands/"/>
    <id>http://xinli90.com/2016/09/16/Number-of-Islands/</id>
    <published>2016-09-17T03:13:32.000Z</published>
    <updated>2016-09-17T03:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Leetcode-Number of Islands</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div></pre></td></tr></table></figure>
<p>Answer: 1</p>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div></pre></td></tr></table></figure>
<p>Answer: 3</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Recursively to check each cell when we find the ‘1’</li>
<li>Just make the island disappear once a cell was found.</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">	public <span class="keyword">int</span> numIslands(char[][] <span class="keyword">grid</span>) &#123;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">grid</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="keyword">grid</span>[<span class="number">0</span>].length; j++) &#123;</div><div class="line">				count++;</div><div class="line">				disappear(<span class="keyword">grid</span>,i,j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void disappear(char[][] <span class="keyword">grid</span>, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=<span class="keyword">grid</span>.legnth || j&lt;<span class="number">0</span> || j&gt;=<span class="keyword">grid</span>[<span class="number">0</span>].length || <span class="keyword">grid</span>[i][j]==<span class="string">'0'</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">grid</span>[i][j]==<span class="string">'1'</span>) <span class="keyword">grid</span>[i][j]=<span class="string">'0'</span>;</div><div class="line">		disappear(<span class="keyword">grid</span>,i<span class="number">-1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i+<span class="number">1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j<span class="number">-1</span>);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Number of I
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Add Binary</title>
    <link href="http://xinli90.com/2016/09/16/Add-Binary/"/>
    <id>http://xinli90.com/2016/09/16/Add-Binary/</id>
    <published>2016-09-17T02:51:17.000Z</published>
    <updated>2016-09-17T03:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="external">Leetcode-Add Binary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).     </p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Set a flag to track if we have the carry.</li>
<li>Each time we use a and b with the same index together and plus flag to calculate which number we should to add into String.  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar with Solution1, but combine all while loops together.</li>
<li>We can use StringBuilder.inset(0,num) method instead of String operation.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        String result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> &amp;&amp; b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">            b_index--;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            b_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag==<span class="number">1</span>? <span class="string">"1"</span>+result : result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> || b_index &gt;= <span class="number">0</span> || carry==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a_index &lt; <span class="number">0</span>? <span class="number">0</span> : a.charAt(a_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b_index &lt; <span class="number">0</span>? <span class="number">0</span> : b.charAt(b_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="keyword">sum</span>%<span class="number">2</span>);</div><div class="line">            carry = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/add-binary/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Add Binary&lt;/a&gt;.&lt;/p
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>First Bad Version</title>
    <link href="http://xinli90.com/2016/09/15/First-Bad-Version/"/>
    <id>http://xinli90.com/2016/09/15/First-Bad-Version/</id>
    <published>2016-09-15T23:39:44.000Z</published>
    <updated>2016-09-15T23:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.       </p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.      </p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Binary Search.</li>
<li>If mid is bad and the number which is previous mid is not bad, return it.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The isBadVersion API <span class="keyword">is</span> defined <span class="keyword">in</span> the parent <span class="keyword">class</span> VersionControl.</div><div class="line">      boolean isBadVersion(<span class="built_in">int</span> version); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution extends VersionControl &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> firstBadVersion(<span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="built_in">int</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = low+(high-low)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(isBadVersion(<span class="built_in">mid</span>)&amp;&amp;!isBadVersion(<span class="built_in">mid</span><span class="number">-1</span>)) return <span class="built_in">mid</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isBadVersion(<span class="built_in">mid</span>)) low = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = <span class="built_in">mid</span><span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        return low; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-First Bad V
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Top K Frequent Elements</title>
    <link href="http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/"/>
    <id>http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/</id>
    <published>2016-09-13T21:12:13.000Z</published>
    <updated>2016-09-13T21:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">Leetcode-Top K Frequent Elements</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, return the k most frequent elements.     </p>
<p>For example,<br>Given [1,1,1,2,2,3] and k = 2, return [1,2].</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.<br>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n)</li>
<li>Use HashMap to count the frequency of each number, key is number ,value is frequency</li>
<li>Create a array with List, the maximum size is the 1+length of nums. Because we need consider that we only have multiple one number. The index of this number is length.</li>
<li>Put the number which has the same frequency together.</li>
<li>At last from the end to start, add the small list into list until the list size is not less than k.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(n+nlogk)</li>
<li>Use MinHeap. Each time we poll minimum element from PriorityQueue. Then we can keep track of k most significant entries.</li>
<li>Iterate through the final heap and get the keys.</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(num))&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="built_in">map</span>.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;Integer&gt;[] bucket = <span class="keyword">new</span> List[nums.length+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)]==<span class="keyword">null</span>)&#123;</div><div class="line">                bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            &#125;</div><div class="line">            bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)].<span class="built_in">add</span>(<span class="built_in">key</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> index = nums.length; index&gt;=<span class="number">0</span> &amp;&amp; list.<span class="built_in">size</span>()&lt;k; index--) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[index]!=<span class="keyword">null</span>)&#123;</div><div class="line">                list.addAll(bucket[index]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">     <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; counterMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(counterMap.containsKey(num))&#123;</div><div class="line">                counterMap.put(num,counterMap.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                counterMap.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue()-b.getValue());</div><div class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : counterMap.entrySet()) &#123;</div><div class="line">        pq.offer(entry);</div><div class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k) pq.poll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">while</span>(!pq.isEmpty()) &#123;</div><div class="line">        res.<span class="built_in">add</span>(<span class="number">0</span>, pq.poll().getKey());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Top K
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
</feed>
