<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-09-20T21:23:18.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Longest Increasing Subsequence</title>
    <link href="http://xinli90.com/2016/09/20/Longest-Increasing-Subsequence/"/>
    <id>http://xinli90.com/2016/09/20/Longest-Increasing-Subsequence/</id>
    <published>2016-09-20T20:09:25.000Z</published>
    <updated>2016-09-20T21:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-increasing-subsequence/" target="_blank" rel="external">Leetcode-Longest Increasing Subsequence</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,     </p>
<p>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.       </p>
<p>Your algorithm should run in O(n2) complexity.   </p>
<p>Follow up: Could you improve it to O(n log n) time complexity?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><ul>
<li>State: f[i] represents the longest increasing subsequence</li>
<li>Function: f[i] = MAX(f[j]+1) &amp;&amp; j&lt;i &amp;&amp; nums[j]&lt;nums[i]</li>
<li>Initialize: f[i] = 1,</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Mantain an array, use Binary search to insert or update this array.</li>
<li>We will get the longest array.</li>
</ol>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="type">int</span>[] f = new <span class="type">int</span>[<span class="built_in">length</span>];</div><div class="line">        <span class="type">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">                    <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,f[i]);</div><div class="line">                &#125;   </div><div class="line">            &#125;     </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> tails[] = new <span class="type">int</span>[nums.<span class="built_in">length</span>+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</div><div class="line">        	<span class="type">int</span> left = <span class="number">0</span>; </div><div class="line">        	<span class="type">int</span> right = <span class="built_in">length</span>;</div><div class="line">        	while(left&lt;right) &#123;</div><div class="line">        		<span class="type">int</span> mid = left+(right-left)/<span class="number">2</span>;</div><div class="line">        		<span class="keyword">if</span>(tails[mid]&lt;num)&#123;</div><div class="line">        			left = mid+<span class="number">1</span>;</div><div class="line">        		&#125;<span class="keyword">else</span> &#123;</div><div class="line">        			right = mid;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	tails[left] = num;</div><div class="line">        	<span class="keyword">if</span>(left==<span class="built_in">length</span>) ++<span class="built_in">length</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">length</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcod
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Valid Palindrome</title>
    <link href="http://xinli90.com/2016/09/20/Valid-Palindrome/"/>
    <id>http://xinli90.com/2016/09/20/Valid-Palindrome/</id>
    <published>2016-09-20T14:48:23.000Z</published>
    <updated>2016-09-20T17:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="external">Leetcode-Valid Palindrome</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example, </p>
<p>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.      </p>
<p>Note:      </p>
<p>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Mantain two pointers, iterate from start and end respectively and compare if its lowercase is equal.</li>
<li>When meet the character is not letter or digit, move to the next character.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use Regex to replace all non digit or letter.</li>
<li>Reverse the string and compare to itself. </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s.length()-<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">			char c_left = s.charAt(<span class="keyword">left</span>);</div><div class="line">			char c_right = s.charAt(<span class="keyword">right</span>);</div><div class="line">			<span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_left))&#123;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_right))&#123;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="type">Character</span>.toLowerCase(c_left)!=<span class="type">Character</span>.toLowerCase(c_right))&#123;</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		<span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		s = s.replaceAll(<span class="string">"\\W"</span>,<span class="string">""</span>);</div><div class="line">		<span class="type">String</span> s2 = new <span class="type">StringBuilder</span>(s).<span class="built_in">reverse</span>().<span class="built_in">toString</span>();</div><div class="line">		<span class="keyword">return</span> s.equalsIgnoreCase(s2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/valid-palindrome/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Valid Palind
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Partitioning II</title>
    <link href="http://xinli90.com/2016/09/19/Palindrome-Partitioning-II/"/>
    <id>http://xinli90.com/2016/09/19/Palindrome-Partitioning-II/</id>
    <published>2016-09-20T00:08:20.000Z</published>
    <updated>2016-09-20T20:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning-ii/" target="_blank" rel="external">Leetcode-Palindrome Partitioning II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return the minimum cuts needed for a palindrome partitioning of s.</p>
<p>For example, given s = “aab”,      </p>
<p>Return 1 since the palindrome partitioning [“aa”,”b”] could be produced using 1 cut.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents the minimum cut in first i length of string</li>
<li>Function: f[i] = MIN(f[j]+1) &amp;&amp; 拿到j的最小，第j+1到第i个能组成回文即为f[j]+1</li>
<li>Initialize: f[i] = i-1,</li>
<li>Answer: f[s.length()]</li>
</ul>
<p>We use a two dimentional array to record if each substring is palindrome</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minCut(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome = getPalindrome(s);</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</div><div class="line">        	f[i] = i<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">        		<span class="built_in">if</span>(isPalindrome[j][i<span class="number">-1</span>]) &#123;</div><div class="line">        			f[i] = Math.<span class="built_in">min</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[length];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//row represents start, col represents end.</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] getPalindrome(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">    	<span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[][];</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">    		isPalindrome[i][i] = true;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</div><div class="line">    		isPalindrome[i][i+<span class="number">1</span>] = (s.charAt(i)==s.charAt(i+<span class="number">1</span>));</div><div class="line">    	&#125;</div><div class="line">    	<span class="comment">//record 1 length of substring,then 2... more and more to get the entire string.</span></div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">2</span>; <span class="built_in">size</span>&lt;length;<span class="built_in">size</span>++) &#123;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> start=<span class="number">0</span>; start+<span class="built_in">size</span>&lt;length; start++) &#123;</div><div class="line">    			isPalindrome[start][start+<span class="built_in">size</span>] = isPalindrome[start+<span class="number">1</span>][start+<span class="built_in">size</span><span class="number">-1</span>]&amp;&amp;(s.charAt(start)==s.charAt(start+<span class="built_in">size</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> isPalindrome;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Pa
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Partitioning</title>
    <link href="http://xinli90.com/2016/09/19/Palindrome-Partitioning/"/>
    <id>http://xinli90.com/2016/09/19/Palindrome-Partitioning/</id>
    <published>2016-09-19T14:08:01.000Z</published>
    <updated>2016-09-19T15:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="external">Leetcode-Palindrome Partitioning</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>For example, given s = “aab”,     </p>
<p>Return</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="string">"aa"</span>,<span class="string">"b"</span>],</div><div class="line">  [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Backtracking</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; partition(<span class="built_in">String</span> s) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(s,<span class="number">0</span>,lists,<span class="built_in">list</span>);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="literal">void</span> helper(<span class="built_in">String</span> s, int start, <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists,<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(index==s.length()) &#123;</div><div class="line">			lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(<span class="built_in">list</span>));</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		for(int i=start; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(isPalindrome(s,start,i)) &#123;</div><div class="line">				<span class="built_in">list</span>.add(s.substring(start,i+<span class="number">1</span>));</div><div class="line">				helper(s,i+<span class="number">1</span>,lists,<span class="built_in">list</span>);</div><div class="line">				<span class="built_in">list</span>.remove(<span class="built_in">list</span>.size()<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> isPalindrome(<span class="built_in">String</span> p,int left,int right) &#123;</div><div class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</div><div class="line">            <span class="keyword">if</span>(p.charAt(left++) != p.charAt(right--))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Palin
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jump Game II</title>
    <link href="http://xinli90.com/2016/09/18/Jump-Game-II/"/>
    <id>http://xinli90.com/2016/09/18/Jump-Game-II/</id>
    <published>2016-09-19T01:22:33.000Z</published>
    <updated>2016-09-19T02:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="external">Leetcode-Jump Game II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<p>For example:     </p>
<p>Given array A = [2,3,1,1,4]        </p>
<p>The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)</p>
<p>Note:<br>You can assume that you can always reach the last index.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents the minimum number which we jump from start to i.</li>
<li>Function: f[i] = Min(f[j]+1,j&lt;i &amp;&amp; j could jump to i)</li>
<li>Initialize: f[0] = 0</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Each time we move to the farthest position which we can get in the previous range. It will be the minimum steps.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</div><div class="line">        	f[i] = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="built_in">if</span>(f[j]!=Integer.MAX_VALUE &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">min</span>(f[i], f[j]+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[nums.length<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">int</span> start=<span class="number">0</span>, <span class="built_in">end</span>=<span class="number">0</span>, steps = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">int</span> length = nums.length;</div><div class="line">    	<span class="built_in">while</span>(<span class="built_in">end</span>&lt;length<span class="number">-1</span>) &#123;</div><div class="line">    		steps++;</div><div class="line">    		<span class="keyword">int</span> farthest = <span class="built_in">end</span>;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> i=start; i&lt;=<span class="built_in">end</span>; i++) &#123;</div><div class="line">    			<span class="built_in">if</span>(i+nums[i] &gt; farthest) &#123;</div><div class="line">    				farthest = i+nums[i];</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    		start = <span class="built_in">end</span>+<span class="number">1</span>;</div><div class="line">    		<span class="built_in">end</span> = farthest;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> steps;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Jump Game II&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Jump Game</title>
    <link href="http://xinli90.com/2016/09/18/Jump-Game/"/>
    <id>http://xinli90.com/2016/09/18/Jump-Game/</id>
    <published>2016-09-19T00:48:44.000Z</published>
    <updated>2016-09-19T01:21:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="external">Leetcode-Jump Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.     </p>
<p>For example:   </p>
<p>A = [2,3,1,1,4], return true.     </p>
<p>A = [3,2,1,0,4], return false.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents if we can get to the i location.</li>
<li>Function: if(f[i-1] &amp;&amp; nums[i-1]&gt;0)f[i] = true, or f[i]=false;</li>
<li>Initialize: f[0] = true</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate teh array, get the farthest position and check if it can get the last position.<br>The time complexity is O(n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> f[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="keyword">if</span>(f[j] &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[nums.length-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    	<span class="keyword">int</span> farthest = nums[<span class="number">0</span>];</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="keyword">if</span>(i &lt;= farthest &amp;&amp; i+nums[i] &gt; farthest) &#123;</div><div class="line">    			farthest = i+nums[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> farthest &gt;= nums.length-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/jump-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Jump Game&lt;/a&gt;.&lt;/p&gt;

    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Climbing Stairs</title>
    <link href="http://xinli90.com/2016/09/18/Climbing-Stairs/"/>
    <id>http://xinli90.com/2016/09/18/Climbing-Stairs/</id>
    <published>2016-09-19T00:37:12.000Z</published>
    <updated>2016-09-19T00:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="external">Leetcode-Climbing Stairs</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents ways of climbing from start to i step.</li>
<li>Function: f[i] = f[i-1] + f[i-2]; 到达第i步之前，需要i-1或者i-2步</li>
<li>Initialize: f[0] = 1, f[1] = 1</li>
<li>Answer: f[n]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n; i++)&#123;</div><div class="line">            f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Climbing Stai
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Unique Paths</title>
    <link href="http://xinli90.com/2016/09/18/Unique-Paths/"/>
    <id>http://xinli90.com/2016/09/18/Unique-Paths/</id>
    <published>2016-09-18T23:10:54.000Z</published>
    <updated>2016-09-20T00:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/unique-paths/" target="_blank" rel="external">Leetcode-Unique Paths</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents the number of unique paths from start to coordinate(x,y)</li>
<li>Function: f[i][j] = f[i-1][j] + f[i][j-1]  (思考：怎样到达(i,j)这一步，到达这一步之前我们有多少选择)</li>
<li>Initialize: f[0][0] = 1; f[i][0] = 1; f[0][j] = 1</li>
<li>Answer: f[m-1][n-1]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span>(<span class="params"><span class="keyword">int</span> m, <span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span> [m][n];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">            f[<span class="number">0</span>][j] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/unique-paths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Unique Paths&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Path Sum</title>
    <link href="http://xinli90.com/2016/09/18/Minimum-Path-Sum/"/>
    <id>http://xinli90.com/2016/09/18/Minimum-Path-Sum/</id>
    <published>2016-09-18T22:46:49.000Z</published>
    <updated>2016-09-18T23:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="external">Leetcode-Minimum Path Sum</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p>Note: You can only move either down or right at any point in time.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: sum[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: sum[i][j] = MIN(sum[i-1][j],sum[i][j-1]) + grid[i][j], i&gt;1,j&gt;1,i&lt;m,j&lt;n</li>
<li>Initialization: f[0][0] = grid[0][0]; sum[i][0] = sum[i-1][0] + triangle[i][0]; sum[0][j] = sum[0][j-1] + grid[0][j]</li>
<li>Answer: sum[m-1][n-1]</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minPathSum(<span class="keyword">int</span>[][] grid) &#123;</div><div class="line">        <span class="keyword">if</span>(grid==<span class="keyword">null</span> || grid.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = grid.length;</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] <span class="keyword">sum</span> = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">sum</span>[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">sum</span>[i][<span class="number">0</span>] = <span class="keyword">sum</span>[i<span class="number">-1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</div><div class="line">            <span class="keyword">sum</span>[<span class="number">0</span>][j] = <span class="keyword">sum</span>[<span class="number">0</span>][j<span class="number">-1</span>] + grid[<span class="number">0</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">sum</span>[i][j] = Math.min(<span class="keyword">sum</span>[i<span class="number">-1</span>][j],<span class="keyword">sum</span>[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Minimum Path
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Triangle</title>
    <link href="http://xinli90.com/2016/09/18/Triangle/"/>
    <id>http://xinli90.com/2016/09/18/Triangle/</id>
    <published>2016-09-18T20:22:16.000Z</published>
    <updated>2016-09-18T22:23:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/triangle/" target="_blank" rel="external">Leetcode-Triangle</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>
<p>For example, given the following triangle</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p>
<p>Note:<br>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: f[i][j] = MIN(f[i-1][j],f[i-1][j-1])+triangle[i][j], j&lt;=i</li>
<li>Initialization: f[0][0] = triangle[0][0];f[i][0]=f[i-1][0]+triangle[i][0];f[i][i]=f[i-1][i-1]+triangle[i][i]</li>
<li>Answer: f[list.length-1][j]</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> minimumTotal(List&lt;List&lt;Integer&gt;&gt; <span class="built_in">triangle</span>) &#123;</div><div class="line">        <span class="built_in">int</span> n = <span class="built_in">triangle</span>.<span class="built_in">size</span>();</div><div class="line">        <span class="built_in">int</span>[][] f = <span class="keyword">new</span> <span class="built_in">int</span>[n][n];</div><div class="line">        <span class="built_in">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE;</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">triangle</span>.<span class="built_in">get</span>(<span class="number">0</span>).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n;i++)&#123;</div><div class="line">            f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">            f[i][i] = f[i<span class="number">-1</span>][i<span class="number">-1</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</div><div class="line">                f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</div><div class="line">            <span class="built_in">min</span> = Math.<span class="built_in">min</span>(<span class="built_in">min</span>,f[n<span class="number">-1</span>][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/triangle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Triangle&lt;/a&gt;.&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Number of Islands</title>
    <link href="http://xinli90.com/2016/09/16/Number-of-Islands/"/>
    <id>http://xinli90.com/2016/09/16/Number-of-Islands/</id>
    <published>2016-09-17T03:13:32.000Z</published>
    <updated>2016-09-17T03:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Leetcode-Number of Islands</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div></pre></td></tr></table></figure>
<p>Answer: 1</p>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div></pre></td></tr></table></figure>
<p>Answer: 3</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Recursively to check each cell when we find the ‘1’</li>
<li>Just make the island disappear once a cell was found.</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">	public <span class="keyword">int</span> numIslands(char[][] <span class="keyword">grid</span>) &#123;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">grid</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="keyword">grid</span>[<span class="number">0</span>].length; j++) &#123;</div><div class="line">				count++;</div><div class="line">				disappear(<span class="keyword">grid</span>,i,j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void disappear(char[][] <span class="keyword">grid</span>, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=<span class="keyword">grid</span>.legnth || j&lt;<span class="number">0</span> || j&gt;=<span class="keyword">grid</span>[<span class="number">0</span>].length || <span class="keyword">grid</span>[i][j]==<span class="string">'0'</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">grid</span>[i][j]==<span class="string">'1'</span>) <span class="keyword">grid</span>[i][j]=<span class="string">'0'</span>;</div><div class="line">		disappear(<span class="keyword">grid</span>,i<span class="number">-1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i+<span class="number">1</span>,j);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j<span class="number">-1</span>);</div><div class="line">		disappear(<span class="keyword">grid</span>,i,j+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Number of I
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Add Binary</title>
    <link href="http://xinli90.com/2016/09/16/Add-Binary/"/>
    <id>http://xinli90.com/2016/09/16/Add-Binary/</id>
    <published>2016-09-17T02:51:17.000Z</published>
    <updated>2016-09-17T03:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="external">Leetcode-Add Binary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).     </p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Set a flag to track if we have the carry.</li>
<li>Each time we use a and b with the same index together and plus flag to calculate which number we should to add into String.  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar with Solution1, but combine all while loops together.</li>
<li>We can use StringBuilder.inset(0,num) method instead of String operation.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        String result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> &amp;&amp; b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">            b_index--;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            b_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag==<span class="number">1</span>? <span class="string">"1"</span>+result : result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> || b_index &gt;= <span class="number">0</span> || carry==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a_index &lt; <span class="number">0</span>? <span class="number">0</span> : a.charAt(a_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b_index &lt; <span class="number">0</span>? <span class="number">0</span> : b.charAt(b_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="keyword">sum</span>%<span class="number">2</span>);</div><div class="line">            carry = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/add-binary/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Add Binary&lt;/a&gt;.&lt;/p
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>First Bad Version</title>
    <link href="http://xinli90.com/2016/09/15/First-Bad-Version/"/>
    <id>http://xinli90.com/2016/09/15/First-Bad-Version/</id>
    <published>2016-09-15T23:39:44.000Z</published>
    <updated>2016-09-15T23:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.       </p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.      </p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Binary Search.</li>
<li>If mid is bad and the number which is previous mid is not bad, return it.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The isBadVersion API <span class="keyword">is</span> defined <span class="keyword">in</span> the parent <span class="keyword">class</span> VersionControl.</div><div class="line">      boolean isBadVersion(<span class="built_in">int</span> version); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution extends VersionControl &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> firstBadVersion(<span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="built_in">int</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = low+(high-low)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(isBadVersion(<span class="built_in">mid</span>)&amp;&amp;!isBadVersion(<span class="built_in">mid</span><span class="number">-1</span>)) return <span class="built_in">mid</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isBadVersion(<span class="built_in">mid</span>)) low = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = <span class="built_in">mid</span><span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        return low; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-First Bad V
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Top K Frequent Elements</title>
    <link href="http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/"/>
    <id>http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/</id>
    <published>2016-09-13T21:12:13.000Z</published>
    <updated>2016-09-13T21:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">Leetcode-Top K Frequent Elements</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, return the k most frequent elements.     </p>
<p>For example,<br>Given [1,1,1,2,2,3] and k = 2, return [1,2].</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.<br>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n)</li>
<li>Use HashMap to count the frequency of each number, key is number ,value is frequency</li>
<li>Create a array with List, the maximum size is the 1+length of nums. Because we need consider that we only have multiple one number. The index of this number is length.</li>
<li>Put the number which has the same frequency together.</li>
<li>At last from the end to start, add the small list into list until the list size is not less than k.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(n+nlogk)</li>
<li>Use MinHeap. Each time we poll minimum element from PriorityQueue. Then we can keep track of k most significant entries.</li>
<li>Iterate through the final heap and get the keys.</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(num))&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="built_in">map</span>.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;Integer&gt;[] bucket = <span class="keyword">new</span> List[nums.length+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)]==<span class="keyword">null</span>)&#123;</div><div class="line">                bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            &#125;</div><div class="line">            bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)].<span class="built_in">add</span>(<span class="built_in">key</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> index = nums.length; index&gt;=<span class="number">0</span> &amp;&amp; list.<span class="built_in">size</span>()&lt;k; index--) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[index]!=<span class="keyword">null</span>)&#123;</div><div class="line">                list.addAll(bucket[index]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">     <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; counterMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(counterMap.containsKey(num))&#123;</div><div class="line">                counterMap.put(num,counterMap.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                counterMap.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue()-b.getValue());</div><div class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : counterMap.entrySet()) &#123;</div><div class="line">        pq.offer(entry);</div><div class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k) pq.poll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">while</span>(!pq.isEmpty()) &#123;</div><div class="line">        res.<span class="built_in">add</span>(<span class="number">0</span>, pq.poll().getKey());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Top K
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Number of 1 Bits</title>
    <link href="http://xinli90.com/2016/09/11/Number-of-1-Bits/"/>
    <id>http://xinli90.com/2016/09/11/Number-of-1-Bits/</id>
    <published>2016-09-11T16:19:08.000Z</published>
    <updated>2016-09-11T17:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">Leetcode-Number of 1 Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(size of num)</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>“n &amp;= n - 1” is used to delete the right “1” of n. </li>
<li>Count its “1”</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> number = n;</div><div class="line">		<span class="keyword">while</span>(number!=<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">count</span> += (number&amp;<span class="number">1</span>);</div><div class="line">			<span class="comment">//unsigned operation</span></div><div class="line">			number &gt;&gt;&gt;= <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(; n!=<span class="number">0</span>; n = (n &amp; (n<span class="number">-1</span>)))&#123;</div><div class="line">			<span class="keyword">count</span>++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Number of 1 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Counting Bits</title>
    <link href="http://xinli90.com/2016/09/11/Counting-Bits/"/>
    <id>http://xinli90.com/2016/09/11/Counting-Bits/</id>
    <published>2016-09-11T14:35:49.000Z</published>
    <updated>2016-09-11T15:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="external">Leetcode-Count Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.</p>
<p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p>
<p>Follow up:</p>
<p>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>Space complexity should be O(n).<br>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</p>
<p>Hint:</p>
<p>You should make use of what you have produced already.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n*(size of num)), but time limit exceeded.</li>
<li>count each number from 0 to num</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar to solution1.</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Recursion.  Make Use of what I have produced already. </li>
<li>Time complexity is O(n)</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><p>The number in one range are equal to 1 plus all of the numbers in the ranges before it. For example, the numbers 8-15 have the same pattern as 0-7 but with a 1 at the front.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">count</span> += number%<span class="number">2</span>;</div><div class="line">				number /= <span class="number">2</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">if</span>((number &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">count</span>++;</div><div class="line">				<span class="keyword">count</span> &gt;&gt;= <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			result[i] = result[i/<span class="number">2</span>] + i%<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="comment">//default: result[0] = 0</span></div><div class="line">		<span class="keyword">int</span> pow = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=num; i++,j++) &#123;</div><div class="line">			<span class="keyword">if</span>(i == pow) &#123;</div><div class="line">				pow &lt;&lt;=<span class="number">1</span>;</div><div class="line">				j=<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = result[j]+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/counting-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Count Bits&lt;/a&gt;.
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JAVA Web 01</title>
    <link href="http://xinli90.com/2016/09/09/JAVA-Web-01/"/>
    <id>http://xinli90.com/2016/09/09/JAVA-Web-01/</id>
    <published>2016-09-09T20:42:11.000Z</published>
    <updated>2016-09-10T22:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>一、HttpServlet首先必须读取Http请求的内容。Servlet容器负责创建HttpServlet对象，并把Http请求直接封装到HttpServlet对象中，大大简化了HttpServlet解析请求数据的工作量。HttpServlet容器响应Web客户请求流程如下：     </p>
<p>1）Web客户向Servlet容器发出Http请求；</p>
<p>2）Servlet容器解析Web客户的Http请求；</p>
<p>3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；</p>
<p>4）Servlet容器创建一个HttpResponse对象；</p>
<p>5）Servlet容器调用HttpServlet的service方法，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；</p>
<p>6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；</p>
<p>7）HttpServlet调用HttpResponse的有关方法，生成响应数据；</p>
<p>8）Servlet容器把HttpServlet的响应结果传给Web客户。</p>
<p>二、创建HttpServlet的步骤——“四部曲”</p>
<p>1）扩展HttpServlet抽象类；</p>
<p>2）覆盖HttpServlet的部分方法，如覆盖doGet()或doPost()方法；</p>
<p>3）获取HTTP请求信息。通过HttpServletRequest对象来检索HTML表单所提交的数据或URL上的查询字符串；</p>
<p>4）生成HTTP响应结果。通过HttpServletResponse对象生成响应结果，它有一个getWriter()方法，该方法返回一个PrintWriter对象。</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>Servlet主要功能是接受从浏览器发送来的HTTP请求（request），并返回HTTP响应（response）,这个在service方法中完成，service中包含了从request对象获得客户端数据和向response对象创建输出。如果Servlet 继承了 HttpServlet,实现了doPost或doGet方法，那么service只能对POST或GET做出响应。</p>
<p>Example:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mypack;</div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet//第一步：扩展HttpServlet抽象类</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//第二步：覆盖doGet()方法</span></div><div class="line"> 	public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line"> 		<span class="comment">//第三步：获取HTTP请求中的参数信息</span></div><div class="line"> 		<span class="type">String</span> clientName = request.getParameter(<span class="string">"clientName"</span>);</div><div class="line"> 		<span class="keyword">if</span>(clientName!=<span class="literal">null</span>) &#123;</div><div class="line"> 			clientName = clientName+<span class="string">"a"</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="comment">//第四步：生成HTTP响应结果</span></div><div class="line"> 		<span class="type">String</span> title=<span class="string">"HelloServlet"</span>;</div><div class="line">  		<span class="type">String</span> heading1=<span class="string">"HelloServlet的doGet方法的输出："</span>;</div><div class="line">  </div><div class="line"> 		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"> 		<span class="type">PrintWriter</span> out = response.getWriter();</div><div class="line"> 		<span class="comment">//写HTML Page</span></div><div class="line"> 		out.print(<span class="string">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;"</span>+title+<span class="string">"&lt;/TITLE&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/HEAD&gt;&lt;BODY&gt;"</span>);</div><div class="line">  		out.print(heading1);</div><div class="line">  		out.println(<span class="string">"&lt;h1&gt;&lt;p&gt;"</span>+clientName+<span class="string">":您好&lt;/h1&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/BODY&gt;&lt;/HTML&gt;"</span>);</div><div class="line">  		</div><div class="line">  		out.close();</div><div class="line"> 	&#125;</div><div class="line">	public void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line">		doGet(request,response);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">在web.xml中添加</div><div class="line">&lt;servlet&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;servlet-<span class="class"><span class="keyword">class</span><span class="title">&gt;mypack</span>.<span class="title">HelloServlet&lt;/servlet-class&gt;</span></span></div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol>
<li><p>关于<code>response.setContentTyep()</code>： response的的设置对应你看到的html，setContentType对应这句<br><meta http-equiv="Content-type" content="text/html; charset=utf-8"><br>意思是告诉浏览器我的这个内容是文本html，然后字符编码是utf-8，如果你不告诉浏览器编码，那么浏览器，一般会根据系统默认编码来解析你的页面中的字符。 </p>
</li>
<li><p>Response：封装响应消息，设置响应消息</p>
<ul>
<li><p>设置响应行：HTTP/1.1 200 ok        </p>
<ul>
<li><p>setStatus(int code)：设置响应状态码      </p>
<ul>
<li><p>演示重定向：302<br>  //简化版的重定向<br>  response.sendRedirect(“<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</p>
<ul>
<li>实现原理<br>//1.设置响应状态码为 302<br>response.setStatus(302);<br>//2.设置响应头 location<br>response.setHeader(“location”, “<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>设置响应头：</p>
<ul>
<li>setHeader(String name,String value):     </li>
<li>setDateHeader(String name, long date) </li>
<li>setIntHeader(String name, int value) </li>
</ul>
</li>
<li><p>设置响应体：</p>
<ul>
<li><p>getOutputStream():发送字节数据</p>
<ul>
<li>验证码：<ul>
<li>防止恶意注册</li>
</ul>
</li>
</ul>
</li>
<li><p>getWriter():发送字符数据         </p>
<ul>
<li>发送中文数据时，需要在获取流之前设置编码方式，并且要告诉客户端浏览器，服务器使用的编码方式<br>  //简化版设置编码的方式<br>  response.setContentType(“text/html;charset=utf-8”);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><code>response.setHeader()</code>:     </li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">response<span class="selector-class">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"><span class="comment">//设置响应消息头： 2 秒后刷新到Demo5</span></div><div class="line">response<span class="selector-class">.setHeader</span>(<span class="string">"refresh"</span>,<span class="string">"2:URL=/day10_response/servlet/ResponseDemo5"</span>)</div><div class="line"><span class="comment">//设置编码</span></div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.getWriter</span>()<span class="selector-class">.write</span>(<span class="string">"Congratulation! Login sucessfully! Will jump to main page after 2 seconds"</span>);</div></pre></td></tr></table></figure>
<h3 id="四大域"><a href="#四大域" class="headerlink" title="四大域"></a>四大域</h3><ol>
<li>PageContext: is only used in JSP for variables that don’t get passed if the request is forwarded.</li>
<li>ServletRequest: data can only exists during one request for one user.</li>
<li>HttpSession: only one user can use. An application may manage many sessions.</li>
<li>ServletContext: All users in entire web application can use.</li>
</ol>
<h3 id="EL-and-JSTL"><a href="#EL-and-JSTL" class="headerlink" title="EL and JSTL"></a>EL and JSTL</h3><p>In order to make the code more readable, we use EL instead of JAVA in HTML. It’s more like HTML tags. It’s only used for getting data in page, request, session and applicaiton scopes.</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>JDBC 连接步骤：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.注册驱动</span></div><div class="line"><span class="keyword">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//2.获取与数据库的连接</span></div><div class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/day17"</span>,<span class="string">"root"</span>,<span class="string">"sorry"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//3.得到代表SQL语句的对象，向数据库发送语句</span></div><div class="line">Statement stmt = conn.createStatement()<span class="comment">;</span></div><div class="line"><span class="comment">//4.执行语句</span></div><div class="line">ResultSet rs = stmt.executeQuery(<span class="string">"select id from users"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//5.如果执行是查询语句，就会有结果集，处理</span></div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">	rs.getObject(<span class="string">"id"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//6.释放占用的资源</span></div><div class="line">rs.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">stmt.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">conn.<span class="keyword">close</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h4 id="抽取JDBC工具类模板"><a href="#抽取JDBC工具类模板" class="headerlink" title="抽取JDBC工具类模板"></a>抽取JDBC工具类模板</h4><p>1.创建数据库配置文件: dbcfg.properties</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">driverClass</span>=com.mysql.jdbc.Driver</div><div class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/cloud</div><div class="line"><span class="attr">user</span>=root</div><div class="line"><span class="attr">password</span>=sorry</div></pre></td></tr></table></figure>
<p>2.抽取模板</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="comment">//JDBC工具类:与数据库无关</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> &#123;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="comment">//读取配置文件</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InputStream <span class="keyword">in</span> = JdbcUtil.<span class="keyword">class</span>.getClassLoader().getResourceAsStream(<span class="string">"dbcfg.properties"</span>);</div><div class="line">			Properties props = <span class="keyword">new</span> Properties();</div><div class="line">			props.load(<span class="keyword">in</span>);</div><div class="line">			driverClass = props.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">			url = props.getProperty(<span class="string">"url"</span>);</div><div class="line">			user = props.getProperty(<span class="string">"user"</span>);</div><div class="line">			password = props.getProperty(<span class="string">"password"</span>);</div><div class="line">			Class.forName(driverClass);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Connection getConnection() <span class="keyword">throws</span> Exception&#123;</div><div class="line">		Connection conn = DriverManager.getConnection(url,user,password);</div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> release(ResultSet rs,Statement stmt,Connection conn)&#123;</div><div class="line">		<span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			rs = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				stmt.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			stmt = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			conn = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.When you want to use this util class:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line">PreparedStatement stmt = <span class="keyword">null</span>;</div><div class="line">ResultSet rs = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	conn = JdbcUtil.getConnection();</div><div class="line">	<span class="comment">//prevent SQL Injection</span></div><div class="line">	stmt = conn.prepareStatement(<span class="string">"select..."</span>);</div><div class="line">	rs = stmt.executeQuery();</div><div class="line">	<span class="comment">//...code</span></div><div class="line">	</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	JdbcUtil.release(rs,stmt,conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="大数据存储"><a href="#大数据存储" class="headerlink" title="大数据存储"></a>大数据存储</h4><p>We can use batch processing, each time we excute a list of inserts in batch.  Instead of hitting database once for each insert statement, we will use JDBC batch operation and optimize the performance. </p>
<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p><code>Stored procedures</code>: A benefit of stored procedures is that you can centralize data access logic into a single place that is then easy for DBA’s to optimize. Stored procedures also have a security benefit in that you can grant execute rights to a stored procedure but the user will not need to have read/write permissions on the underlying tables. This is a good first step against SQL Injection.</p>
<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p><code>Trigger</code>: A trigger is a special kind of stored procedure that automatically executes when an event occurs in the database server.</p>
<h4 id="DataSource-Pool"><a href="#DataSource-Pool" class="headerlink" title="DataSource Pool"></a>DataSource Pool</h4><p>新建一个连接池，每次从连接池去conn, 用完后放回池中，而不是直接conn.close()。<br>因此我们需要改写close()方法，使用包装设计模式(Decorator), implement Connection,改写close()方法，不用改变的方法直接调用原来的方法。</p>
<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>实现自动登录功能：<br>把用户名：Base64编码，把密码：MD5加密。存入Cookie中，登录时取出解析并与数据库中的用户名和密码比较。</p>
<p>Filter先执行，chain.doFilter(request,reponse)过滤之后再执行servlet.</p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol>
<li>表单的method必须是post</li>
<li>表单的enctype属性值必须是multipart/form-data</li>
<li>表单中提供input type=”file”类型的上传输入域</li>
</ol>
<h4 id="显示上传文件条"><a href="#显示上传文件条" class="headerlink" title="显示上传文件条"></a>显示上传文件条</h4><p>使用Ajax+Listener, 不断监听文件上传多少，使用ajax不断回取数据以及更新图样。      </p>
<h4 id="8个监听器"><a href="#8个监听器" class="headerlink" title="8个监听器"></a>8个监听器</h4><ol>
<li>ServletContextListener: 完成系统初始化工作</li>
<li>HttpSessionListener: 可以统计HttpSession对象的个数，分析某个时间段同时在线的人数</li>
<li>ServletRequestListener: 可以统计每个页面的访问次数</li>
<li>HttpSessionAttributeListener: 显示在线用户列表,session.setAttribute(“user”,user);</li>
<li>ServletContextAttributeListener</li>
<li>ServletRequestAttributeListener</li>
<li>HttpSessionBindingListener: 监测何时随着HttpSession绑定和解绑</li>
<li>HttpSessionActivationListener: 监测何时随着HttpSession激活和钝化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HttpServlet&quot;&gt;&lt;a href=&quot;#HttpServlet&quot; class=&quot;headerlink&quot; title=&quot;HttpServlet&quot;&gt;&lt;/a&gt;HttpServlet&lt;/h3&gt;&lt;p&gt;一、HttpServlet首先必须读取Http请求的内容。Servl
    
    </summary>
    
      <category term="J2EE" scheme="http://xinli90.com/categories/J2EE/"/>
    
    
      <category term="J2EE" scheme="http://xinli90.com/tags/J2EE/"/>
    
  </entry>
  
  <entry>
    <title>Implement strStr()</title>
    <link href="http://xinli90.com/2016/09/08/Implement-strStr/"/>
    <id>http://xinli90.com/2016/09/08/Implement-strStr/</id>
    <published>2016-09-08T19:30:00.000Z</published>
    <updated>2016-09-13T20:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="external">Leetcode- Implement strStr()</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement strStr().</p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>This question test how to use indexOf() in String.</p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Using subString() method. Iterate the array and compare needle with substring of haystack.</li>
<li>Time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the array and compare each character with needle.</li>
<li>The worest time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>KMP, time complexity is O(n)</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">    	<span class="keyword">int</span> hayStackSize =  haystack.length();</div><div class="line">    	<span class="keyword">int</span> needleSize = needle.length();</div><div class="line">    	<span class="built_in">if</span>(hayStackSize&lt;needleSize) <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    	<span class="built_in">else</span> <span class="built_in">if</span>(needleSize==<span class="number">0</span>) <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=hayStackSize-needleSize; i++) &#123;</div><div class="line">    		<span class="built_in">if</span>(haystack.subtring(i,i+needleSize).equals(needle)) <span class="built_in">return</span> i;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> <span class="number">-1</span>;;</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">        <span class="keyword">int</span> hay_size = haystack.length();</div><div class="line">        <span class="keyword">int</span> nee_size = needle.length();</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;= hay_size-nee_size ; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="built_in">while</span>(j&lt;nee_size &amp;&amp; haystack.charAt(i+j)==needle.charAt(j)) &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">if</span>(j==nee_size) <span class="built_in">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/implement-strstr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode- Implement s
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="http://xinli90.com/2016/09/07/Integer-to-Roman/"/>
    <id>http://xinli90.com/2016/09/07/Integer-to-Roman/</id>
    <published>2016-09-07T22:08:05.000Z</published>
    <updated>2016-09-07T22:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><p>This is a very smart solution to simulate the number;</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	public <span class="built_in">String</span> intToRoman(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="built_in">String</span>[] M = &#123;<span class="string">""</span>,<span class="string">"M"</span>,<span class="string">"MM"</span>,<span class="string">"MMM"</span>,<span class="string">"MMMM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] C = &#123;<span class="string">""</span>,<span class="string">"C"</span>,<span class="string">"CC"</span>,<span class="string">"CCC"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"DCC"</span>,<span class="string">"DCCC"</span>,<span class="string">"CM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] X = &#123;<span class="string">""</span>,<span class="string">"X"</span>,<span class="string">"XX"</span>,<span class="string">"XXX"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"LXX"</span>,<span class="string">"LXXX"</span>,<span class="string">"XC"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] I = &#123;<span class="string">""</span>,<span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>&#125;;</div><div class="line">        <span class="keyword">return</span> M[<span class="built_in">num</span>/<span class="number">1000</span>]+C[<span class="built_in">num</span>%<span class="number">1000</span>/<span class="number">100</span>]+X[<span class="built_in">num</span>%<span class="number">100</span>/<span class="number">10</span>]+I[<span class="built_in">num</span>%<span class="number">10</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Roman to Int
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://xinli90.com/2016/09/07/Roman-to-Integer/"/>
    <id>http://xinli90.com/2016/09/07/Roman-to-Integer/</id>
    <published>2016-09-07T18:04:36.000Z</published>
    <updated>2016-09-07T22:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1:"></a>Solution1:</h4><ol>
<li>The character which is greater precede the smaller one, add the original number. Otherwise, add the number which minus previous one.</li>
<li>Using Switch method to choose the right number to add based on the different character ordering. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2:"></a>Solution2:</h4><ol>
<li>Maintain previous pointer and current pointer, if current element is less than previous one, add it.  </li>
<li>Otherwise, minus the previous one and add the difference of current and previous element.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">		<span class="keyword">char</span> previous = <span class="string">'\0'</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="built_in">switch</span>(c) &#123;</div><div class="line">				<span class="built_in">case</span> <span class="string">'I'</span>: num++; <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'V'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">3</span> : <span class="number">5</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'X'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">8</span> : <span class="number">10</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'L'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">30</span> : <span class="number">50</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'C'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">80</span> : <span class="number">100</span>;</div><div class="line">						  <span class="built_in">break</span>;		  </div><div class="line">				<span class="built_in">case</span> <span class="string">'D'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">300</span> : <span class="number">500</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'M'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">800</span> : <span class="number">1000</span>;</div><div class="line">						  <span class="built_in">break</span>;	</div><div class="line">				<span class="built_in">default</span>: <span class="built_in">return</span> <span class="number">0</span>;	  </div><div class="line">			&#125;</div><div class="line">			previous = c;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="keyword">int</span> cur = <span class="built_in">map</span>.<span class="built_in">get</span>(c);</div><div class="line">			<span class="built_in">if</span>(cur&lt;=pre) sum += cur;</div><div class="line">			<span class="built_in">else</span> sum = sum - pre + cur - pre;</div><div class="line">			pre = cur;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Roman to Int
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
</feed>
