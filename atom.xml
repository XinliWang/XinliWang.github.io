<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinli&#39;s Blog</title>
  <subtitle>Coding World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinli90.com/"/>
  <updated>2016-11-05T20:46:25.000Z</updated>
  <id>http://xinli90.com/</id>
  
  <author>
    <name>Xinli Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>One Edit Distance</title>
    <link href="http://xinli90.com/2016/11/05/One-Edit-Distance/"/>
    <id>http://xinli90.com/2016/11/05/One-Edit-Distance/</id>
    <published>2016-11-05T20:27:18.000Z</published>
    <updated>2016-11-05T20:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/one-edit-distance/" target="_blank" rel="external">Leetcode - One Edit Distance</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings S and T, determine if they are both one edit distance apart.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>In order to compare easily, be sure the longer string first.</li>
<li>When find out the different character, compare their remaining string.</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">	public boolean isOneEditDistance(String s, String t) &#123;</div><div class="line">		<span class="keyword">if</span>(s.<span class="built_in">length</span>() &lt; t.<span class="built_in">length</span>()) &#123;</div><div class="line">			<span class="built_in">return</span> isOneEditDistance(t,s);</div><div class="line">		&#125;	</div><div class="line">		int i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(i &lt; t.<span class="built_in">length</span>()) &#123;</div><div class="line">			<span class="keyword">if</span>(s.charAt(i) != t.charAt(i)) &#123;</div><div class="line">				<span class="keyword">if</span>(s.<span class="built_in">length</span>() == t.<span class="built_in">length</span>()) &#123;</div><div class="line">					<span class="built_in">return</span> s.<span class="built_in">substring</span>(i+<span class="number">1</span>).equals(t.<span class="built_in">substring</span>(i+<span class="number">1</span>));</div><div class="line">				&#125;<span class="keyword">else</span> &#123;</div><div class="line">					<span class="built_in">return</span> s.<span class="built_in">substring</span>(i+<span class="number">1</span>).equals(t.<span class="built_in">substring</span>(i));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		//prevent s <span class="built_in">is</span> longer than t by <span class="number">1</span> character</div><div class="line">		<span class="built_in">return</span> i==(s.<span class="built_in">length</span>()-<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/one-edit-distance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - One Edit 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Read N Characters Given Read4</title>
    <link href="http://xinli90.com/2016/11/05/Read-N-Characters-Given-Read4/"/>
    <id>http://xinli90.com/2016/11/05/Read-N-Characters-Given-Read4/</id>
    <published>2016-11-05T17:58:25.000Z</published>
    <updated>2016-11-05T18:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/read-n-characters-given-read4/" target="_blank" rel="external">Leetcode - Read N Characters Given Read4</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The API: int read4(char *buf) reads 4 characters at a time from a file.</p>
<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>
<p>By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.</p>
<p>Note:<br>The read function will only be called once for each test case.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>这一题意思是：有一个文件，读取n个字符，n可能会比文件总共包含的字符数要大，read4 API通常读4个字符，如果读到最后文件中的字符少于4个则返回剩下数目。所以这里需要留意两点：<br>1.n比文件字符数小时，每次读4个可能会超出n<br>2.n比文件字符数大时，只读到文件末尾  </p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use <code>System.arraycopy</code> to copy from read4 to buf.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Use AC solution.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The read4 API is defined in the parent class Reader4.</span></div><div class="line">      int read4(char[] buf); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> <span class="keyword">extends</span> <span class="title">Reader4</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param buf Destination buffer</div><div class="line">     * @param n   Maximum number of characters to read</div><div class="line">     * @return    The number of characters read</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> read(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> n) &#123;</div><div class="line">    	<span class="keyword">int</span> curLen = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(curLen &lt; n) &#123;</div><div class="line">    		<span class="keyword">char</span>[] tempBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</div><div class="line">    		<span class="comment">//read4: read from file and save into tempBuf, return the number of read.</span></div><div class="line">    		<span class="keyword">int</span> len = read4(tempBuf);</div><div class="line">    		System.arraycopy(tempBuf,<span class="number">0</span>,buf,curLen,Math.min(len,n-curLen));</div><div class="line">    		<span class="keyword">if</span>(len&lt;<span class="number">4</span>) <span class="keyword">return</span> Math.min(curLen+len,n);</div><div class="line">    		curLen += <span class="number">4</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> <span class="keyword">extends</span> <span class="title">Reader4</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param buf Destination buffer</div><div class="line">     * @param n   Maximum number of characters to read</div><div class="line">     * @return    The number of characters read</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> read(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> n) &#123;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">4</span>;</div><div class="line">    	<span class="comment">//if count!=4, it represents read to the end of file or the end of n characters</span></div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">count</span>==<span class="number">4</span>) &#123;</div><div class="line">    		<span class="keyword">char</span>[] tempBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</div><div class="line">    		<span class="keyword">count</span> = read4(tempBuf);</div><div class="line">    		<span class="comment">//prevent from getting more than what we need</span></div><div class="line">    		<span class="keyword">count</span> = Math.min(<span class="keyword">count</span>,n-<span class="keyword">index</span>);</div><div class="line">    		<span class="comment">//copy from tempBuf to buf</span></div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">count</span>; i++) &#123;</div><div class="line">    			buf[<span class="keyword">index</span>++] = tempBuf[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">index</span>;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/read-n-characters-given-read4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Size Subarray Sum Equals k</title>
    <link href="http://xinli90.com/2016/11/03/Maximum-Size-Subarray-Sum-Equals-k/"/>
    <id>http://xinli90.com/2016/11/03/Maximum-Size-Subarray-Sum-Equals-k/</id>
    <published>2016-11-03T16:47:49.000Z</published>
    <updated>2016-11-03T17:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn’t one, return 0 instead.   </p>
<p>Note:<br>The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.  </p>
<p>Example 1:<br>Given nums = [1, -1, 5, -2, 3], k = 3,<br>return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)  </p>
<p>Example 2:<br>Given nums = [-2, -1, 2, 1], k = 1,<br>return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:<br>Can you do it in O(n) time?   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Try all possible combinations and get the maximum one.   </li>
<li>Time complexity is O(n^2)    </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>The main point is we store the sum of 0 - i elements for each location in array. Then we only need to check if sum[j] - sum[i] == k, it represents the sum of i+1 to j.</li>
<li>We use HashMap to get the constant time for the check stuff.</li>
<li>Time complexity is O(n+n+n)</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxSubArrayLen(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = nums[i];</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">sum</span>==k) maxLen = Math.max(maxLen,<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.length; j++) &#123;</div><div class="line">                <span class="keyword">sum</span> += nums[j];</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">sum</span> == k) &#123;</div><div class="line">                    maxLen = Math.max(maxLen,j-i+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxSubArrayLen(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">		<span class="comment">//in order to preprocess the data easier,assign 0 to sum[0]</span></div><div class="line">		<span class="keyword">int</span>[] <span class="keyword">sum</span> = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</div><div class="line">		<span class="keyword">sum</span>[<span class="number">0</span>] = <span class="number">0</span>;	</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">sum</span>[i] = <span class="keyword">sum</span>[i<span class="number">-1</span>] + nums[i<span class="number">-1</span>];</div><div class="line">		&#125;</div><div class="line">		Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			map.put(<span class="keyword">sum</span>[i],i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			Integer val = map.get(<span class="keyword">sum</span>[i]+k);</div><div class="line">			<span class="keyword">if</span>(val!=<span class="keyword">null</span> &amp;&amp; val.intValue()-i&gt;maxLen) &#123;</div><div class="line">				maxLen = val.intValue()-i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> maxLen;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Maximum Suba
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Vertical Order Traversal</title>
    <link href="http://xinli90.com/2016/11/02/Binary-Tree-Vertical-Order-Traversal/"/>
    <id>http://xinli90.com/2016/11/02/Binary-Tree-Vertical-Order-Traversal/</id>
    <published>2016-11-02T16:02:02.000Z</published>
    <updated>2016-11-02T16:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-vertical-order-traversal/" target="_blank" rel="external">Leetcode - Binary Tree Vertical Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the vertical order traversal of its nodes’ values. (ie, from top to bottom, column by column).</p>
<p>If two nodes are in the same row and column, the order should be from left to right.</p>
<p>Examples:</p>
<p>Given binary tree [3,9,20,null,null,15,7],<br>   3<br>  /\<br> /  \<br> 9  20<br>    /\<br>   /  \<br>  15   7<br>return its vertical order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">9</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">15</span>],</div><div class="line">  [<span class="number">20</span>],</div><div class="line">  [<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given binary tree [3,9,8,4,0,1,7],</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   /<span class="string">\</span></div><div class="line">  /  <span class="string">\</span></div><div class="line">  <span class="number">9</span>   <span class="number">8</span></div><div class="line"> /<span class="string">\</span>  /<span class="string">\</span></div><div class="line">/  <span class="string">\/</span>  <span class="string">\</span></div><div class="line"><span class="number">4</span>  <span class="number">01</span>   <span class="number">7</span></div></pre></td></tr></table></figure>
<p>return its vertical order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">4</span>],</div><div class="line">  [<span class="number">9</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">8</span>],</div><div class="line">  [<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given binary tree [3,9,8,4,0,1,7,null,null,null,2,5] (0’s right child is 2 and 1’s left child is 5),</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">     <span class="number">3</span></div><div class="line">    /<span class="string">\</span></div><div class="line">   /  <span class="string">\</span></div><div class="line">   <span class="number">9</span>   <span class="number">8</span></div><div class="line">  /<span class="string">\</span>  /<span class="string">\</span></div><div class="line"> /  <span class="string">\/</span>  <span class="string">\</span></div><div class="line"> <span class="number">4</span>  <span class="number">01</span>   <span class="number">7</span></div><div class="line">    /<span class="string">\</span></div><div class="line">   /  <span class="string">\</span></div><div class="line">   <span class="number">5</span>   <span class="number">2</span></div><div class="line"></div><div class="line">``<span class="javascript"><span class="string">` </span></span></div><div class="line">   </div><div class="line">return its vertical order traversal as:</div></pre></td></tr></table></figure>
<p>[<br>  [4],<br>  [9,5],<br>  [3,0,1],<br>  [8,2],<br>  [7]<br>]</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">## Solution</span></div><div class="line">      </div><div class="line"><span class="comment">### Analysis</span></div><div class="line"><span class="comment">#### Solution1: BFS           </span></div><div class="line"><span class="number">1.</span> Use one Queue <span class="keyword">to</span> traverse all nodes</div><div class="line"><span class="number">2.</span> Use another Queue <span class="keyword">to</span> <span class="built_in">record</span> <span class="keyword">its</span> location</div><div class="line"><span class="number">3.</span> Use TreeMap <span class="keyword">to</span> <span class="built_in">record</span> <span class="keyword">the</span> <span class="literal">result</span>.</div><div class="line"></div><div class="line"><span class="comment">#### Solution2: BFS</span></div><div class="line">Similar solution <span class="keyword">with</span> solution1, ues HashMap <span class="keyword">and</span> range <span class="keyword">to</span> <span class="keyword">instead of</span> TreeMap.</div><div class="line">It <span class="keyword">is</span> more efficient. Because all operation <span class="keyword">in</span> TreeMap <span class="keyword">is</span> O(lgn).</div></pre></td></tr></table></figure>
<p>/**</p>
<ul>
<li>Definition for a binary tree node.</li>
<li>public class TreeNode {</li>
<li>int val;</li>
<li>TreeNode left;</li>
<li>TreeNode right;</li>
<li>TreeNode(int x) { val = x; }</li>
<li>}<br>*/</li>
</ul>
<p>public class Solution1 {<br>    public List<list<integer>&gt; verticalOrder(TreeNode root) {<br>        List<list<integer>&gt; result = new ArrayList&lt;&gt;();<br>        if(root==null) return result;<br>        Queue<integer> locations = new LinkedList&lt;&gt;();<br>        Queue<treenode> nodes = new LinkedList&lt;&gt;();<br>        Map<integer,list<integer>&gt; map= new TreeMap&lt;&gt;();<br>        nodes.offer(root);<br>        locations.offer(0);<br>        while(!nodes.isEmpty()) {<br>            TreeNode node = nodes.poll();<br>            int location = locations.poll();<br>            if(!map.containsKey(location)) {<br>                map.put(location, new ArrayList&lt;&gt;());<br>            }<br>            map.get(location).add(node.val);</integer,list<integer></treenode></integer></list<integer></list<integer></p>
<pre><code>        if(node.left!=null) {
            locations.offer(location-1);
            nodes.offer(node.left);
        }
        if(node.right!=null) {
            locations.offer(location+1);
            nodes.offer(node.right);
        }
    }
    result = new ArrayList(map.values());
    return result;
}
</code></pre><p>}</p>
<p>public class Solution2 {<br>    public List<list<integer>&gt; verticalOrder(TreeNode root) {<br>        List<list<integer>&gt; result = new ArrayList&lt;&gt;();<br>        if(root==null) return result;<br>        Queue<integer> locations = new LinkedList&lt;&gt;();<br>        Queue<treenode> nodes = new LinkedList&lt;&gt;();<br>        Map<integer,list<integer>&gt; map= new HashMap&lt;&gt;();<br>        nodes.offer(root);<br>        locations.offer(0);<br>        int min = 0, max = 0;<br>        while(!nodes.isEmpty()) {<br>            TreeNode node = nodes.poll();<br>            int location = locations.poll();<br>            if(!map.containsKey(location)) {<br>                map.put(location, new ArrayList&lt;&gt;());<br>            }<br>            map.get(location).add(node.val);</integer,list<integer></treenode></integer></list<integer></list<integer></p>
<pre><code>        if(node.left!=null) {
            locations.offer(location-1);
            nodes.offer(node.left);
            min = Math.min(min,location-1);
        }
        if(node.right!=null) {
            locations.offer(location+1);
            nodes.offer(node.right);
            max = Math.max(max,location+1);
        }
    }
    for(int i=min; i&lt;=max; i++) {
        result.add(map.get(i));
    }
    return result;
}
</code></pre><p>}</p>
<p>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/binary-tree-vertical-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;L
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sparse Matrix Multiplication</title>
    <link href="http://xinli90.com/2016/11/01/Sparse-Matrix-Multiplication/"/>
    <id>http://xinli90.com/2016/11/01/Sparse-Matrix-Multiplication/</id>
    <published>2016-11-01T20:56:11.000Z</published>
    <updated>2016-11-02T03:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="external">Leetcode-String to Integer (atoi)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two sparse matrices A and B, return the result of AB.    </p>
<p>You may assume that A’s column number is equal to B’s row number.</p>
<p>Example:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">A = [</div><div class="line">  [ <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">3</span>]</div><div class="line">]</div><div class="line"></div><div class="line">B = [</div><div class="line">  [ <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span> ],</div><div class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ],</div><div class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ]</div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line">     |  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> |   | <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |   |  <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |</div><div class="line">AB = | <span class="number">-1</span> <span class="number">0</span> <span class="number">3</span> | x | <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | = | <span class="number">-7</span> <span class="number">0</span> <span class="number">3</span> |</div><div class="line">                  | <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> |</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>The basic logic implication of calculation.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>For Each element with the same row, we multiply each time.<br>So we can multiply one by one and check if the element is non-zero digit.</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int<span class="comment">[]</span><span class="comment">[]</span> multiply(int<span class="comment">[]</span><span class="comment">[]</span> A, int<span class="comment">[]</span><span class="comment">[]</span> B) &#123;</div><div class="line">        int<span class="comment">[]</span><span class="comment">[]</span> result = new int<span class="comment">[A.length]</span><span class="comment">[B<span class="comment">[0]</span>.length]</span>;</div><div class="line">        for(int i=0; i&lt;A.length; i++) &#123;</div><div class="line">            for(int j=0; j&lt;B<span class="comment">[0]</span>.length; j++) &#123;</div><div class="line">                int sum = 0;</div><div class="line">                for(int m = 0; m&lt;B.length; m++) &#123;</div><div class="line">                    if(A<span class="comment">[i]</span><span class="comment">[m]</span>!=0 &amp;&amp; B<span class="comment">[m]</span><span class="comment">[j]</span>!=0) &#123;</div><div class="line">                    	sum += A<span class="comment">[i]</span><span class="comment">[m]</span> * B<span class="comment">[m]</span><span class="comment">[j]</span>; </div><div class="line">                    &#125;   </div><div class="line">                &#125;</div><div class="line">                result<span class="comment">[i]</span><span class="comment">[j]</span> = sum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    public int<span class="comment">[]</span><span class="comment">[]</span> multiply(int<span class="comment">[]</span><span class="comment">[]</span> A, int<span class="comment">[]</span><span class="comment">[]</span> B) &#123;</div><div class="line">    	int<span class="comment">[]</span><span class="comment">[]</span> result = new int<span class="comment">[A.length]</span><span class="comment">[B<span class="comment">[0]</span>.length]</span>;</div><div class="line">    	for(int i=0; i&lt;A.length; i++) &#123;</div><div class="line">            for(int j=0; j&lt;A<span class="comment">[0]</span>.length; j++) &#123; //A's column, also B's row</div><div class="line">            	if(A<span class="comment">[i]</span><span class="comment">[j]</span> != 0) &#123;</div><div class="line">            		for(int m = 0; m&lt;B<span class="comment">[0]</span>.length; m++) &#123;  // B's column</div><div class="line">            			if(B<span class="comment">[j]</span><span class="comment">[m]</span> != 0) &#123;</div><div class="line">            				result<span class="comment">[i]</span><span class="comment">[m]</span> += A<span class="comment">[i]</span><span class="comment">[j]</span> * B<span class="comment">[j]</span><span class="comment">[m]</span>;</div><div class="line">            			&#125;</div><div class="line">            		&#125;</div><div class="line">            	&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-String
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Move Zeroes</title>
    <link href="http://xinli90.com/2016/11/01/Move-Zeroes/"/>
    <id>http://xinli90.com/2016/11/01/Move-Zeroes/</id>
    <published>2016-11-01T16:18:54.000Z</published>
    <updated>2016-11-01T18:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="external">Leetcode - Move Zeroes</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].   </p>
<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Maintain two pointers, one points to <code>0</code>, one interate the whole array to find non zero digit to swap.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> void moveZeroes(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==<span class="literal">null</span> || nums.length&lt;<span class="number">2</span>) return;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>,<span class="built_in">right</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">right</span> &lt; nums.length) &#123;</div><div class="line">        	<span class="keyword">if</span>(nums[<span class="built_in">right</span>]==<span class="number">0</span>) &#123;</div><div class="line">        		<span class="keyword">if</span>(nums[<span class="built_in">left</span>]!=<span class="number">0</span>) &#123;</div><div class="line">        			<span class="built_in">left</span> = <span class="built_in">right</span>;</div><div class="line">        		&#125;</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		<span class="keyword">if</span>(nums[<span class="built_in">left</span>] == <span class="number">0</span>) &#123;</div><div class="line">        			swap(nums,<span class="built_in">left</span>,<span class="built_in">right</span>);</div><div class="line">        			<span class="built_in">left</span>++;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">right</span>++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> void swap(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</div><div class="line">    	<span class="built_in">int</span> temp = nums[a];</div><div class="line">    	nums[a] = nums[b];</div><div class="line">    	nums[b] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the array, find the location of first <code>0</code>, maintain its index and assign the next non-zero digit to their original location one by one.</li>
<li>Assign <code>0</code> to the remaining locations.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution2</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span>(<span class="params"><span class="keyword">int</span>[] nums</span>) </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(nums==<span class="literal">null</span> || nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    	<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="keyword">if</span>(nums[i] != <span class="number">0</span>) &#123;</div><div class="line">    			nums[j++] = nums[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">for</span>(; j&lt;nums.length; j++) &#123;</div><div class="line">    		nums[j] = <span class="number">0</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/move-zeroes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Move Zeroes&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Day20 iOS Design Pattern</title>
    <link href="http://xinli90.com/2016/11/01/Day20-iOS-Design-Pattern/"/>
    <id>http://xinli90.com/2016/11/01/Day20-iOS-Design-Pattern/</id>
    <published>2016-11-01T14:04:13.000Z</published>
    <updated>2016-11-01T16:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是关于iOS Design Pattern的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种Design Pattern特性</li>
<li>总结Design Pattern用法和常见情景</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h3><p>用clone的方式来创建<code>重复</code>对象，避免一直创建对象所带来的资源耗损。并且能够简化复杂对象的创建过程。<br>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>例如发送广告信息给500万用户，如果一条一条发的话可能需要好几天时间，相当于获取一个个创建的model object中信息并输出。如果创建多线程同时发送，并且避免创建500W个object带来的资源耗损，可以使用一个通用的object，然后每次copy得到新的实例而不是使用构造函数得到新实例，再修改里面一部分variable并且不会影响原Object来实现。</p>
<p>这就要求： 首先Object class 继承 Cloneable接口.     </p>
<p>注意： 这里的clone只能是shallow copy, 所以只能拷贝primitive type的值和对象、数组的reference，我们需要对 对象、数组进行deep copy.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; ars; </div><div class="line">	<span class="keyword">public</span> Message()&#123;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> Message <span class="keyword">clone</span>() &#123;	</div><div class="line">		Message message = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			message = (Message)super.<span class="keyword">clone</span>();</div><div class="line">			message.ars = (ArrayList&lt;String&gt;) this.ars.<span class="keyword">clone</span>();</div><div class="line">		&#125; <span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候则可以只创建一个新的object，之后不断clone来创建新的object.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Message</span> <span class="keyword">message</span> = new <span class="keyword">Message</span>();</div><div class="line">int i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</div><div class="line">	<span class="keyword">Message</span> cloneMes = <span class="keyword">message</span>.clone();</div><div class="line">	....</div><div class="line">	sendMessage(cloneMes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>在实现clone时可能需要实现复杂的代码，多重嵌套引用的deep copy很麻烦；     </li>
<li>每一个类都需要配置clone方法，当对已有类进行改造是，需要修改源代码，违背“开闭原则”.      </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是关于iOS Design Pattern的介绍和用途.&lt;/p&gt;
&lt;h2 id=&quot;攻略模板&quot;&gt;&lt;a href=&quot;#攻略模板&quot; class=&quot;headerlink&quot; title=&quot;攻略模板&quot;&gt;&lt;/a&gt;攻略模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结归纳各种Design Patte
    
    </summary>
    
      <category term="iOS" scheme="http://xinli90.com/categories/iOS/"/>
    
    
      <category term="Seeking Job" scheme="http://xinli90.com/tags/Seeking-Job/"/>
    
      <category term="iOS" scheme="http://xinli90.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Product of Array Except Self</title>
    <link href="http://xinli90.com/2016/10/30/Product-of-Array-Except-Self/"/>
    <id>http://xinli90.com/2016/10/30/Product-of-Array-Except-Self/</id>
    <published>2016-10-30T19:48:21.000Z</published>
    <updated>2016-10-30T20:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="external">Leetcode - Product of Array Except Self</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>Solve it without division and in O(n).</p>
<p>For example, given [1,2,3,4], return [24,12,8,6].</p>
<p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Let’s take an example:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array:  1        2       3      4       5</div><div class="line">Left:            1      1<span class="emphasis">*2   1*</span>2<span class="emphasis">*3   1*</span>2<span class="emphasis">*3*</span>4</div><div class="line">Right: 2<span class="emphasis">*3*</span>4<span class="emphasis">*5  3*</span>4<span class="emphasis">*5   4*</span>5     5</div></pre></td></tr></table></figure>
<p>Given array[1, 2, 3, 4, 5], regarding the third number 3, the product of array except 3 is 1 <em> 2 and right is 4 </em> 5. The product is left * right.</p>
<p>So time complexity is O(n+n), the extra space is O(1).</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Similar with Solution1, instead of variable temp, we use result[0] to store right product.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class <span class="type">Solution1</span> &#123;</div><div class="line">    public <span class="built_in">int</span>[] productExceptSelf(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">    	<span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">    	<span class="literal">result</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="literal">result</span>[i] = <span class="literal">result</span>[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>];</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">int</span> temp = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    		<span class="literal">result</span>[i] *= temp;</div><div class="line">    		temp *= nums[i];</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class <span class="type">Solution2</span> &#123;</div><div class="line">    public <span class="built_in">int</span>[] productExceptSelf(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">    	<span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">    	<span class="literal">result</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="literal">result</span>[i] = <span class="literal">result</span>[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>];</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    		<span class="literal">result</span>[i] *= <span class="literal">result</span>[<span class="number">0</span>];</div><div class="line">    		<span class="literal">result</span>[<span class="number">0</span>] *= nums[i];</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/product-of-array-except-self/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Odd Even Linked List</title>
    <link href="http://xinli90.com/2016/10/29/Odd-Even-Linked-List/"/>
    <id>http://xinli90.com/2016/10/29/Odd-Even-Linked-List/</id>
    <published>2016-10-29T18:17:39.000Z</published>
    <updated>2016-10-29T18:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/odd-even-linked-list/" target="_blank" rel="external">Leetcode - Odd Even Linked List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>
<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>
<p>Example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Given <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL,</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>-&gt;NULL.</div></pre></td></tr></table></figure>
<p>Note:<br>The relative order inside both the even and odd groups should remain as it was in the input.<br>The first node is considered odd, the second node even and so on …</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>connect odd and even node respectively</li>
<li>And then connect the last odd with the first even node.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">	<span class="keyword">public</span> ListNode oddEvenList(ListNode head) &#123;</div><div class="line">		<span class="keyword">if</span>(head==<span class="literal">null</span>) return head;</div><div class="line">		ListNode odd = head, even = head.<span class="keyword">next</span>, evenHead = even;</div><div class="line">		<span class="keyword">while</span>(even!=<span class="literal">null</span> &amp;&amp; even.<span class="keyword">next</span>!=<span class="literal">null</span>) &#123;</div><div class="line">			odd.<span class="keyword">next</span> = odd.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line">			even.<span class="keyword">next</span> = even.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line">			odd = odd.<span class="keyword">next</span>;</div><div class="line">			even = even.<span class="keyword">next</span>;</div><div class="line">		&#125;</div><div class="line">		odd.<span class="keyword">next</span> = evenHead;</div><div class="line">		return head;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/odd-even-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Odd Ev
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sum of Two Integers</title>
    <link href="http://xinli90.com/2016/10/28/Sum-of-Two-Integers/"/>
    <id>http://xinli90.com/2016/10/28/Sum-of-Two-Integers/</id>
    <published>2016-10-28T15:09:15.000Z</published>
    <updated>2016-10-28T15:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sum-of-two-integers/" target="_blank" rel="external">Leetcode - Sum of Two Integers</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>
<p>Example:<br>Given a = 1 and b = 2, return 3.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>First recall addition in primary school. e.g. 26 + 147 = 173. You start by 6 + 7 = 13, so you put the 3 in the sum, and carry the one, and so forth…</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">carry: <span class="number">1</span></div><div class="line"><span class="selector-tag">a</span>:     <span class="number">26</span></div><div class="line"><span class="selector-tag">b</span>:    <span class="number">147</span></div><div class="line">sum   <span class="number">173</span></div></pre></td></tr></table></figure>
<ol>
<li>First find the carry: <code>int carry = (a &amp; b)</code></li>
<li>Then store the first digit position, and store it in <code>a = (a ^ b)</code></li>
<li>Shift the carry to the next digit position: <code>carry &lt;&lt; 1</code></li>
<li>The while loop continues as long as there are carries that has bot been included in the sum.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</div><div class="line">    	<span class="keyword">while</span>(b != <span class="number">0</span>) &#123;</div><div class="line">    		<span class="keyword">int</span> carry = (a &amp; b);</div><div class="line">    		a = (a ^ b);</div><div class="line">    		b = carry &lt;&lt; <span class="number">1</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/sum-of-two-integers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Sum of 
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Unique Paths II</title>
    <link href="http://xinli90.com/2016/10/27/Unique-Paths-II/"/>
    <id>http://xinli90.com/2016/10/27/Unique-Paths-II/</id>
    <published>2016-10-27T19:25:18.000Z</published>
    <updated>2016-10-27T19:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/unique-paths-ii/" target="_blank" rel="external">Leetcode - Unique Paths II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Follow up for “Unique Paths”:    </p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?   </p>
<p>An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p>
<p>For example,<br>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</div><div class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</div><div class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The total number of unique paths is 2.</p>
<p>Note: m and n will be at most 100.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents the number of unique paths from start to coordinate(x,y)</li>
<li>Function: f[i][j] = if(obstacleGrid[i][j] == 0) f[i-1][j] + f[i][j-1]  (思考：怎样到达(i,j)这一步，到达这一步之前我们有多少选择)</li>
<li>Initialize: if(obstacleGrid[i][j] == 0) f[i][0] = 1; f[0][j] = 1</li>
<li>Answer: f[m-1][n-1]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span>(<span class="params"><span class="keyword">int</span>[][] obstacleGrid</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = obstacleGrid.length;</div><div class="line">        <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span> [m][n];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize   </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</div><div class="line">                f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</div><div class="line">                f[<span class="number">0</span>][j] = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">0</span>) &#123;</div><div class="line">                    f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>];      </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/unique-paths-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Unique Path
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Factorial Trailing Zeroes</title>
    <link href="http://xinli90.com/2016/10/27/Factorial-Trailing-Zeroes/"/>
    <id>http://xinli90.com/2016/10/27/Factorial-Trailing-Zeroes/</id>
    <published>2016-10-27T15:25:13.000Z</published>
    <updated>2016-10-27T15:50:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<p>Note: Your solution should be in logarithmic time complexity.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>n! = 2 <em> 3 </em> 4 <em> 5 … </em> (5 <em> 2) </em> … <em> (5^2 </em> 1) <em> … </em> (5^2 * 2) …</li>
<li>Each time, we divide n by 5 and collect its quotient</li>
<li>Time complexity is lg5N.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">    	<span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</div><div class="line">    		result += n/<span class="number">5</span>;</div><div class="line">    		n /= <span class="number">5</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-First Bad V
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Decode Ways</title>
    <link href="http://xinli90.com/2016/10/25/Decode-Ways/"/>
    <id>http://xinli90.com/2016/10/25/Decode-Ways/</id>
    <published>2016-10-26T02:11:12.000Z</published>
    <updated>2016-10-26T02:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/decode-ways/" target="_blank" rel="external">Leetcode - Decode Ways</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'A'</span> -&gt; <span class="number">1</span></div><div class="line"><span class="string">'B'</span> -&gt; <span class="number">2</span></div><div class="line">...</div><div class="line"><span class="string">'Z'</span> -&gt; <span class="number">26</span></div></pre></td></tr></table></figure>
<p>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,<br>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).</p>
<p>The number of ways decoding “12” is 2.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents the number of ways to decode it.</li>
<li>Function: f[i] = f[i] + if(前一位数字&gt;0) f[i-1] + if(10 &lt;= 前两位数字 &lt;= 26) f[i-2]</li>
<li>Initialize: f[0] = 1 , f[1] = if(前一位数字 == 0) 0 ， else 1. </li>
<li>Answer: f[s.length()]</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> numDecodings(<span class="keyword">String</span> s) &#123;</div><div class="line">       <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       <span class="built_in">int</span> len = s.length();</div><div class="line">       <span class="comment">//initialize</span></div><div class="line">       <span class="built_in">int</span>[] f = <span class="keyword">new</span> <span class="built_in">int</span>[len+<span class="number">1</span>];</div><div class="line">       f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">       f[<span class="number">1</span>] = s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">2</span>; i &lt;= len; i++) &#123;</div><div class="line">       		<span class="built_in">int</span> first = Integer.parseInt(s.substring(i<span class="number">-1</span>,i));</div><div class="line">       		<span class="built_in">int</span> <span class="built_in">second</span> = Integer.parseInt(s.substring(i<span class="number">-2</span>,i));</div><div class="line">       		<span class="keyword">if</span>(first&gt;<span class="number">0</span>) f[i] += f[i<span class="number">-1</span>];</div><div class="line">       		<span class="keyword">if</span>(<span class="built_in">second</span>&gt;=<span class="number">10</span> &amp;&amp; <span class="built_in">second</span>&lt;=<span class="number">26</span>) f[i] += f[i<span class="number">-2</span>];</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> f[len];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/decode-ways/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode - Decode Ways&lt;/a&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Product Subarray</title>
    <link href="http://xinli90.com/2016/10/24/Maximum-Product-Subarray/"/>
    <id>http://xinli90.com/2016/10/24/Maximum-Product-Subarray/</id>
    <published>2016-10-24T20:47:50.000Z</published>
    <updated>2016-10-24T20:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>
<p>For example, given the array [2,3,-2,4],<br>the contiguous subarray [2,3] has the largest product = 6. </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Maintain Maximum product and Minimum product , each time get their value </li>
<li>compare maximum one with result to store the maximum result until now.</li>
</ol>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int <span class="keyword">max</span>Product(int[] nums) &#123;</div><div class="line">        int <span class="keyword">max</span>Pro = nums[<span class="number">0</span>],<span class="keyword">min</span>Pro = nums[<span class="number">0</span>];</div><div class="line">        int result = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i<span class="variable">&lt;nums.length; i++) &#123;</span></div><div class="line">            if(nums[i]&gt;=<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">max</span>Pro = Math.<span class="keyword">max</span>(<span class="keyword">max</span>Pro*nums[i],nums[i]);</div><div class="line">                <span class="keyword">min</span>Pro = Math.<span class="keyword">min</span>(<span class="keyword">min</span>Pro*nums[i],nums[i]);</div><div class="line">            &#125;else &#123;</div><div class="line">                int temp = <span class="keyword">max</span>Pro;</div><div class="line">                <span class="keyword">max</span>Pro = Math.<span class="keyword">max</span>(<span class="keyword">min</span>Pro*nums[i],nums[i]);</div><div class="line">                <span class="keyword">min</span>Pro = Math.<span class="keyword">min</span>(temp*nums[i],nums[i]);</div><div class="line">            &#125;</div><div class="line">            result = Math.<span class="keyword">max</span>(result,<span class="keyword">max</span>Pro);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode-Maximum Suba
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Evaluate Reverse Polish Notation</title>
    <link href="http://xinli90.com/2016/10/24/Evaluate-Reverse-Polish-Notation/"/>
    <id>http://xinli90.com/2016/10/24/Evaluate-Reverse-Polish-Notation/</id>
    <published>2016-10-24T19:32:21.000Z</published>
    <updated>2016-10-24T19:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="external">Leetcode - Evaluate Reverse Polish Notation</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>
<p>Valid operators are <code>+, -, *, /</code>. Each operand may be an integer or another expression.</p>
<p>Some examples:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"+"</span>, <span class="string">"3"</span>, <span class="string">"*"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">((<span class="number">2</span> + <span class="number">1</span>) * <span class="number">3</span>)</span> -&gt;</span> <span class="number">9</span></div><div class="line">[<span class="string">"4"</span>, <span class="string">"13"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">(<span class="number">4</span> + (<span class="number">13</span> / <span class="number">5</span>))</span> -&gt;</span> <span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use Stack and if-else to do RPN.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Use Array and switch to do RPN. Much more efficient.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> evalRPN(String[] tokens) &#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(String token : tokens) &#123;</div><div class="line">            <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(token.equals(<span class="string">"+"</span>)||token.equals(<span class="string">"-"</span>)||token.equals(<span class="string">"*"</span>)||token.equals(<span class="string">"/"</span>)) &#123;</div><div class="line">                a = stack.pop();</div><div class="line">                b = stack.pop();</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"+"</span>)) stack.push(a+b);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"-"</span>)) stack.push(b-a);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"*"</span>)) stack.push(a*b);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"/"</span>)) stack.push(b/a);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                stack.push(Integer.parseInt(token));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> evalRPN(String[] tokens) &#123;</div><div class="line">    	<span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(String token : tokens) &#123;</div><div class="line">    		<span class="keyword">switch</span>(token) &#123;</div><div class="line">    			<span class="keyword">case</span> <span class="string">"+"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] + nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"-"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] - nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"*"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] * nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"/"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] / nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">default</span> :	</div><div class="line">    				nums[<span class="keyword">index</span>++] = Integer.parseInt(token);</div><div class="line">    				<span class="keyword">break</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/evaluate-reverse-polish-notation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetc
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock with Cooldown</title>
    <link href="http://xinli90.com/2016/10/24/Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/"/>
    <id>http://xinli90.com/2016/10/24/Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/</id>
    <published>2016-10-24T14:27:26.000Z</published>
    <updated>2016-10-24T15:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock with Cooldown</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:     </p>
<p>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).<br>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</p>
<p>Example:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">prices</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>]</div><div class="line"><span class="attr">maxProfit</span> = <span class="number">3</span></div><div class="line"><span class="attr">transactions</span> = [buy, sell, cooldown, buy, sell]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution:DP"></a>Solution:DP</h4><ul>
<li>The natural states for this problem is the 3 possible transactions: <code>buy</code>,<code>sell</code>,<code>rest</code>. For each of them we make an array, <code>buy[n]</code>,<code>sell[n]</code> and <code>rest[n]</code>. And it means before day <code>i</code> the maxProfit for any sequence end with <code>buy</code> or <code>sell</code> or <code>rest</code>.</li>
<li>Function:</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">buy<span class="string">[i]</span> = Max(buy<span class="string">[i-1]</span>, rest<span class="string">[i-1]</span>-price);</div><div class="line">sell<span class="string">[i]</span> = Max(sell<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span> + price);</div><div class="line">rest<span class="string">[i]</span> = Max(rest<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span>, sell<span class="string">[i-1]</span>);</div></pre></td></tr></table></figure>
<p>Notice: </p>
<p>the fact that <code>buy[i] &lt;= rest[i]</code> , so <code>rest[i] = Max(rest[i-1], sell[i-1])</code>.</p>
<p>the fact that <code>rest[i] &lt;= sell[i]</code> , so  <code>rest[i] = sell[i-1]</code>.</p>
<ul>
<li>So we have 2 functions instead of 3:</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buy<span class="string">[i]</span> = Max(buy<span class="string">[i-1]</span>, sell<span class="string">[i-2]</span>-price);</div><div class="line">sell<span class="string">[i]</span> = Max(sell<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span> + price);</div></pre></td></tr></table></figure>
<ul>
<li>Since states of day <code>i</code> relies on <code>i-1</code> and <code>i-2</code>, we can reduce the O(n) space to O(1).</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span> maxProfit(<span class="built_in">int</span>[] prices) &#123;</div><div class="line">		<span class="built_in">int</span> sell = <span class="number">0</span>, preSell = <span class="number">0</span>;</div><div class="line">		<span class="built_in">int</span> buy = <span class="keyword">Integer</span>.MIN_VALUE, preBuy = <span class="keyword">Integer</span>.MIN_VALUE;</div><div class="line">		for(<span class="built_in">int</span> price : prices) &#123;</div><div class="line">			preBuy = buy;</div><div class="line">			buy = Math.<span class="built_in">max</span>(preBuy, preSell - prices[i]);</div><div class="line">			preSell = sell;</div><div class="line">			sell = Math.<span class="built_in">max</span>(preBuy + prices[i], preSell);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sell;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock IV</title>
    <link href="http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-IV/"/>
    <id>http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-IV/</id>
    <published>2016-10-24T00:31:39.000Z</published>
    <updated>2016-10-24T04:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock IV</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most k transactions.</p>
<p>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution:DP"></a>Solution:DP</h4><ul>
<li>State: profit[i][j] represents the maximum profit until i-th price and j transactions.</li>
<li>Function: profit[i][j] = MAX(profit[i-1][j], prices[i]-prices[i’]+profit[i’][j-1]) (i’ is in 0 - i range)</li>
<li>Initialize: profit[i][0] = 0, profit[0][j] = 0.</li>
<li>Answer: profit[prices.length-1][k]</li>
</ul>
<p>tmpMax = Math.max(tmpMax, profit[i-1][j-1] - prices[i]) means the maximum profit of just doing at most j-1 transactions, using at most first i-1 prices, and buying the stock at prices[i].</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(k &gt;= prices.length/<span class="number">2</span>) <span class="function"><span class="keyword">return</span> <span class="title">quickSort</span><span class="params">(prices)</span></span>;</div><div class="line">		<span class="comment">//initialize</span></div><div class="line">		<span class="keyword">int</span>[][] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</div><div class="line">			<span class="keyword">int</span> tmpMax = -prices[<span class="number">0</span>];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;prices.length; i++) &#123;</div><div class="line">				profit[i][j] = Math.max(profit[i<span class="number">-1</span>][j], prices[i]+tmpMax);</div><div class="line">				tmpMax = Math.max(tmpMax, profit[i<span class="number">-1</span>][j<span class="number">-1</span>] - prices[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">		<span class="keyword">return</span> profit[prices.length<span class="number">-1</span>][k];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> len = prices.length, profit = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>]) &#123;</div><div class="line">				profit += prices[i]-prices[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lee
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock III</title>
    <link href="http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-III/"/>
    <id>http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-III/</id>
    <published>2016-10-23T19:53:01.000Z</published>
    <updated>2016-10-24T00:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock III</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>firstBuy: means we have to borrow money from others, we need borrow as less as possible to get the maximum profit. But the value is negative(-price), so we should pick max one.</li>
<li>firstSell: after buy stock, we need sell stock in a higher price. So profit = price - |firstBuy| = price + firstBuy.</li>
<li>secondBuy: after first transaction, we get the profit 即 firstSell, then similar with firstBuy, we get firstSell-price.</li>
<li>secondSell: similar with firstSell, we get the profit is price + secondBuy.</li>
</ol>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span> maxProfit(<span class="built_in">int</span>[] prices) &#123;</div><div class="line">		<span class="built_in">int</span> firstBuy = <span class="keyword">Integer</span>.MIN_VALUE, firstSell = <span class="number">0</span>;</div><div class="line">		<span class="built_in">int</span> secondBuy = <span class="keyword">Integer</span>.MIN_VALUE, secondSell = <span class="number">0</span>;</div><div class="line">		for(<span class="built_in">int</span> price : prices) &#123;</div><div class="line">			firstBuy = Math.<span class="built_in">max</span>(firstBuy, -price);</div><div class="line">			firstSell = Math.<span class="built_in">max</span>(firstSell, price + firstBuy);</div><div class="line">			secondBuy = Math.<span class="built_in">max</span>(secondBuy, firstSell - price);</div><div class="line">			secondSell = Math.<span class="built_in">max</span>(secondSell, price + secondBuy);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> secondSell;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Le
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock II</title>
    <link href="http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <id>http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock-II/</id>
    <published>2016-10-21T16:51:24.000Z</published>
    <updated>2016-10-23T19:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ul>
<li>State: f[i] represents the maximum profit.</li>
<li>Function: f[i] = f[i-1] + (if(prices[i]&gt;prices[i-1])prices[i] - prices[i-1]), update stock to the current one.</li>
<li>Initialize: f[0] = 0, stock = prices[0]</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Just add all positive difference between two adjacent elements.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="params"><span class="keyword">int</span>[] prices</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(prices==<span class="literal">null</span> || prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span>[] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</div><div class="line">		profit[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> stock = prices[<span class="number">0</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;stock) &#123;</div><div class="line">				profit[i] = profit[i<span class="number">-1</span>] + (prices[i]-stock);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				profit[i] = profit[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">			stock = prices[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit[prices.length<span class="number">-1</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution2</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="params"><span class="keyword">int</span>[] prices</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(prices==<span class="literal">null</span> || prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>]) &#123;</div><div class="line">				profit += prices[i] - prices[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lee
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock</title>
    <link href="http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2016-10-21T13:21:12.000Z</published>
    <updated>2016-10-24T14:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Example 1:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 1, 5, 3, 6, 4]</div><div class="line"><span class="attribute">Output</span>: 5</div><div class="line"></div><div class="line"><span class="lsl">max. difference = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> (not <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, as selling price needs to be larger than buying price)</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 6, 4, 3, 1]</div><div class="line"><span class="attribute">Output</span>: 0</div><div class="line"></div><div class="line"><span class="livescript">In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="literal">no</span> transaction <span class="keyword">is</span> done, i.e. max profit = <span class="number">0.</span></span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>For each element, compare with other elements and find out the maximum one.</li>
<li>Time complexity is O(n^2)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Record a minimum price and calculate its difference if the current is greater than min Price.</li>
<li>Time complexity is O(n)</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxProfit(<span class="keyword">int</span>[] prices) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>, minPrice = Integer.MAX_VALUE; </div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> price : prices) &#123;</div><div class="line">			<span class="built_in">if</span>(minPrice&gt;price) &#123;</div><div class="line">				minPrice = price;</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				<span class="built_in">max</span> = Math.<span class="built_in">max</span>(price-minPrice,<span class="built_in">max</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">max</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the solution about &lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetco
    
    </summary>
    
      <category term="Leetcode" scheme="http://xinli90.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://xinli90.com/tags/Leetcode/"/>
    
  </entry>
  
</feed>
