<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Day21 HTTP Security]]></title>
      <url>http://xinli90.com/2017/08/08/Day21-HTTP-Security/</url>
      <content type="html"><![CDATA[<p>本篇是关于HTTP Security的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳常见加密方法和使用</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><p>一般我们是通过<strong>TLS</strong>或者<strong>SSL</strong>来进行加密连接。    </p>
<p>最简单的方式为：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   A端     Secret Key                       Secret Key          B端</div><div class="line"><span class="string">"String"</span>  ============<span class="function">=&gt;</span>  <span class="string">"dfafdalf4311"</span>  =============<span class="function">=&gt;</span>    <span class="string">"String"</span></div><div class="line">            加密 Encrypt                    解密 Decrypt</div></pre></td></tr></table></figure>
<p>弊端：Secret Key can be stolen.  因为密钥是public的，任何人拥有key都可以解密知晓内容，安全性得不到保证。</p>
<p>因此，出现以下方法：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">             B端</div><div class="line">	    /   \</div><div class="line">	   /     \</div><div class="line"><span class="keyword">public</span> <span class="built_in">key</span>       <span class="keyword">private</span> <span class="built_in">key</span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   A端	   <span class="string">B's public key                  B'</span>s <span class="keyword">private</span> key       B端</div><div class="line"><span class="string">"String"</span>  =============&gt;  <span class="string">"dfafdalf4311"</span>  ===============&gt;    <span class="string">"String"</span></div><div class="line">            加密 Encrypt                     解密 Decrypt</div></pre></td></tr></table></figure>
<p>好处：所有人都可以拥有public key来进行加密，但是只有拥有private key的人才可以解密，从而达到安全目的。</p>
<p>所谓的 <strong>数字签名</strong>：<br>引用上面的例子</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   B端	   <span class="string">B's private key                     B'</span>s <span class="keyword">public</span> key         A端</div><div class="line"><span class="string">"String"</span>  ===============&gt;  <span class="string">"dfafdalf4311"</span>  ===================&gt;    <span class="string">"String"</span></div><div class="line">           Sign <span class="keyword">and</span> Encrypt                  Verify <span class="keyword">and</span> Decrypt</div></pre></td></tr></table></figure>
<p>使用B的private key 给自己的信息加密贴上标签，只要是拥有B的public key的人都可以使用公开的public key来试一下解密，如果可以解开则表明这条信息一定是来自于B端发出，以此达到数字签名的目的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shopping Offers]]></title>
      <url>http://xinli90.com/2017/08/07/Shopping-Offers/</url>
      <content type="html"><![CDATA[<p>This is the question about <a href="https://leetcode.com/problems/shopping-offers/description/" target="_blank" rel="external">Leetcode-Shopping Offers</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In LeetCode Store, there are some kinds of items to sell. Each item has a price.   </p>
<p>However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.    </p>
<p>You are given the each item’s price, a set of special offers, and the number we need to buy for each item. The job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.</p>
<p>Each special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.</p>
<p>You could use any of special offers as many times as you want.</p>
<p>Example 1:    </p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [<span class="number">2</span>,<span class="number">5</span>], [[<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>]], [<span class="number">3</span>,<span class="number">2</span>]</div><div class="line">Output: <span class="number">14</span></div><div class="line">Explanation: </div><div class="line">There are two kinds of items, A <span class="literal">and</span> B. Their prices are $2 <span class="literal">and</span> $5 respectively. </div><div class="line"><span class="keyword">In</span> special offer <span class="number">1</span>, you can pay $5 <span class="keyword">for</span> <span class="number">3</span>A <span class="literal">and</span> <span class="number">0</span>B</div><div class="line"><span class="keyword">In</span> special offer <span class="number">2</span>, you can pay $10 <span class="keyword">for</span> <span class="number">1</span>A <span class="literal">and</span> <span class="number">2</span>B. </div><div class="line">You need <span class="keyword">to</span> buy <span class="number">3</span>A <span class="literal">and</span> <span class="number">2</span>B, so you may pay $10 <span class="keyword">for</span> <span class="number">1</span>A <span class="literal">and</span> <span class="number">2</span>B (special offer <span class="meta">#2), and $4 for 2A.</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>]], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">Output: <span class="number">11</span></div><div class="line">Explanation: </div><div class="line">The price of A is <span class="symbol">$</span><span class="number">2</span>, <span class="keyword">and</span> <span class="symbol">$</span><span class="number">3</span> <span class="keyword">for</span> B, <span class="symbol">$</span><span class="number">4</span> <span class="keyword">for</span> C. </div><div class="line">You may pay <span class="symbol">$</span><span class="number">4</span> <span class="keyword">for</span> <span class="number">1</span>A <span class="keyword">and</span> <span class="number">1</span>B, <span class="keyword">and</span> <span class="symbol">$</span><span class="number">9</span> <span class="keyword">for</span> <span class="number">2</span>A ,<span class="number">2</span>B <span class="keyword">and</span> <span class="number">1</span>C. </div><div class="line">You need to buy <span class="number">1</span>A ,<span class="number">2</span>B <span class="keyword">and</span> <span class="number">1</span>C, so you may pay <span class="symbol">$</span><span class="number">4</span> <span class="keyword">for</span> <span class="number">1</span>A <span class="keyword">and</span> <span class="number">1</span>B (special offer #<span class="number">1</span>), <span class="keyword">and</span> <span class="symbol">$</span><span class="number">3</span> <span class="keyword">for</span> <span class="number">1</span>B, <span class="symbol">$</span><span class="number">4</span> <span class="keyword">for</span> <span class="number">1</span>C. </div><div class="line">You cannot add more items, though only <span class="symbol">$</span><span class="number">9</span> <span class="keyword">for</span> <span class="number">2</span>A ,<span class="number">2</span>B <span class="keyword">and</span> <span class="number">1</span>C.</div></pre></td></tr></table></figure>
<p>Note:</p>
<ol>
<li>There are at most 6 kinds of items, 100 special offers.</li>
<li>For each item, you need to buy at most 6 of them.</li>
<li>You are not allowed to buy more items than you want, even if that would lower the overall price.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-Recursive-solution"><a href="#Solution-Recursive-solution" class="headerlink" title="Solution: Recursive solution."></a>Solution: Recursive solution.</h4><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> shoppingOffers(<span class="keyword">List</span>&lt;Integer&gt; price, <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; special, <span class="keyword">List</span>&lt;Integer&gt; needs) &#123;</div><div class="line">        <span class="keyword">return</span> helper(price,special,needs);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> helper(<span class="keyword">List</span>&lt;Integer&gt; price, <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; special, <span class="keyword">List</span>&lt;Integer&gt; needs) &#123;</div><div class="line">        <span class="keyword">int</span> result = sum(price,needs);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;special.size(); i++) &#123;</div><div class="line">            <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = special.get(i);</div><div class="line">            <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">clone</span> = <span class="keyword">new</span> ArrayList&lt;&gt;(needs);</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(; j&lt;needs.size(); j++) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">list</span>.get(j)&gt;needs.get(j)) <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">clone</span>.set(j,needs.get(j)-<span class="keyword">list</span>.get(j));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j==needs.size()) &#123;</div><div class="line">                result = Math.min(result, <span class="keyword">list</span>.get(j) + helper(price,special,<span class="keyword">clone</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sum(<span class="keyword">List</span>&lt;Integer&gt; price, <span class="keyword">List</span>&lt;Integer&gt; needs) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;price.size(); i++) &#123;</div><div class="line">            sum += price.get(i) * needs.get(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Meeting Rooms]]></title>
      <url>http://xinli90.com/2016/11/21/Meeting-Rooms/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/meeting-rooms/" target="_blank" rel="external">Leetcode - Meeting Rooms</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), determine if a person could attend all meetings.   </p>
<p>For example,<br>Given [[0, 30],[5, 10],[15, 20]],<br>return false.   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Store all start time into one array, sort it.</li>
<li>Store all stop time into one array, sort it.</li>
<li>Use the current start time to compare with the previous stop time, if begin[i]&lt;stop[i-1], then overlap.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> an interval.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> Interval &#123;</div><div class="line"> *     <span class="built_in">int</span> start;</div><div class="line"> *     <span class="built_in">int</span> <span class="keyword">end</span>;</div><div class="line"> *     Interval() &#123; start = <span class="number">0</span>; <span class="keyword">end</span> = <span class="number">0</span>; &#125;</div><div class="line"> *     Interval(<span class="built_in">int</span> s, <span class="built_in">int</span> e) &#123; start = s; <span class="keyword">end</span> = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> boolean canAttendMeetings(Interval[] intervals) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">len</span> = intervals.length;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">0</span>) return <span class="literal">true</span>;</div><div class="line">        <span class="built_in">int</span>[] begin = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">len</span>];</div><div class="line">        <span class="built_in">int</span>[] <span class="keyword">stop</span> = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">len</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">len</span>; i++) &#123;</div><div class="line">        	begin[i] = intervals[i].start;</div><div class="line">        	<span class="keyword">stop</span>[i] = intervals[i].<span class="keyword">end</span>;</div><div class="line">        &#125;</div><div class="line">        Arrays.sort(begin);</div><div class="line">        Arrays.sort(<span class="keyword">stop</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;<span class="built_in">len</span>;i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(begin[i]&lt;<span class="keyword">stop</span>[i<span class="number">-1</span>])&#123;</div><div class="line">        		return <span class="literal">false</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        return <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[N Queens]]></title>
      <url>http://xinli90.com/2016/11/21/N-Queens/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/n-queens/" target="_blank" rel="external">Leetcode - N Queens</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.</p>
<p>Given an integer n, return all distinct solutions to the n-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.</p>
<p>For example,<br>There exist two distinct solutions to the 4-queens puzzle: </p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [<span class="string">".Q.."</span>,  <span class="comment">// Solution 1</span></div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"..Q."</span>],</div><div class="line"></div><div class="line"> [<span class="string">"..Q."</span>,  <span class="comment">// Solution 2</span></div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">".Q.."</span>]</div><div class="line">]</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line"><span class="meta">## Solution</span></div><div class="line">      </div><div class="line"><span class="meta">### Analysis</span></div><div class="line"></div><div class="line"><span class="meta">#### Solution</span></div></pre></td></tr></table></figure>
<p>public class Solution {<br>    public List<list<string>&gt; solveNQueens(int n) {<br>        List<list<string>&gt; result = new ArrayList&lt;&gt;();</list<string></list<string></p>
<pre><code>}
</code></pre><p>}</p>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flatten Nested List Iterator]]></title>
      <url>http://xinli90.com/2016/11/20/Flatten-Nested-List-Iterator/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/flatten-nested-list-iterator/" target="_blank" rel="external">Leetcode - Flatten Nested List Iterator</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a nested list of integers, implement an iterator to flatten it.</p>
<p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p>
<p>Example 1:<br>Given the list [[1,1],2,[1,1]],   </p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].  </p>
<p>Example 2:<br>Given the list [1,[4,[6]]],</p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * // This is the interface that allows for creating nested lists.</div><div class="line"> * // You should not implement it, or speculate about its implementation</div><div class="line"> * public interface NestedInteger &#123;</div><div class="line"> *</div><div class="line"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</div><div class="line"> *     public boolean isInteger();</div><div class="line"> *</div><div class="line"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</div><div class="line"> *     // Return null if this NestedInteger holds a nested list</div><div class="line"> *     public Integer getInteger();</div><div class="line"> *</div><div class="line"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</div><div class="line"> *     // Return null if this NestedInteger holds a single integer</div><div class="line"> *     public List&lt;NestedInteger&gt; getList();</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line">	</div><div class="line">    <span class="keyword">public</span> NestedIterator(<span class="keyword">List</span>&lt;NestedInteger&gt; nestedList) &#123;</div><div class="line">        <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(nestedList,<span class="keyword">list</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;NestedInteger&gt; nestedList,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>) &#123;</div><div class="line">    	<span class="keyword">for</span>(NestedInteger element : nestedList) &#123;</div><div class="line">    		<span class="keyword">if</span>(element.isInteger()) &#123;</div><div class="line">    			<span class="keyword">list</span>.add(element.getInteger());</div><div class="line">    		&#125;<span class="keyword">else</span> &#123;</div><div class="line">    			helper(element.getList(),<span class="keyword">list</span>);</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> Integer next() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">list</span>.get(index++);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;</div><div class="line">        <span class="keyword">return</span> index&lt;<span class="keyword">list</span>.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NestedIterator object will be instantiated and called as such:</div><div class="line"> * NestedIterator i = new NestedIterator(nestedList);</div><div class="line"> * while (i.hasNext()) v[f()] = i.next();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[One Edit Distance]]></title>
      <url>http://xinli90.com/2016/11/05/One-Edit-Distance/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/one-edit-distance/" target="_blank" rel="external">Leetcode - One Edit Distance</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings S and T, determine if they are both one edit distance apart.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>In order to compare easily, be sure the longer string first.</li>
<li>When find out the different character, compare their remaining string.</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">	public boolean isOneEditDistance(String s, String t) &#123;</div><div class="line">		<span class="keyword">if</span>(s.<span class="built_in">length</span>() &lt; t.<span class="built_in">length</span>()) &#123;</div><div class="line">			<span class="built_in">return</span> isOneEditDistance(t,s);</div><div class="line">		&#125;	</div><div class="line">		int i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(i &lt; t.<span class="built_in">length</span>()) &#123;</div><div class="line">			<span class="keyword">if</span>(s.charAt(i) != t.charAt(i)) &#123;</div><div class="line">				<span class="keyword">if</span>(s.<span class="built_in">length</span>() == t.<span class="built_in">length</span>()) &#123;</div><div class="line">					<span class="built_in">return</span> s.<span class="built_in">substring</span>(i+<span class="number">1</span>).equals(t.<span class="built_in">substring</span>(i+<span class="number">1</span>));</div><div class="line">				&#125;<span class="keyword">else</span> &#123;</div><div class="line">					<span class="built_in">return</span> s.<span class="built_in">substring</span>(i+<span class="number">1</span>).equals(t.<span class="built_in">substring</span>(i));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		//prevent s <span class="built_in">is</span> longer than t by <span class="number">1</span> character</div><div class="line">		<span class="built_in">return</span> i==(s.<span class="built_in">length</span>()-<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Read N Characters Given Read4]]></title>
      <url>http://xinli90.com/2016/11/05/Read-N-Characters-Given-Read4/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/read-n-characters-given-read4/" target="_blank" rel="external">Leetcode - Read N Characters Given Read4</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The API: int read4(char *buf) reads 4 characters at a time from a file.</p>
<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>
<p>By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.</p>
<p>Note:<br>The read function will only be called once for each test case.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>这一题意思是：有一个文件，读取n个字符，n可能会比文件总共包含的字符数要大，read4 API通常读4个字符，如果读到最后文件中的字符少于4个则返回剩下数目。所以这里需要留意两点：<br>1.n比文件字符数小时，每次读4个可能会超出n<br>2.n比文件字符数大时，只读到文件末尾  </p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use <code>System.arraycopy</code> to copy from read4 to buf.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Use AC solution.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The read4 API is defined in the parent class Reader4.</span></div><div class="line">      int read4(char[] buf); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> <span class="keyword">extends</span> <span class="title">Reader4</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param buf Destination buffer</div><div class="line">     * @param n   Maximum number of characters to read</div><div class="line">     * @return    The number of characters read</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> read(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> n) &#123;</div><div class="line">    	<span class="keyword">int</span> curLen = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(curLen &lt; n) &#123;</div><div class="line">    		<span class="keyword">char</span>[] tempBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</div><div class="line">    		<span class="comment">//read4: read from file and save into tempBuf, return the number of read.</span></div><div class="line">    		<span class="keyword">int</span> len = read4(tempBuf);</div><div class="line">    		System.arraycopy(tempBuf,<span class="number">0</span>,buf,curLen,Math.min(len,n-curLen));</div><div class="line">    		<span class="keyword">if</span>(len&lt;<span class="number">4</span>) <span class="keyword">return</span> Math.min(curLen+len,n);</div><div class="line">    		curLen += <span class="number">4</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> <span class="keyword">extends</span> <span class="title">Reader4</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param buf Destination buffer</div><div class="line">     * @param n   Maximum number of characters to read</div><div class="line">     * @return    The number of characters read</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> read(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> n) &#123;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">4</span>;</div><div class="line">    	<span class="comment">//if count!=4, it represents read to the end of file or the end of n characters</span></div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">count</span>==<span class="number">4</span>) &#123;</div><div class="line">    		<span class="keyword">char</span>[] tempBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</div><div class="line">    		<span class="keyword">count</span> = read4(tempBuf);</div><div class="line">    		<span class="comment">//prevent from getting more than what we need</span></div><div class="line">    		<span class="keyword">count</span> = Math.min(<span class="keyword">count</span>,n-<span class="keyword">index</span>);</div><div class="line">    		<span class="comment">//copy from tempBuf to buf</span></div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">count</span>; i++) &#123;</div><div class="line">    			buf[<span class="keyword">index</span>++] = tempBuf[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">index</span>;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Size Subarray Sum Equals k]]></title>
      <url>http://xinli90.com/2016/11/03/Maximum-Size-Subarray-Sum-Equals-k/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn’t one, return 0 instead.   </p>
<p>Note:<br>The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.  </p>
<p>Example 1:<br>Given nums = [1, -1, 5, -2, 3], k = 3,<br>return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)  </p>
<p>Example 2:<br>Given nums = [-2, -1, 2, 1], k = 1,<br>return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:<br>Can you do it in O(n) time?   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Try all possible combinations and get the maximum one.   </li>
<li>Time complexity is O(n^2)    </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>The main point is we store the sum of 0 - i elements for each location in array. Then we only need to check if sum[j] - sum[i] == k, it represents the sum of i+1 to j.</li>
<li>We use HashMap to get the constant time for the check stuff.</li>
<li>Time complexity is O(n+n+n)</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxSubArrayLen(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = nums[i];</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">sum</span>==k) maxLen = Math.max(maxLen,<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.length; j++) &#123;</div><div class="line">                <span class="keyword">sum</span> += nums[j];</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">sum</span> == k) &#123;</div><div class="line">                    maxLen = Math.max(maxLen,j-i+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxSubArrayLen(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">		<span class="comment">//in order to preprocess the data easier,assign 0 to sum[0]</span></div><div class="line">		<span class="keyword">int</span>[] <span class="keyword">sum</span> = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</div><div class="line">		<span class="keyword">sum</span>[<span class="number">0</span>] = <span class="number">0</span>;	</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">sum</span>[i] = <span class="keyword">sum</span>[i<span class="number">-1</span>] + nums[i<span class="number">-1</span>];</div><div class="line">		&#125;</div><div class="line">		Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			map.put(<span class="keyword">sum</span>[i],i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sum</span>.length; i++) &#123;</div><div class="line">			Integer val = map.get(<span class="keyword">sum</span>[i]+k);</div><div class="line">			<span class="keyword">if</span>(val!=<span class="keyword">null</span> &amp;&amp; val.intValue()-i&gt;maxLen) &#123;</div><div class="line">				maxLen = val.intValue()-i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> maxLen;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Vertical Order Traversal]]></title>
      <url>http://xinli90.com/2016/11/02/Binary-Tree-Vertical-Order-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-vertical-order-traversal/" target="_blank" rel="external">Leetcode - Binary Tree Vertical Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the vertical order traversal of its nodes’ values. (ie, from top to bottom, column by column).</p>
<p>If two nodes are in the same row and column, the order should be from left to right.</p>
<p>Examples:</p>
<p>Given binary tree [3,9,20,null,null,15,7],<br>   3<br>  /\<br> /  \<br> 9  20<br>    /\<br>   /  \<br>  15   7<br>return its vertical order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">9</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">15</span>],</div><div class="line">  [<span class="number">20</span>],</div><div class="line">  [<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given binary tree [3,9,8,4,0,1,7],</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   /<span class="string">\</span></div><div class="line">  /  <span class="string">\</span></div><div class="line">  <span class="number">9</span>   <span class="number">8</span></div><div class="line"> /<span class="string">\</span>  /<span class="string">\</span></div><div class="line">/  <span class="string">\/</span>  <span class="string">\</span></div><div class="line"><span class="number">4</span>  <span class="number">01</span>   <span class="number">7</span></div></pre></td></tr></table></figure>
<p>return its vertical order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">4</span>],</div><div class="line">  [<span class="number">9</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">8</span>],</div><div class="line">  [<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Given binary tree [3,9,8,4,0,1,7,null,null,null,2,5] (0’s right child is 2 and 1’s left child is 5),</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">     <span class="number">3</span></div><div class="line">    /<span class="string">\</span></div><div class="line">   /  <span class="string">\</span></div><div class="line">   <span class="number">9</span>   <span class="number">8</span></div><div class="line">  /<span class="string">\</span>  /<span class="string">\</span></div><div class="line"> /  <span class="string">\/</span>  <span class="string">\</span></div><div class="line"> <span class="number">4</span>  <span class="number">01</span>   <span class="number">7</span></div><div class="line">    /<span class="string">\</span></div><div class="line">   /  <span class="string">\</span></div><div class="line">   <span class="number">5</span>   <span class="number">2</span></div><div class="line"></div><div class="line">``<span class="javascript"><span class="string">` </span></span></div><div class="line">   </div><div class="line">return its vertical order traversal as:</div></pre></td></tr></table></figure>
<p>[<br>  [4],<br>  [9,5],<br>  [3,0,1],<br>  [8,2],<br>  [7]<br>]</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">## Solution</span></div><div class="line">      </div><div class="line"><span class="comment">### Analysis</span></div><div class="line"><span class="comment">#### Solution1: BFS           </span></div><div class="line"><span class="number">1.</span> Use one Queue <span class="keyword">to</span> traverse all nodes</div><div class="line"><span class="number">2.</span> Use another Queue <span class="keyword">to</span> <span class="built_in">record</span> <span class="keyword">its</span> location</div><div class="line"><span class="number">3.</span> Use TreeMap <span class="keyword">to</span> <span class="built_in">record</span> <span class="keyword">the</span> <span class="literal">result</span>.</div><div class="line"></div><div class="line"><span class="comment">#### Solution2: BFS</span></div><div class="line">Similar solution <span class="keyword">with</span> solution1, ues HashMap <span class="keyword">and</span> range <span class="keyword">to</span> <span class="keyword">instead of</span> TreeMap.</div><div class="line">It <span class="keyword">is</span> more efficient. Because all operation <span class="keyword">in</span> TreeMap <span class="keyword">is</span> O(lgn).</div></pre></td></tr></table></figure>
<p>/**</p>
<ul>
<li>Definition for a binary tree node.</li>
<li>public class TreeNode {</li>
<li>int val;</li>
<li>TreeNode left;</li>
<li>TreeNode right;</li>
<li>TreeNode(int x) { val = x; }</li>
<li>}<br>*/</li>
</ul>
<p>public class Solution1 {<br>    public List<list<integer>&gt; verticalOrder(TreeNode root) {<br>        List<list<integer>&gt; result = new ArrayList&lt;&gt;();<br>        if(root==null) return result;<br>        Queue<integer> locations = new LinkedList&lt;&gt;();<br>        Queue<treenode> nodes = new LinkedList&lt;&gt;();<br>        Map<integer,list<integer>&gt; map= new TreeMap&lt;&gt;();<br>        nodes.offer(root);<br>        locations.offer(0);<br>        while(!nodes.isEmpty()) {<br>            TreeNode node = nodes.poll();<br>            int location = locations.poll();<br>            if(!map.containsKey(location)) {<br>                map.put(location, new ArrayList&lt;&gt;());<br>            }<br>            map.get(location).add(node.val);</integer,list<integer></treenode></integer></list<integer></list<integer></p>
<pre><code>        if(node.left!=null) {
            locations.offer(location-1);
            nodes.offer(node.left);
        }
        if(node.right!=null) {
            locations.offer(location+1);
            nodes.offer(node.right);
        }
    }
    result = new ArrayList(map.values());
    return result;
}
</code></pre><p>}</p>
<p>public class Solution2 {<br>    public List<list<integer>&gt; verticalOrder(TreeNode root) {<br>        List<list<integer>&gt; result = new ArrayList&lt;&gt;();<br>        if(root==null) return result;<br>        Queue<integer> locations = new LinkedList&lt;&gt;();<br>        Queue<treenode> nodes = new LinkedList&lt;&gt;();<br>        Map<integer,list<integer>&gt; map= new HashMap&lt;&gt;();<br>        nodes.offer(root);<br>        locations.offer(0);<br>        int min = 0, max = 0;<br>        while(!nodes.isEmpty()) {<br>            TreeNode node = nodes.poll();<br>            int location = locations.poll();<br>            if(!map.containsKey(location)) {<br>                map.put(location, new ArrayList&lt;&gt;());<br>            }<br>            map.get(location).add(node.val);</integer,list<integer></treenode></integer></list<integer></list<integer></p>
<pre><code>        if(node.left!=null) {
            locations.offer(location-1);
            nodes.offer(node.left);
            min = Math.min(min,location-1);
        }
        if(node.right!=null) {
            locations.offer(location+1);
            nodes.offer(node.right);
            max = Math.max(max,location+1);
        }
    }
    for(int i=min; i&lt;=max; i++) {
        result.add(map.get(i));
    }
    return result;
}
</code></pre><p>}</p>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sparse Matrix Multiplication]]></title>
      <url>http://xinli90.com/2016/11/01/Sparse-Matrix-Multiplication/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="external">Leetcode-String to Integer (atoi)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two sparse matrices A and B, return the result of AB.    </p>
<p>You may assume that A’s column number is equal to B’s row number.</p>
<p>Example:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">A = [</div><div class="line">  [ <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">3</span>]</div><div class="line">]</div><div class="line"></div><div class="line">B = [</div><div class="line">  [ <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span> ],</div><div class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ],</div><div class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ]</div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line">     |  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> |   | <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |   |  <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |</div><div class="line">AB = | <span class="number">-1</span> <span class="number">0</span> <span class="number">3</span> | x | <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | = | <span class="number">-7</span> <span class="number">0</span> <span class="number">3</span> |</div><div class="line">                  | <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> |</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>The basic logic implication of calculation.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>For Each element with the same row, we multiply each time.<br>So we can multiply one by one and check if the element is non-zero digit.</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int<span class="comment">[]</span><span class="comment">[]</span> multiply(int<span class="comment">[]</span><span class="comment">[]</span> A, int<span class="comment">[]</span><span class="comment">[]</span> B) &#123;</div><div class="line">        int<span class="comment">[]</span><span class="comment">[]</span> result = new int<span class="comment">[A.length]</span><span class="comment">[B<span class="comment">[0]</span>.length]</span>;</div><div class="line">        for(int i=0; i&lt;A.length; i++) &#123;</div><div class="line">            for(int j=0; j&lt;B<span class="comment">[0]</span>.length; j++) &#123;</div><div class="line">                int sum = 0;</div><div class="line">                for(int m = 0; m&lt;B.length; m++) &#123;</div><div class="line">                    if(A<span class="comment">[i]</span><span class="comment">[m]</span>!=0 &amp;&amp; B<span class="comment">[m]</span><span class="comment">[j]</span>!=0) &#123;</div><div class="line">                    	sum += A<span class="comment">[i]</span><span class="comment">[m]</span> * B<span class="comment">[m]</span><span class="comment">[j]</span>; </div><div class="line">                    &#125;   </div><div class="line">                &#125;</div><div class="line">                result<span class="comment">[i]</span><span class="comment">[j]</span> = sum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    public int<span class="comment">[]</span><span class="comment">[]</span> multiply(int<span class="comment">[]</span><span class="comment">[]</span> A, int<span class="comment">[]</span><span class="comment">[]</span> B) &#123;</div><div class="line">    	int<span class="comment">[]</span><span class="comment">[]</span> result = new int<span class="comment">[A.length]</span><span class="comment">[B<span class="comment">[0]</span>.length]</span>;</div><div class="line">    	for(int i=0; i&lt;A.length; i++) &#123;</div><div class="line">            for(int j=0; j&lt;A<span class="comment">[0]</span>.length; j++) &#123; //A's column, also B's row</div><div class="line">            	if(A<span class="comment">[i]</span><span class="comment">[j]</span> != 0) &#123;</div><div class="line">            		for(int m = 0; m&lt;B<span class="comment">[0]</span>.length; m++) &#123;  // B's column</div><div class="line">            			if(B<span class="comment">[j]</span><span class="comment">[m]</span> != 0) &#123;</div><div class="line">            				result<span class="comment">[i]</span><span class="comment">[m]</span> += A<span class="comment">[i]</span><span class="comment">[j]</span> * B<span class="comment">[j]</span><span class="comment">[m]</span>;</div><div class="line">            			&#125;</div><div class="line">            		&#125;</div><div class="line">            	&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Move Zeroes]]></title>
      <url>http://xinli90.com/2016/11/01/Move-Zeroes/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="external">Leetcode - Move Zeroes</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].   </p>
<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Maintain two pointers, one points to <code>0</code>, one interate the whole array to find non zero digit to swap.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> void moveZeroes(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==<span class="literal">null</span> || nums.length&lt;<span class="number">2</span>) return;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>,<span class="built_in">right</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">right</span> &lt; nums.length) &#123;</div><div class="line">        	<span class="keyword">if</span>(nums[<span class="built_in">right</span>]==<span class="number">0</span>) &#123;</div><div class="line">        		<span class="keyword">if</span>(nums[<span class="built_in">left</span>]!=<span class="number">0</span>) &#123;</div><div class="line">        			<span class="built_in">left</span> = <span class="built_in">right</span>;</div><div class="line">        		&#125;</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		<span class="keyword">if</span>(nums[<span class="built_in">left</span>] == <span class="number">0</span>) &#123;</div><div class="line">        			swap(nums,<span class="built_in">left</span>,<span class="built_in">right</span>);</div><div class="line">        			<span class="built_in">left</span>++;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">right</span>++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> void swap(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</div><div class="line">    	<span class="built_in">int</span> temp = nums[a];</div><div class="line">    	nums[a] = nums[b];</div><div class="line">    	nums[b] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the array, find the location of first <code>0</code>, maintain its index and assign the next non-zero digit to their original location one by one.</li>
<li>Assign <code>0</code> to the remaining locations.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution2</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span>(<span class="params"><span class="keyword">int</span>[] nums</span>) </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(nums==<span class="literal">null</span> || nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    	<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="keyword">if</span>(nums[i] != <span class="number">0</span>) &#123;</div><div class="line">    			nums[j++] = nums[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">for</span>(; j&lt;nums.length; j++) &#123;</div><div class="line">    		nums[j] = <span class="number">0</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day20 iOS Design Pattern]]></title>
      <url>http://xinli90.com/2016/11/01/Day20-iOS-Design-Pattern/</url>
      <content type="html"><![CDATA[<p>本篇是关于iOS Design Pattern的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种Design Pattern特性</li>
<li>总结Design Pattern用法和常见情景</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h3><p>用clone的方式来创建<code>重复</code>对象，避免一直创建对象所带来的资源耗损。并且能够简化复杂对象的创建过程。<br>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>例如发送广告信息给500万用户，如果一条一条发的话可能需要好几天时间，相当于获取一个个创建的model object中信息并输出。如果创建多线程同时发送，并且避免创建500W个object带来的资源耗损，可以使用一个通用的object，然后每次copy得到新的实例而不是使用构造函数得到新实例，再修改里面一部分variable并且不会影响原Object来实现。</p>
<p>这就要求： 首先Object class 继承 Cloneable接口.     </p>
<p>注意： 这里的clone只能是shallow copy, 所以只能拷贝primitive type的值和对象、数组的reference，我们需要对 对象、数组进行deep copy.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; ars; </div><div class="line">	<span class="keyword">public</span> Message()&#123;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> Message <span class="keyword">clone</span>() &#123;	</div><div class="line">		Message message = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			message = (Message)super.<span class="keyword">clone</span>();</div><div class="line">			message.ars = (ArrayList&lt;String&gt;) this.ars.<span class="keyword">clone</span>();</div><div class="line">		&#125; <span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候则可以只创建一个新的object，之后不断clone来创建新的object.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Message</span> <span class="keyword">message</span> = new <span class="keyword">Message</span>();</div><div class="line">int i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</div><div class="line">	<span class="keyword">Message</span> cloneMes = <span class="keyword">message</span>.clone();</div><div class="line">	....</div><div class="line">	sendMessage(cloneMes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>在实现clone时可能需要实现复杂的代码，多重嵌套引用的deep copy很麻烦；     </li>
<li>每一个类都需要配置clone方法，当对已有类进行改造是，需要修改源代码，违背“开闭原则”.      </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Product of Array Except Self]]></title>
      <url>http://xinli90.com/2016/10/30/Product-of-Array-Except-Self/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="external">Leetcode - Product of Array Except Self</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>Solve it without division and in O(n).</p>
<p>For example, given [1,2,3,4], return [24,12,8,6].</p>
<p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Let’s take an example:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array:  1        2       3      4       5</div><div class="line">Left:            1      1<span class="emphasis">*2   1*</span>2<span class="emphasis">*3   1*</span>2<span class="emphasis">*3*</span>4</div><div class="line">Right: 2<span class="emphasis">*3*</span>4<span class="emphasis">*5  3*</span>4<span class="emphasis">*5   4*</span>5     5</div></pre></td></tr></table></figure>
<p>Given array[1, 2, 3, 4, 5], regarding the third number 3, the product of array except 3 is 1 <em> 2 and right is 4 </em> 5. The product is left * right.</p>
<p>So time complexity is O(n+n), the extra space is O(1).</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Similar with Solution1, instead of variable temp, we use result[0] to store right product.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class <span class="type">Solution1</span> &#123;</div><div class="line">    public <span class="built_in">int</span>[] productExceptSelf(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">    	<span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">    	<span class="literal">result</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="literal">result</span>[i] = <span class="literal">result</span>[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>];</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">int</span> temp = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    		<span class="literal">result</span>[i] *= temp;</div><div class="line">    		temp *= nums[i];</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class <span class="type">Solution2</span> &#123;</div><div class="line">    public <span class="built_in">int</span>[] productExceptSelf(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">    	<span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">    	<span class="literal">result</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="literal">result</span>[i] = <span class="literal">result</span>[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>];</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    		<span class="literal">result</span>[i] *= <span class="literal">result</span>[<span class="number">0</span>];</div><div class="line">    		<span class="literal">result</span>[<span class="number">0</span>] *= nums[i];</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Odd Even Linked List]]></title>
      <url>http://xinli90.com/2016/10/29/Odd-Even-Linked-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/odd-even-linked-list/" target="_blank" rel="external">Leetcode - Odd Even Linked List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>
<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>
<p>Example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Given <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL,</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>-&gt;NULL.</div></pre></td></tr></table></figure>
<p>Note:<br>The relative order inside both the even and odd groups should remain as it was in the input.<br>The first node is considered odd, the second node even and so on …</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>connect odd and even node respectively</li>
<li>And then connect the last odd with the first even node.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">	<span class="keyword">public</span> ListNode oddEvenList(ListNode head) &#123;</div><div class="line">		<span class="keyword">if</span>(head==<span class="literal">null</span>) return head;</div><div class="line">		ListNode odd = head, even = head.<span class="keyword">next</span>, evenHead = even;</div><div class="line">		<span class="keyword">while</span>(even!=<span class="literal">null</span> &amp;&amp; even.<span class="keyword">next</span>!=<span class="literal">null</span>) &#123;</div><div class="line">			odd.<span class="keyword">next</span> = odd.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line">			even.<span class="keyword">next</span> = even.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line">			odd = odd.<span class="keyword">next</span>;</div><div class="line">			even = even.<span class="keyword">next</span>;</div><div class="line">		&#125;</div><div class="line">		odd.<span class="keyword">next</span> = evenHead;</div><div class="line">		return head;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sum of Two Integers]]></title>
      <url>http://xinli90.com/2016/10/28/Sum-of-Two-Integers/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sum-of-two-integers/" target="_blank" rel="external">Leetcode - Sum of Two Integers</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>
<p>Example:<br>Given a = 1 and b = 2, return 3.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>First recall addition in primary school. e.g. 26 + 147 = 173. You start by 6 + 7 = 13, so you put the 3 in the sum, and carry the one, and so forth…</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">carry: <span class="number">1</span></div><div class="line"><span class="selector-tag">a</span>:     <span class="number">26</span></div><div class="line"><span class="selector-tag">b</span>:    <span class="number">147</span></div><div class="line">sum   <span class="number">173</span></div></pre></td></tr></table></figure>
<ol>
<li>First find the carry: <code>int carry = (a &amp; b)</code></li>
<li>Then store the first digit position, and store it in <code>a = (a ^ b)</code></li>
<li>Shift the carry to the next digit position: <code>carry &lt;&lt; 1</code></li>
<li>The while loop continues as long as there are carries that has bot been included in the sum.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</div><div class="line">    	<span class="keyword">while</span>(b != <span class="number">0</span>) &#123;</div><div class="line">    		<span class="keyword">int</span> carry = (a &amp; b);</div><div class="line">    		a = (a ^ b);</div><div class="line">    		b = carry &lt;&lt; <span class="number">1</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unique Paths II]]></title>
      <url>http://xinli90.com/2016/10/27/Unique-Paths-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/unique-paths-ii/" target="_blank" rel="external">Leetcode - Unique Paths II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Follow up for “Unique Paths”:    </p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?   </p>
<p>An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p>
<p>For example,<br>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</div><div class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</div><div class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The total number of unique paths is 2.</p>
<p>Note: m and n will be at most 100.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents the number of unique paths from start to coordinate(x,y)</li>
<li>Function: f[i][j] = if(obstacleGrid[i][j] == 0) f[i-1][j] + f[i][j-1]  (思考：怎样到达(i,j)这一步，到达这一步之前我们有多少选择)</li>
<li>Initialize: if(obstacleGrid[i][j] == 0) f[i][0] = 1; f[0][j] = 1</li>
<li>Answer: f[m-1][n-1]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span>(<span class="params"><span class="keyword">int</span>[][] obstacleGrid</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = obstacleGrid.length;</div><div class="line">        <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span> [m][n];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize   </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</div><div class="line">                f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</div><div class="line">                f[<span class="number">0</span>][j] = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">0</span>) &#123;</div><div class="line">                    f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>];      </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Factorial Trailing Zeroes]]></title>
      <url>http://xinli90.com/2016/10/27/Factorial-Trailing-Zeroes/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<p>Note: Your solution should be in logarithmic time complexity.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>n! = 2 <em> 3 </em> 4 <em> 5 … </em> (5 <em> 2) </em> … <em> (5^2 </em> 1) <em> … </em> (5^2 * 2) …</li>
<li>Each time, we divide n by 5 and collect its quotient</li>
<li>Time complexity is lg5N.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">    	<span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</div><div class="line">    		result += n/<span class="number">5</span>;</div><div class="line">    		n /= <span class="number">5</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Decode Ways]]></title>
      <url>http://xinli90.com/2016/10/25/Decode-Ways/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/decode-ways/" target="_blank" rel="external">Leetcode - Decode Ways</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'A'</span> -&gt; <span class="number">1</span></div><div class="line"><span class="string">'B'</span> -&gt; <span class="number">2</span></div><div class="line">...</div><div class="line"><span class="string">'Z'</span> -&gt; <span class="number">26</span></div></pre></td></tr></table></figure>
<p>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,<br>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).</p>
<p>The number of ways decoding “12” is 2.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents the number of ways to decode it.</li>
<li>Function: f[i] = f[i] + if(前一位数字&gt;0) f[i-1] + if(10 &lt;= 前两位数字 &lt;= 26) f[i-2]</li>
<li>Initialize: f[0] = 1 , f[1] = if(前一位数字 == 0) 0 ， else 1. </li>
<li>Answer: f[s.length()]</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> numDecodings(<span class="keyword">String</span> s) &#123;</div><div class="line">       <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       <span class="built_in">int</span> len = s.length();</div><div class="line">       <span class="comment">//initialize</span></div><div class="line">       <span class="built_in">int</span>[] f = <span class="keyword">new</span> <span class="built_in">int</span>[len+<span class="number">1</span>];</div><div class="line">       f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">       f[<span class="number">1</span>] = s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">2</span>; i &lt;= len; i++) &#123;</div><div class="line">       		<span class="built_in">int</span> first = Integer.parseInt(s.substring(i<span class="number">-1</span>,i));</div><div class="line">       		<span class="built_in">int</span> <span class="built_in">second</span> = Integer.parseInt(s.substring(i<span class="number">-2</span>,i));</div><div class="line">       		<span class="keyword">if</span>(first&gt;<span class="number">0</span>) f[i] += f[i<span class="number">-1</span>];</div><div class="line">       		<span class="keyword">if</span>(<span class="built_in">second</span>&gt;=<span class="number">10</span> &amp;&amp; <span class="built_in">second</span>&lt;=<span class="number">26</span>) f[i] += f[i<span class="number">-2</span>];</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> f[len];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Product Subarray]]></title>
      <url>http://xinli90.com/2016/10/24/Maximum-Product-Subarray/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>
<p>For example, given the array [2,3,-2,4],<br>the contiguous subarray [2,3] has the largest product = 6. </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Maintain Maximum product and Minimum product , each time get their value </li>
<li>compare maximum one with result to store the maximum result until now.</li>
</ol>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int <span class="keyword">max</span>Product(int[] nums) &#123;</div><div class="line">        int <span class="keyword">max</span>Pro = nums[<span class="number">0</span>],<span class="keyword">min</span>Pro = nums[<span class="number">0</span>];</div><div class="line">        int result = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i<span class="variable">&lt;nums.length; i++) &#123;</span></div><div class="line">            if(nums[i]&gt;=<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">max</span>Pro = Math.<span class="keyword">max</span>(<span class="keyword">max</span>Pro*nums[i],nums[i]);</div><div class="line">                <span class="keyword">min</span>Pro = Math.<span class="keyword">min</span>(<span class="keyword">min</span>Pro*nums[i],nums[i]);</div><div class="line">            &#125;else &#123;</div><div class="line">                int temp = <span class="keyword">max</span>Pro;</div><div class="line">                <span class="keyword">max</span>Pro = Math.<span class="keyword">max</span>(<span class="keyword">min</span>Pro*nums[i],nums[i]);</div><div class="line">                <span class="keyword">min</span>Pro = Math.<span class="keyword">min</span>(temp*nums[i],nums[i]);</div><div class="line">            &#125;</div><div class="line">            result = Math.<span class="keyword">max</span>(result,<span class="keyword">max</span>Pro);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Evaluate Reverse Polish Notation]]></title>
      <url>http://xinli90.com/2016/10/24/Evaluate-Reverse-Polish-Notation/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="external">Leetcode - Evaluate Reverse Polish Notation</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>
<p>Valid operators are <code>+, -, *, /</code>. Each operand may be an integer or another expression.</p>
<p>Some examples:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"+"</span>, <span class="string">"3"</span>, <span class="string">"*"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">((<span class="number">2</span> + <span class="number">1</span>) * <span class="number">3</span>)</span> -&gt;</span> <span class="number">9</span></div><div class="line">[<span class="string">"4"</span>, <span class="string">"13"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">(<span class="number">4</span> + (<span class="number">13</span> / <span class="number">5</span>))</span> -&gt;</span> <span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use Stack and if-else to do RPN.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Use Array and switch to do RPN. Much more efficient.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> evalRPN(String[] tokens) &#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(String token : tokens) &#123;</div><div class="line">            <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(token.equals(<span class="string">"+"</span>)||token.equals(<span class="string">"-"</span>)||token.equals(<span class="string">"*"</span>)||token.equals(<span class="string">"/"</span>)) &#123;</div><div class="line">                a = stack.pop();</div><div class="line">                b = stack.pop();</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"+"</span>)) stack.push(a+b);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"-"</span>)) stack.push(b-a);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"*"</span>)) stack.push(a*b);</div><div class="line">                <span class="keyword">if</span>(token.equals(<span class="string">"/"</span>)) stack.push(b/a);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                stack.push(Integer.parseInt(token));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> evalRPN(String[] tokens) &#123;</div><div class="line">    	<span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[tokens.length];</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(String token : tokens) &#123;</div><div class="line">    		<span class="keyword">switch</span>(token) &#123;</div><div class="line">    			<span class="keyword">case</span> <span class="string">"+"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] + nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"-"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] - nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"*"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] * nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">case</span> <span class="string">"/"</span> : </div><div class="line">    				nums[<span class="keyword">index</span><span class="number">-1</span>] = nums[<span class="keyword">index</span><span class="number">-2</span>] / nums[<span class="keyword">index</span><span class="number">-1</span>];</div><div class="line">    				<span class="keyword">index</span>--;</div><div class="line">    				<span class="keyword">break</span>;	</div><div class="line">    			<span class="keyword">default</span> :	</div><div class="line">    				nums[<span class="keyword">index</span>++] = Integer.parseInt(token);</div><div class="line">    				<span class="keyword">break</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Best Time to Buy and Sell Stock with Cooldown]]></title>
      <url>http://xinli90.com/2016/10/24/Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock with Cooldown</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:     </p>
<p>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).<br>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</p>
<p>Example:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">prices</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>]</div><div class="line"><span class="attr">maxProfit</span> = <span class="number">3</span></div><div class="line"><span class="attr">transactions</span> = [buy, sell, cooldown, buy, sell]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution:DP"></a>Solution:DP</h4><ul>
<li>The natural states for this problem is the 3 possible transactions: <code>buy</code>,<code>sell</code>,<code>rest</code>. For each of them we make an array, <code>buy[n]</code>,<code>sell[n]</code> and <code>rest[n]</code>. And it means before day <code>i</code> the maxProfit for any sequence end with <code>buy</code> or <code>sell</code> or <code>rest</code>.</li>
<li>Function:</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">buy<span class="string">[i]</span> = Max(buy<span class="string">[i-1]</span>, rest<span class="string">[i-1]</span>-price);</div><div class="line">sell<span class="string">[i]</span> = Max(sell<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span> + price);</div><div class="line">rest<span class="string">[i]</span> = Max(rest<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span>, sell<span class="string">[i-1]</span>);</div></pre></td></tr></table></figure>
<p>Notice: </p>
<p>the fact that <code>buy[i] &lt;= rest[i]</code> , so <code>rest[i] = Max(rest[i-1], sell[i-1])</code>.</p>
<p>the fact that <code>rest[i] &lt;= sell[i]</code> , so  <code>rest[i] = sell[i-1]</code>.</p>
<ul>
<li>So we have 2 functions instead of 3:</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buy<span class="string">[i]</span> = Max(buy<span class="string">[i-1]</span>, sell<span class="string">[i-2]</span>-price);</div><div class="line">sell<span class="string">[i]</span> = Max(sell<span class="string">[i-1]</span>, buy<span class="string">[i-1]</span> + price);</div></pre></td></tr></table></figure>
<ul>
<li>Since states of day <code>i</code> relies on <code>i-1</code> and <code>i-2</code>, we can reduce the O(n) space to O(1).</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span> maxProfit(<span class="built_in">int</span>[] prices) &#123;</div><div class="line">		<span class="built_in">int</span> sell = <span class="number">0</span>, preSell = <span class="number">0</span>;</div><div class="line">		<span class="built_in">int</span> buy = <span class="keyword">Integer</span>.MIN_VALUE, preBuy = <span class="keyword">Integer</span>.MIN_VALUE;</div><div class="line">		for(<span class="built_in">int</span> price : prices) &#123;</div><div class="line">			preBuy = buy;</div><div class="line">			buy = Math.<span class="built_in">max</span>(preBuy, preSell - prices[i]);</div><div class="line">			preSell = sell;</div><div class="line">			sell = Math.<span class="built_in">max</span>(preBuy + prices[i], preSell);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sell;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Best Time to Buy and Sell Stock IV]]></title>
      <url>http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-IV/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock IV</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most k transactions.</p>
<p>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution:DP"></a>Solution:DP</h4><ul>
<li>State: profit[i][j] represents the maximum profit until i-th price and j transactions.</li>
<li>Function: profit[i][j] = MAX(profit[i-1][j], prices[i]-prices[i’]+profit[i’][j-1]) (i’ is in 0 - i range)</li>
<li>Initialize: profit[i][0] = 0, profit[0][j] = 0.</li>
<li>Answer: profit[prices.length-1][k]</li>
</ul>
<p>tmpMax = Math.max(tmpMax, profit[i-1][j-1] - prices[i]) means the maximum profit of just doing at most j-1 transactions, using at most first i-1 prices, and buying the stock at prices[i].</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(k &gt;= prices.length/<span class="number">2</span>) <span class="function"><span class="keyword">return</span> <span class="title">quickSort</span><span class="params">(prices)</span></span>;</div><div class="line">		<span class="comment">//initialize</span></div><div class="line">		<span class="keyword">int</span>[][] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</div><div class="line">			<span class="keyword">int</span> tmpMax = -prices[<span class="number">0</span>];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;prices.length; i++) &#123;</div><div class="line">				profit[i][j] = Math.max(profit[i<span class="number">-1</span>][j], prices[i]+tmpMax);</div><div class="line">				tmpMax = Math.max(tmpMax, profit[i<span class="number">-1</span>][j<span class="number">-1</span>] - prices[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">		<span class="keyword">return</span> profit[prices.length<span class="number">-1</span>][k];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> len = prices.length, profit = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>]) &#123;</div><div class="line">				profit += prices[i]-prices[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Best Time to Buy and Sell Stock III]]></title>
      <url>http://xinli90.com/2016/10/23/Best-Time-to-Buy-and-Sell-Stock-III/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock III</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>firstBuy: means we have to borrow money from others, we need borrow as less as possible to get the maximum profit. But the value is negative(-price), so we should pick max one.</li>
<li>firstSell: after buy stock, we need sell stock in a higher price. So profit = price - |firstBuy| = price + firstBuy.</li>
<li>secondBuy: after first transaction, we get the profit 即 firstSell, then similar with firstBuy, we get firstSell-price.</li>
<li>secondSell: similar with firstSell, we get the profit is price + secondBuy.</li>
</ol>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span> maxProfit(<span class="built_in">int</span>[] prices) &#123;</div><div class="line">		<span class="built_in">int</span> firstBuy = <span class="keyword">Integer</span>.MIN_VALUE, firstSell = <span class="number">0</span>;</div><div class="line">		<span class="built_in">int</span> secondBuy = <span class="keyword">Integer</span>.MIN_VALUE, secondSell = <span class="number">0</span>;</div><div class="line">		for(<span class="built_in">int</span> price : prices) &#123;</div><div class="line">			firstBuy = Math.<span class="built_in">max</span>(firstBuy, -price);</div><div class="line">			firstSell = Math.<span class="built_in">max</span>(firstSell, price + firstBuy);</div><div class="line">			secondBuy = Math.<span class="built_in">max</span>(secondBuy, firstSell - price);</div><div class="line">			secondSell = Math.<span class="built_in">max</span>(secondSell, price + secondBuy);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> secondSell;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Best Time to Buy and Sell Stock II]]></title>
      <url>http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ul>
<li>State: f[i] represents the maximum profit.</li>
<li>Function: f[i] = f[i-1] + (if(prices[i]&gt;prices[i-1])prices[i] - prices[i-1]), update stock to the current one.</li>
<li>Initialize: f[0] = 0, stock = prices[0]</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Just add all positive difference between two adjacent elements.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution1</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="params"><span class="keyword">int</span>[] prices</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(prices==<span class="literal">null</span> || prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span>[] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</div><div class="line">		profit[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> stock = prices[<span class="number">0</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;stock) &#123;</div><div class="line">				profit[i] = profit[i<span class="number">-1</span>] + (prices[i]-stock);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				profit[i] = profit[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">			stock = prices[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit[prices.length<span class="number">-1</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution2</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="params"><span class="keyword">int</span>[] prices</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(prices==<span class="literal">null</span> || prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>]) &#123;</div><div class="line">				profit += prices[i] - prices[i<span class="number">-1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> profit;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Best Time to Buy and Sell Stock]]></title>
      <url>http://xinli90.com/2016/10/21/Best-Time-to-Buy-and-Sell-Stock/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="external">Leetcode - Best Time to Buy and Sell Stock</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Example 1:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 1, 5, 3, 6, 4]</div><div class="line"><span class="attribute">Output</span>: 5</div><div class="line"></div><div class="line"><span class="lsl">max. difference = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> (not <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, as selling price needs to be larger than buying price)</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 6, 4, 3, 1]</div><div class="line"><span class="attribute">Output</span>: 0</div><div class="line"></div><div class="line"><span class="livescript">In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="literal">no</span> transaction <span class="keyword">is</span> done, i.e. max profit = <span class="number">0.</span></span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>For each element, compare with other elements and find out the maximum one.</li>
<li>Time complexity is O(n^2)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Record a minimum price and calculate its difference if the current is greater than min Price.</li>
<li>Time complexity is O(n)</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxProfit(<span class="keyword">int</span>[] prices) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>, minPrice = Integer.MAX_VALUE; </div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> price : prices) &#123;</div><div class="line">			<span class="built_in">if</span>(minPrice&gt;price) &#123;</div><div class="line">				minPrice = price;</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				<span class="built_in">max</span> = Math.<span class="built_in">max</span>(price-minPrice,<span class="built_in">max</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">max</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Search in Rotated Sorted Array]]></title>
      <url>http://xinli90.com/2016/10/20/Search-in-Rotated-Sorted-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="external">Leetcode - Search in Rotated Sorted Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Iterate through the array to find the target.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Find Min index</li>
<li>compare target with the last element to ensure left and right index.</li>
<li>Use Binary Search to find the target.</li>
</ol>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public <span class="built_in">int</span> <span class="built_in">search</span>(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</div><div class="line">         for(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">             <span class="built_in">if</span>(nums[i]==target) &#123;</div><div class="line">                 return i;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         return -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	public <span class="built_in">int</span> <span class="built_in">search</span>(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</div><div class="line">		<span class="built_in">int</span> minIndex = findMinIndex(nums);</div><div class="line">		<span class="built_in">if</span>(nums[minIndex] == target) return minIndex;</div><div class="line">		<span class="built_in">int</span> sie = nums.length;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">left</span> = nums[size-<span class="number">1</span>]&gt;=target? minIndex+<span class="number">1</span> <span class="symbol">:</span> <span class="number">0</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">right</span> = nums[size-<span class="number">1</span>]&gt;=target ? size-<span class="number">1</span> <span class="symbol">:</span> minIndex-<span class="number">1</span>;</div><div class="line">		//<span class="built_in">left</span>和<span class="built_in">right</span>边界都在变化，所以需要验证<span class="built_in">left</span>==<span class="built_in">right</span>的情况，防止数组size为<span class="number">2</span>的情况</div><div class="line">		while(<span class="built_in">left</span> &lt;= <span class="built_in">right</span>) &#123;</div><div class="line">			<span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">left</span> + (<span class="built_in">right</span>-<span class="built_in">left</span>)/<span class="number">2</span>;</div><div class="line">			<span class="built_in">if</span>(nums[<span class="built_in">mid</span>] == target) return <span class="built_in">mid</span>;</div><div class="line">			else <span class="built_in">if</span>(nums[<span class="built_in">mid</span>] &gt; target) <span class="built_in">right</span> = <span class="built_in">mid</span>-<span class="number">1</span>;</div><div class="line">			else <span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		return -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public <span class="built_in">int</span> findMinIndex(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = nums.length-<span class="number">1</span>;</div><div class="line">		//<span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>,<span class="built_in">right</span>=<span class="built_in">mid</span> 为了保证只有<span class="built_in">left</span>边界变化，确保最后返回<span class="built_in">left</span>得到正确结果</div><div class="line">		while(<span class="built_in">left</span> &lt; <span class="built_in">right</span>) &#123;</div><div class="line">			<span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">left</span> + (<span class="built_in">right</span>-<span class="built_in">left</span>)/<span class="number">2</span>;</div><div class="line">			<span class="built_in">if</span>(nums[<span class="built_in">mid</span>]&gt;nums[<span class="built_in">right</span>]) &#123;</div><div class="line">				<span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">			&#125;else &#123;</div><div class="line">				<span class="built_in">right</span> = <span class="built_in">mid</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return <span class="built_in">left</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Find Minimum in Rotated Sorted Array]]></title>
      <url>http://xinli90.com/2016/10/20/Find-Minimum-in-Rotated-Sorted-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.   </p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).    </p>
<p>Find the minimum element.    </p>
<p>You may assume no duplicate exists in the array.       </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate through the array to find out the element which is greater than the next one.</li>
<li>Time complexity is O(n)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Binary search to find out this element</li>
<li>If the middle one is less than right one, assign mid to right index.</li>
<li>If the middle one is greater than right one, assign mid+1 to left index.</li>
<li>Time complexity is O(lgn)</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> int findMin(int[] nums) &#123;</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;nums.length-<span class="number">1</span>; i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(nums[i] &gt; nums[i+<span class="number">1</span>]) &#123;</div><div class="line">        		<span class="keyword">return</span> nums[i+<span class="number">1</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;   </div><div class="line">        <span class="comment">//if sorted array is not rotated or rotated to the original one</span></div><div class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> int findMin(int[] nums) &#123;</div><div class="line">    	int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</div><div class="line">    		int mid = <span class="keyword">left</span> + (<span class="keyword">right</span>-<span class="keyword">left</span>)/<span class="number">2</span>;</div><div class="line">    		<span class="keyword">if</span>(nums[mid] &gt; nums[<span class="keyword">right</span>]) &#123;</div><div class="line">    			<span class="keyword">left</span> = mid+<span class="number">1</span>;</div><div class="line">    		&#125;<span class="keyword">else</span> &#123;</div><div class="line">    			<span class="keyword">right</span> = mid;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> nums[<span class="keyword">left</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rotate Array]]></title>
      <url>http://xinli90.com/2016/10/19/Rotate-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">Leetcode-Rotate Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Rotate an array of n elements to the right by k steps.</p>
<p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>rotete one by one.</li>
<li>Time complexity is O(k*n), Space complexity is O(1)     </li>
<li>TIme Limit Exceeded      </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use an array to store the last k elements first</li>
<li>shift all remaining elements to the right</li>
<li>put k elements to the left.</li>
<li>Time complexity is O(n), Space complexity is O(k)</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Reverse first size - k elements</li>
<li>Reverse last k elements</li>
<li>Reverse all elements</li>
<li>Time complexity is O(n), Space complexity is O(1)</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><ol>
<li>create a new array to store all elements</li>
<li>reasign the value into the original array</li>
<li>Time complexity is O(n), Space complexity is O(n)</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">while</span>(k&gt;<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> target = nums[<span class="keyword">size</span>-<span class="number">1</span>];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-<span class="number">1</span>; i&gt;<span class="number">0</span>; i++)&#123;</div><div class="line">				nums[i] = nums[i-<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">			nums[<span class="number">0</span>] = target;</div><div class="line">			k--;</div><div class="line">		&#125; </div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[k];</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-k; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			tempArr[i-(<span class="keyword">size</span>-k)] = nums[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="keyword">size</span>-<span class="number">1</span>; i&gt;=k; i--) &#123;</div><div class="line">			nums[i] = nums[i-k];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</div><div class="line">			nums[i] = tempArr[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="number">0</span>,<span class="keyword">size</span>-k-<span class="number">1</span>);</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="keyword">size</span>-k,<span class="keyword">size</span>-<span class="number">1</span>);</div><div class="line">		<span class="keyword">reverse</span>(nums,<span class="number">0</span>,<span class="keyword">size</span>-<span class="number">1</span>);</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">reverse</span>(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right) &#123;</div><div class="line">		<span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line">			<span class="keyword">int</span> temp = nums[left];</div><div class="line">			nums[left] = nums[right];</div><div class="line">			nums[right] = temp;</div><div class="line">			left++;</div><div class="line">			right--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution4 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> rotate(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = nums.length;</div><div class="line">		<span class="keyword">int</span>[] copyArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">size</span>];</div><div class="line">		<span class="keyword">if</span>(k&gt;<span class="keyword">size</span>) k =k%<span class="keyword">size</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			copyArray[i] = nums[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">size</span>; i++) &#123;</div><div class="line">			nums[(i+k)%<span class="keyword">size</span>] = copyArray[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Element]]></title>
      <url>http://xinli90.com/2016/10/19/Remove-Element/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="external">Leetcode - Remove Element</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>Example:<br>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Maintain one pointer, point to the first location</li>
<li>Iterate each element, if the element is the same with target, do nothing</li>
<li>If not, replace the value which the pointer points using this element.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> removeElement(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> val) &#123;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">    		<span class="keyword">if</span>(num != val) &#123;</div><div class="line">    			nums[<span class="keyword">index</span>++] = num;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">index</span>;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum XOR of Two Numbers in an Array]]></title>
      <url>http://xinli90.com/2016/10/19/Maximum-XOR-of-Two-Numbers-in-an-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://" target="_blank" rel="external">Leetcode - Maximum XOR of Two Numbers in an Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Words in a String]]></title>
      <url>http://xinli90.com/2016/10/17/Reverse-Words-in-a-String/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="external">Leetcode - Reverse Words in a String</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string, reverse the string word by word.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.    </p>
<p>Update (2015-02-12):<br>For C programmers: Try to solve it in-place in O(1) space.</p>
<p>click to show clarification.</p>
<p>Clarification:<br>What constitutes a word?<br>A sequence of non-space characters constitutes a word.<br>Could the input string contain leading or trailing spaces?<br>Yes. However, your reversed string should not contain leading or trailing spaces.<br>How about multiple spaces between two words?<br>Reduce them to a single space in the reversed string.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>splitting on the regex for one-or-more whitespace, this takes care of multiple spaces/tabs/newlines/etc in the input. </li>
<li>Since the input could have leading/trailing whitespace, which would result in empty matches, I first trim the input string.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reverseWords(<span class="keyword">String</span> s) &#123;</div><div class="line">        <span class="keyword">String</span>[] <span class="keyword">array</span> = s.trim().split(<span class="string">" +"</span>);</div><div class="line">        <span class="comment">//String[] arr = s.trim().split("\\s+");</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">String</span> <span class="keyword">string</span> : <span class="keyword">array</span>) &#123;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="string">" "</span>+ <span class="keyword">string</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.substring(<span class="number">1</span>).toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h4><p>If we want to get reversed string for both word in string and letters in each word.</p>
<p>1.If there is single whitespace, we can use below to get.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">StringBuilder </span><span class="built_in">sb</span> = new <span class="keyword">StringBuilder(s.trim());</span></div><div class="line"><span class="symbol">return</span> <span class="built_in">sb</span>.<span class="keyword">reverse().toString();</span></div></pre></td></tr></table></figure>
<p>2.If there are multiple whitespaces,then we can use reverse word first, and then reverse each word.   </p>
<p>Or<br>similar way with single whitespace solution and then eliminate the multiple whitespaces to single one. </p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">String</span>[] array = s.<span class="built_in">trim</span>().<span class="built_in">split</span>(<span class="string">" +"</span>);</div><div class="line">		<span class="comment">//String[] arr = s.trim().split("\\s+");</span></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> string : array) &#123;</div><div class="line">			sb.insert(<span class="number">0</span>, <span class="string">" "</span>+ reverseString2(string));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.substring(<span class="number">1</span>).toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseString(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">return</span> sb.<span class="built_in">reverse</span>().toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseString2(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="built_in">char</span>[] arr = s.toCharArray();</div><div class="line">		<span class="built_in">int</span> left = <span class="number">0</span>, right = arr.length<span class="number">-1</span>;</div><div class="line">		<span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line">			<span class="built_in">char</span> temp = arr[left];</div><div class="line">			arr[left] = arr[right];</div><div class="line">			arr[right] = temp;</div><div class="line">			left++;</div><div class="line">			right--;</div><div class="line"> 		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(arr);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">String</span>[] arr = sb.<span class="built_in">reverse</span>().toString().<span class="built_in">split</span>(<span class="string">" +"</span>);</div><div class="line">		StringBuilder sb2 = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> string : arr) &#123;</div><div class="line">			sb2.<span class="built_in">append</span>(string+<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb2.substring(<span class="number">0</span>,sb2.length()<span class="number">-1</span>).toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution3&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> reverseWord(<span class="keyword">String</span> s) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.<span class="built_in">trim</span>());</div><div class="line">		<span class="keyword">return</span> sb.<span class="built_in">reverse</span>().toString().replaceAll(<span class="string">" +"</span>,<span class="string">" "</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Words in a String II]]></title>
      <url>http://xinli90.com/2016/10/17/Reverse-Words-in-a-String-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-words-in-a-string-ii/" target="_blank" rel="external">Leetcode - Reverse Words in a String II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.</p>
<p>The input string does not contain leading or trailing spaces and the words are always separated by a single space.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.     </p>
<p>Could you do it in-place without allocating extra space?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Reverse the whole string first</li>
<li>Reverse the each word </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> void reverseWords(char[] s) &#123;</div><div class="line">        <span class="comment">//reverse the whole string</span></div><div class="line">        <span class="built_in">reverse</span>(s,<span class="number">0</span>,s.length-<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;=s.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(i==s.length || s[i]==' ')&#123;</div><div class="line">                <span class="built_in">reverse</span>(s,j,i-<span class="number">1</span>);</div><div class="line">                j = i+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void <span class="built_in">reverse</span>(char[] s, int <span class="keyword">left</span>, int <span class="keyword">right</span>) &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">            char temp = s[<span class="keyword">left</span>];</div><div class="line">            s[<span class="keyword">left</span>] = s[<span class="keyword">right</span>];</div><div class="line">            s[<span class="keyword">right</span>] = temp;</div><div class="line">            <span class="keyword">left</span>++;</div><div class="line">            <span class="keyword">right</span>--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Permutation Sequence]]></title>
      <url>http://xinli90.com/2016/10/17/Permutation-Sequence/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="external">Leetcode - Permutation Sequence</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>
<p>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n = 3):   </p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"123"</span></div><div class="line"><span class="string">"132"</span></div><div class="line"><span class="string">"213"</span></div><div class="line"><span class="string">"231"</span></div><div class="line"><span class="string">"312"</span></div><div class="line"><span class="string">"321"</span></div></pre></td></tr></table></figure>
<p>Given n and k, return the kth permutation sequence.    </p>
<p>Note: Given n will be between 1 and 9 inclusive.   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Backtracking to get all string, and get the kth string.</li>
<li>For this solution it will get Time Limit Exceeded.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>If we don’t get Time Limit Exceeded, we shold use the formula to calculate each digit.</li>
<li>Notice that for n groups there are (n-1)! permutations in each group.(n-2)! permutations for n-1 groups…</li>
<li>So use k/(n-1)! to get first place, then k will be k%(n-1)!, it means we need iterate k%(n-1)! times for remaining numbers until the last place.</li>
</ol>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String getPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(lists,<span class="keyword">list</span>,n);</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : lists.get(k<span class="number">-1</span>)) &#123;</div><div class="line">            sb.append(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">int</span> n)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">list</span>.size() == n) &#123;</div><div class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">list</span>));</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">list</span>.contains(i)) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">list</span>.add(i);</div><div class="line">                helper(lists,<span class="keyword">list</span>,n);</div><div class="line">                <span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String getPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">    	<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</div><div class="line">    		<span class="keyword">list</span>.add(i);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">int</span>[] fact = <span class="keyword">new</span> fact[n];</div><div class="line">    	fact[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</div><div class="line">    		fact[i] = i*fact[i<span class="number">-1</span>];</div><div class="line">    	&#125;</div><div class="line">    	k = k<span class="number">-1</span>;</div><div class="line">    	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--)&#123;</div><div class="line">    		<span class="keyword">int</span> index = k/fact[i<span class="number">-1</span>];</div><div class="line">    		sb.append(<span class="keyword">list</span>.get(index));</div><div class="line">    		k = k%fact[i<span class="number">-1</span>];</div><div class="line">    		<span class="keyword">list</span>.remove(index);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Permutations II]]></title>
      <url>http://xinli90.com/2016/10/17/Permutations-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="external">Leetcode-Permutations II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<p>For example,<br>[1,1,2] have the following unique permutations</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>sort the array first, make sure the same number cluster together.</li>
<li>In order to avoid duplicate array, we need to check if the duplicate elements have already been used. Use a boolean array to track it.</li>
<li>If the current element is used or the current one is the same with previous one and the previous one is used. Then we don’t use it anymore. </li>
</ol>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	 <span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</div><div class="line">        Arrays.sort(nums);</div><div class="line">        helper(lists,<span class="keyword">list</span>,used,nums);</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">boolean</span>[] used,<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">list</span>.size()==nums.length) &#123;</div><div class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">list</span>));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</div><div class="line">                <span class="keyword">if</span>(used[i] || (i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>] &amp;&amp; used[i<span class="number">-1</span>])) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    used[i] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">list</span>.add(nums[i]);</div><div class="line">                    helper(lists,<span class="keyword">list</span>,used,nums);</div><div class="line">                    <span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">                    used[i] = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Next Permutation]]></title>
      <url>http://xinli90.com/2016/10/16/Next-Permutation/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations/" target="_blank" rel="external">Leetcode-Permutations</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place, do not allocate extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column. </p>
<p>1, 2, 3 → 1, 3, 2<br>3, 2, 1 → 1, 2, 3<br>1, 1, 5 → 1, 5, 1      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>首先从右往左找到一个点i, 使得nums[i]&lt;nums[i+1], 如果没有这样的点，说明该数组已经是Descending，直接reverse结束.</li>
<li>再从右往左找到大于i的点j，使得刚好nums[j]&gt;nums[i], 调换i 和 j 的值，找出下一个最大值，然后reverse后面的数组，使其数组变为最小值.</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> void nextPermutation(int[] nums) &#123;</div><div class="line">        int <span class="keyword">right</span> = nums.length-<span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">right</span>&gt;=<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[<span class="keyword">right</span>]&lt;nums[<span class="keyword">right</span>+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">right</span>--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">right</span>&lt;<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">reverse</span>(nums,<span class="keyword">right</span>+<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        int <span class="keyword">left</span> = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">right</span>&lt;<span class="keyword">left</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[<span class="keyword">left</span>]&gt;nums[<span class="keyword">right</span>])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">left</span>--;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">swap</span>(nums,<span class="keyword">right</span>,<span class="keyword">left</span>);</div><div class="line">        <span class="built_in">reverse</span>(nums,<span class="keyword">right</span>+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> void <span class="built_in">swap</span>(int[] nums, int i,int j) &#123;</div><div class="line">        int temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> void <span class="built_in">reverse</span>(int[] nums,int <span class="keyword">left</span>) &#123;</div><div class="line">        int <span class="keyword">right</span> = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">            <span class="built_in">swap</span>(nums,<span class="keyword">left</span>,<span class="keyword">right</span>);</div><div class="line">            <span class="keyword">left</span>++;</div><div class="line">            <span class="keyword">right</span>--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Permutations]]></title>
      <url>http://xinli90.com/2016/10/16/Permutations/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/permutations/" target="_blank" rel="external">Leetcode-Permutations</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of distinct numbers, return all possible permutations.</p>
<p>For example,<br>[1,2,3] have the following permutations:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Backtracking</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(lists,<span class="keyword">list</span>,nums);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> void helper(<span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Integer&gt;&gt; lists,<span class="keyword">List</span>&lt;Integer&gt; <span class="keyword">list</span>,<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">list</span>.size() == nums.length) &#123;</div><div class="line">			lists.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="keyword">list</span>));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(!<span class="keyword">list</span>.contains(nums[i])) &#123;</div><div class="line">				<span class="keyword">list</span>.add(nums[i]);</div><div class="line">				helper(lists,<span class="keyword">list</span>,nums);</div><div class="line">				<span class="keyword">list</span>.remove(<span class="keyword">list</span>.size()<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Duplicates from Sorted Array]]></title>
      <url>http://xinli90.com/2016/10/13/Remove-Duplicates-from-Sorted-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="external">Leetcode-Remove Duplicates from Sorted Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Maintain two pointers, left pointer and right pointer, they are adjacent at the beginning.</li>
<li>If the the value of first pointer is same to second one’s, shift second pointer right one step.</li>
<li>If they are not the same, then we will check the difference between two pointers first. If it’s greater than 1, it means we already have duplicate elements, we need change the value of index left+1 to the value of index right. If two pointer are still adjacent, do nothing. At last, shift two pointers right one step.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Just maintain one pointer, Using for each to iterate array, assign the value to the pointer’s location if the previous one and the current one are different.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">   <span class="keyword">public</span> <span class="built_in">int</span> removeDuplicates(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) return nums.length;</div><div class="line">       <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = <span class="number">1</span>;</div><div class="line">       <span class="keyword">while</span>(<span class="built_in">right</span>&lt;nums.length) &#123;</div><div class="line">           <span class="keyword">if</span>(nums[<span class="built_in">left</span>]!=nums[<span class="built_in">right</span>])&#123;</div><div class="line">               <span class="keyword">if</span>(<span class="built_in">left</span>+<span class="number">1</span>&lt;<span class="built_in">right</span>)&#123;</div><div class="line">                   nums[<span class="built_in">left</span>+<span class="number">1</span>] = nums[<span class="built_in">right</span>];</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">left</span>++;</div><div class="line">               <span class="built_in">right</span>++;</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               <span class="built_in">right</span>++;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       return <span class="built_in">left</span>+<span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">   <span class="keyword">public</span> <span class="built_in">int</span> removeDuplicates(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">   	<span class="built_in">int</span> i = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">       	<span class="keyword">if</span>(i==<span class="number">0</span> || nums[i<span class="number">-1</span>] &lt; num) &#123;</div><div class="line">       		nums[i++] = num;</div><div class="line">       	&#125;</div><div class="line">       &#125;</div><div class="line">       return i;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[House Robber]]></title>
      <url>http://xinli90.com/2016/10/13/House-Robber/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="external">Leetcode-House Robber</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>The time and space complexity is O(n)</p>
<ul>
<li>State: f[i] represents the maximum money the robber get rob until arriving the i-th house </li>
<li>Function: f[i] = Max(f[i-1],f[i-2]+nums[i])</li>
<li>Initialize: f[0] = nums[0], f[1] = nums[1]</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Similar way with solution1, but reduce the space complexity to O(1)</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="type">int</span> rob(<span class="type">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">length</span>==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="type">int</span>[] f = new <span class="type">int</span>[nums.<span class="built_in">length</span>];</div><div class="line">        f[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        f[<span class="number">1</span>] = Math.<span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">        	f[i] = Math.<span class="built_in">max</span>(f[i<span class="number">-1</span>],f[i<span class="number">-2</span>]+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[<span class="built_in">length</span><span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public <span class="type">int</span> rob(<span class="type">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">length</span>==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="type">int</span> last = <span class="number">0</span>, current = <span class="number">0</span>;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">        	<span class="type">int</span> temp = last; <span class="comment">// the i-2 th element</span></div><div class="line">        	last = current; <span class="comment">// the i-1 th element</span></div><div class="line">        	current = Math.<span class="built_in">max</span>(current,nums[i]+temp); <span class="comment">//the i-th element</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Count and Say]]></title>
      <url>http://xinli90.com/2016/10/13/Count-and-Say/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="external">Leetcode-Count and Say</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …     </p>
<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.   </p>
<p>Given an integer n, generate the nth sequence.     </p>
<p>Note: The sequence of integers will be represented as a string.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Notice: There is a misunderstanding place that we always start from “1”, not “n”. But we need calculate n times</p>
<ol>
<li>Maintain two pointers, Using first pointer iterate each element and the second pointer to find out if the adjacent element is the same.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> countAndSay(<span class="built_in">int</span> n) &#123;</div><div class="line">        return count(<span class="string">"1"</span>,n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="built_in">String</span> count(<span class="built_in">String</span> s, <span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) return s;</div><div class="line">        char[] arr = s.toCharArray();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">0</span>;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">left</span>&lt;arr.length) &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">right</span> = <span class="built_in">left</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">right</span>&lt;arr.length &amp;&amp; arr[<span class="built_in">left</span>]==arr[<span class="built_in">right</span>])&#123;</div><div class="line">                <span class="built_in">right</span>++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">int</span> num = <span class="built_in">right</span>-<span class="built_in">left</span>;</div><div class="line">            sb.append(num+<span class="string">""</span>+arr[<span class="built_in">left</span>]);</div><div class="line">            <span class="built_in">left</span> = <span class="built_in">right</span>;</div><div class="line">        &#125;</div><div class="line">        return count(sb.toString(),n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Subarray]]></title>
      <url>http://xinli90.com/2016/10/12/Maximum-Subarray/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="external">Leetcode-Maximum Subarray</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.      </p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],</p>
<p>the contiguous subarray [4,-1,2,1] has the largest sum = 6.  </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-DP"><a href="#Solution-DP" class="headerlink" title="Solution: DP"></a>Solution: DP</h4><ol>
<li>State: sum[i] represents the largest sum in location i.</li>
<li>Function: if(sum[i-1]&gt;0),then sum[i] = sum[i-1]+nums[i], else sum[i] = nums[i].</li>
<li>Initialize: sum[0] = nums[0]</li>
<li>Answer: the maximum of sum[i]</li>
</ol>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxSubArray(<span class="built_in">int</span>[] nums) &#123;</div><div class="line">        <span class="built_in">int</span>[] <span class="built_in">sum</span> = new <span class="built_in">int</span>[nums.length];</div><div class="line">        //initiazlie</div><div class="line">        <span class="built_in">sum</span>[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="built_in">int</span> <span class="built_in">max</span> = <span class="built_in">sum</span>[<span class="number">0</span>];</div><div class="line">        //<span class="function"><span class="keyword">function</span></span></div><div class="line">        for(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(<span class="built_in">sum</span>[i-<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</div><div class="line">        		<span class="built_in">sum</span>[i] = <span class="built_in">sum</span>[i-<span class="number">1</span>] + nums[i];</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		<span class="built_in">sum</span>[i] = nums[i];</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, <span class="built_in">sum</span>[i]);</div><div class="line">        &#125;</div><div class="line">        //answer</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Add Digits]]></title>
      <url>http://xinli90.com/2016/10/12/Add-Digits/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-digits/" target="_blank" rel="external">Leetcode-Add Digits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<p>Follow up:<br>Could you do it without any loop/recursion in O(1) runtime?   </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Each time iterate the number and get sum of each digits. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>First you should understand:</p>
<p>10^k % 9 = 1<br>a*10^k % 9 = a % 9       </p>
<p>Then let’s use an example to help explain.</p>
<p>Say a number x = 23456</p>
<p>x = 2<em> 10000 + 3 </em> 1000 + 4 <em> 100 + 5 </em> 10 + 6</p>
<p>2 * 10000 % 9 = 2 % 9</p>
<p>3 * 1000 % 9 = 3 % 9</p>
<p>4 * 100 % 9 = 4 % 9</p>
<p>5 * 10 % 9 = 5 % 9</p>
<p>Then x % 9 = ( 2+ 3 + 4 + 5 + 6) % 9, note that x = 2<em> 10000 + 3 </em> 1000 + 4 <em> 100 + 5 </em> 10 + 6</p>
<p>So we have 23456 % 9 = (2 + 3 + 4 + 5 + 6) % 9</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> addDigits(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>&gt;=<span class="number">10</span>) &#123;</div><div class="line">            <span class="built_in">int</span> digit=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">num</span>&gt;<span class="number">0</span>) &#123;</div><div class="line">                digit += <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">                <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">num</span> = digit;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">     public <span class="built_in">int</span> addDigits(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">     	<span class="keyword">if</span>(<span class="built_in">num</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">num</span> % <span class="number">9</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">9</span>;</div><div class="line">     	<span class="keyword">return</span> <span class="built_in">num</span>%<span class="number">9</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Random Pick Index]]></title>
      <url>http://xinli90.com/2016/10/11/Random-Pick-Index/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/random-pick-index/" target="_blank" rel="external">Leetcode-Random Pick Index</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>
<p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p>
<p>Example:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int[] nums =<span class="built_in"> new </span>int[] &#123;1,2,3,3,3&#125;;</div><div class="line">Solution solution =<span class="built_in"> new </span>Solution(nums);</div><div class="line"></div><div class="line">// pick(3) should<span class="built_in"> return </span>either index 2, 3,<span class="built_in"> or </span>4 randomly. Each index should have equal probability of returning.</div><div class="line">solution.pick(3);</div><div class="line"></div><div class="line">// pick(1) should<span class="built_in"> return </span>0. Since in the<span class="built_in"> array </span>only nums[0] is equal to 1.</div><div class="line">solution.pick(1);</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Use the similar solution in <a href="https://leetcode.com/problems/linked-list-random-node/" target="_blank" rel="external">Linked List Random Node</a></p>
<p><a href="https://en.wikipedia.org/wiki/Reservoir_sampling" target="_blank" rel="external">Wiki - Reservoir Sampling</a></p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</div><div class="line">    <span class="keyword">private</span> Random random;</div><div class="line">    <span class="keyword">public</span> Solution(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">this</span>.nums = nums;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pick(<span class="keyword">int</span> target) &#123;</div><div class="line">       <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">           <span class="keyword">if</span>(nums[i]==target) &#123;</div><div class="line">               <span class="keyword">count</span>++;</div><div class="line">               <span class="keyword">if</span>(random.nextInt(<span class="keyword">count</span>)==<span class="number">0</span>) &#123;</div><div class="line">                   result = i;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; </div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your Solution object will be instantiated and called as such:</div><div class="line"> * Solution obj = new Solution(nums);</div><div class="line"> * int param_1 = obj.pick(target);</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linked List Random Node]]></title>
      <url>http://xinli90.com/2016/10/11/Linked-List-Random-Node/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/linked-list-random-node/" target="_blank" rel="external">Leetcode-Linked List Random Node</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>
<p>Follow up:</p>
<p>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>
<p>Example:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init a singly linked list [1,2,3].</span></div><div class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">head.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</div><div class="line">head.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</div><div class="line">Solution solution = <span class="keyword">new</span> Solution(head);</div><div class="line"></div><div class="line"><span class="comment">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</span></div><div class="line">solution.getRandom();</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate each node and get the length of Linked list</li>
<li>randomly select one node</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>In order to get the same probabilities for each node, we should interate each node once and get the node</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">private</span> ListNode node;</div><div class="line">    <span class="keyword">private</span> Random random;</div><div class="line">    </div><div class="line">    /** @param head The linked list<span class="comment">'s head.</span></div><div class="line">        Note that the head <span class="keyword">is</span> guaranteed <span class="keyword">to</span> be <span class="keyword">not</span> <span class="literal">null</span>, so it contains at least one node. */</div><div class="line">    <span class="keyword">public</span> Solution(ListNode head) &#123;</div><div class="line">        node = head;</div><div class="line">        random = <span class="keyword">new</span> Random();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /** Returns a random node<span class="comment">'s value. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        ListNode result = <span class="literal">null</span>;</div><div class="line">        ListNode current = node;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;current!=<span class="literal">null</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(random.nextInt(i)==<span class="number">0</span>)&#123;</div><div class="line">                result = current;</div><div class="line">            &#125;</div><div class="line">            current = current.<span class="keyword">next</span>;</div><div class="line">        &#125;</div><div class="line">        return result.val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Solution object will be instantiated <span class="keyword">and</span> called as such:</div><div class="line"> * Solution obj = <span class="keyword">new</span> Solution(head);</div><div class="line"> * <span class="built_in">int</span> param_1 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day19 DataBase]]></title>
      <url>http://xinli90.com/2016/10/11/Day19-DataBase/</url>
      <content type="html"><![CDATA[<p>本篇是关于Database的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种SQL特性</li>
<li>总结用法和分析优化思路</li>
</ul>
<h2 id="Relational-DB-and-NoSql"><a href="#Relational-DB-and-NoSql" class="headerlink" title="Relational DB and NoSql"></a>Relational DB and NoSql</h2><ul>
<li><p>NoSQL与Relational DB区别：SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today’s real-world highly growing applications. NoSql in contrast uses a flexible structure which can be easily modified and extended.</p>
</li>
<li><p>NoSql: A NoSql database provides a mechanism for storage and retrieval of data that is modeled. The types : Document Oriented, Key Value, Graph, Column Oriented.</p>
</li>
<li><p>MongoDB: It is a document oriented database. It stores data in the form of BSON structure based documents. These documents are stored in a collection. Advantage: Flexible data model in form of documents, Agile and highly scalable database, Faster than traditional databases, Expressive query language.</p>
</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="UNION-and-UNION-ALL"><a href="#UNION-and-UNION-ALL" class="headerlink" title="UNION and UNION ALL"></a>UNION and UNION ALL</h3><ul>
<li><p>UNION:Merge two structurally-compatible tables into a single table and omit the duplicate records.</p>
</li>
<li><p>UNION ALL: Merge contents of two tables into one table but include duplicate records. It is more efficient than UNION, because it doesn’t need omit duplicate records.</p>
</li>
</ul>
<h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><ul>
<li><p>INNER JOIN: The simple and default join.</p>
</li>
<li><p>LEFT JOIN: Returns all rows from the left table, and the matched rows from the right table. This means that if the ON clause doesn’t match any records in the right table, the JOIN will still return a row in the result for that record in the left table, but with NULL in each column from the right table.</p>
</li>
<li><p>RIGHT JOIN: Returns all rows from the right table, and the matched rows from the left table. </p>
</li>
<li><p>FULL JOIN: Combine LEFT JOIN and RIGHT JOIN, return all rows for which there is a match in either of the tables. Its result is similar with UNION. (with NULL for some columns)</p>
</li>
<li><p>CROSS JOIN: Returns all records where each row from the first table is combined with each row from the second table.</p>
</li>
</ul>
<h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>customer id 不为123 的客户的数量：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">AS</span> cust_not_total </div><div class="line"><span class="keyword">from</span> orders</div><div class="line"><span class="keyword">where</span> customer_id &lt;&gt; <span class="string">'123'</span></div></pre></td></tr></table></figure>
<p>注意： Any records with a customer_id of NULL will not be included in either count.</p>
<h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><p>Use <code>is</code> instead of <code>=</code>, when we want to compare a value to null.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//expected result is YUP</div><div class="line"><span class="keyword">select</span> <span class="keyword">case</span></div><div class="line"><span class="keyword">when</span> <span class="literal">null</span> <span class="keyword">is</span> <span class="literal">null</span></div><div class="line"><span class="keyword">then</span> <span class="string">'YUP'</span> <span class="keyword">else</span> <span class="string">'Nope'</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">as</span> <span class="keyword">Result</span></div></pre></td></tr></table></figure>
<p>Anything compared to <code>NULL</code> evaluates to <code>UNKNOWN</code>, it includes NULL itself.</p>
<p>So below sql cannot get the result which ReferreddBy == NULL.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<p>We should use:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> <span class="keyword">Name</span> <span class="keyword">From</span> Customers</div><div class="line"><span class="keyword">Where</span> ReferreddBy <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> ReferreddBy &lt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h3><p>If the set being evaluated by the <code>NOT IN</code> contains any null values, the result will return an empty set.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> *</div><div class="line"><span class="keyword">from</span> runners</div><div class="line"><span class="keyword">where</span> runners.id <span class="keyword">NOT</span> <span class="keyword">IN</span></div><div class="line">(<span class="keyword">select</span> winner_id <span class="keyword">from</span> races <span class="keyword">where</span> winner_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">null</span>)</div></pre></td></tr></table></figure>
<p>For MySql:</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">not</span> <span class="keyword">in</span> </div><div class="line"><span class="built_in">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Sql Sergver, SQLite,PostgreSQL, we can also use:</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</div><div class="line"><span class="keyword">except</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B</div></pre></td></tr></table></figure>
<p>For Oracle, we can use <code>minus</code>.</p>
<h3 id="Execution-order"><a href="#Execution-order" class="headerlink" title="Execution order"></a>Execution order</h3><p>The sql statement is not processed generally top-to-bottom or left-to-right. It’s in differenct order.<br>So this is wrong:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> BillingYear &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<p>It should be:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Id</span>, <span class="keyword">YEAR</span>(BillingDate) <span class="keyword">AS</span> BillingYear</div><div class="line"><span class="keyword">FROM</span> Invoices</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(BillingDate) &gt;= <span class="number">2010</span>;</div></pre></td></tr></table></figure>
<h3 id="WHERE-and-HAVING"><a href="#WHERE-and-HAVING" class="headerlink" title="WHERE and HAVING"></a>WHERE and HAVING</h3><p>When <code>GROUP BY</code> is not used, the <code>WHERE</code> and <code>HAVING</code> clauses are essentially equivalent.</p>
<p>However, when <code>GROUP BY</code> is used:</p>
<ul>
<li>The <code>WHERE</code> clause is used to filter records from a result. The filtering occurs before any grouping are made.</li>
<li>The <code>HAVING</code> clause is used to filter values from a group(to check conditions after aggregation into groups has been performed).</li>
</ul>
<h2 id="常见考题"><a href="#常见考题" class="headerlink" title="常见考题"></a>常见考题</h2><ol>
<li>Write a SQL query to find the 10th highest employee salary from an Employee table. Explain your answer.</li>
</ol>
<p>For MySQL and PostreSQL, we can use <code>LIMIT</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Salary <span class="keyword">from</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">LIMIT</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>For other database, we can use <code>TOP</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> TOP(<span class="number">1</span>) Salary <span class="keyword">From</span></div><div class="line">(</div><div class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> TOP(<span class="number">10</span>) Salary</div><div class="line">	<span class="keyword">From</span> Employee</div><div class="line">	<span class="keyword">Order</span> <span class="keyword">by</span> Salary <span class="keyword">DESC</span></div><div class="line">) <span class="keyword">AS</span> Emp <span class="keyword">Order</span> <span class="keyword">by</span> Salary;</div></pre></td></tr></table></figure>
<h3 id="参考-Reference-："><a href="#参考-Reference-：" class="headerlink" title="参考(Reference)："></a>参考(Reference)：</h3><p><a href="">https://www.toptal.com/sql/interview-questions</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day18 Design Pattern]]></title>
      <url>http://xinli90.com/2016/10/09/Day18-Design-Pattern/</url>
      <content type="html"><![CDATA[<p>本篇是关于Design Pattern的介绍和用途.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>总结归纳各种Design Pattern特性</li>
<li>总结Design Pattern用法和常见情景</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h3><p>一般在全局只有一个资源且需要保证只有一个时调用,我们在observer和Hibernate的sessionFactory中使用。</p>
<p>What’s the Singleton: Create the object while making sure only one instanec of object gets created. Provide one global point to access it.      </p>
<p>When to use: if we only have one resource, such as thread pool,in-memory cache, hardware resources(printer), many instances of one object will make the multiple result. </p>
<p>饿汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懒汉模式：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>= null;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">		<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程安全模式的三种方法：</p>
<ol>
<li>对getInstance()方法直接加synchronized，对整个方法加锁，比较耗资源</li>
<li>使用饿汉方法 </li>
<li>双重检查加锁法（推荐）</li>
</ol>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Class Singleton &#123;</div><div class="line"><span class="keyword">	private</span><span class="keyword"> static</span> volatile Singleton instance;</div><div class="line"><span class="keyword">	private</span> Singleton()&#123;&#125;</div><div class="line"><span class="keyword">	public</span><span class="keyword"> static</span> Singleton getInstance() &#123;</div><div class="line">		if(instance == null) &#123;</div><div class="line">			synchronized(Singleton.class) &#123;</div><div class="line">				if(instance == null) &#123;</div><div class="line">				<span class="built_in">	instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">	return </span>instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h3><p>用clone的方式来创建<code>重复</code>对象，避免一直创建对象所带来的资源耗损。并且能够简化复杂对象的创建过程。<br>Prototype pattern refers to creating duplicate object while keeping performance in mind. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>例如发送广告信息给500万用户，如果一条一条发的话可能需要好几天时间，相当于获取一个个创建的model object中信息并输出。如果创建多线程同时发送，并且避免创建500W个object带来的资源耗损，可以使用一个通用的object，然后每次copy得到新的实例而不是使用构造函数得到新实例，再修改里面一部分variable并且不会影响原Object来实现。</p>
<p>这就要求： 首先Object class 继承 Cloneable接口.     </p>
<p>注意： 这里的clone只能是shallow copy, 所以只能拷贝primitive type的值和对象、数组的reference，我们需要对 对象、数组进行deep copy.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; ars; </div><div class="line">	<span class="keyword">public</span> Message()&#123;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> Message <span class="keyword">clone</span>() &#123;	</div><div class="line">		Message message = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			message = (Message)super.<span class="keyword">clone</span>();</div><div class="line">			message.ars = (ArrayList&lt;String&gt;) this.ars.<span class="keyword">clone</span>();</div><div class="line">		&#125; <span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候则可以只创建一个新的object，之后不断clone来创建新的object.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Message</span> <span class="keyword">message</span> = new <span class="keyword">Message</span>();</div><div class="line">int i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</div><div class="line">	<span class="keyword">Message</span> cloneMes = <span class="keyword">message</span>.clone();</div><div class="line">	....</div><div class="line">	sendMessage(cloneMes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>在实现clone时可能需要实现复杂的代码，多重嵌套引用的deep copy很麻烦；     </li>
<li>每一个类都需要配置clone方法，当对已有类进行改造是，需要修改源代码，违背“开闭原则”.      </li>
</ol>
<h3 id="Memento-Patthern"><a href="#Memento-Patthern" class="headerlink" title="Memento Patthern"></a>Memento Patthern</h3><p>备忘录模式：在不破坏封装的前提下，存储关键对象的重要状态，从而可以在将来把对象还原到存储的那个状态.<br>场景应用：比如保存游戏进度，当前很多软件的撤销(Undo)操作。       </p>
<p>优点:</p>
<ol>
<li>状态存储在外面，不和关键对象混在一起，可以帮助维护内聚.</li>
<li>提供了容易实现的恢复能力</li>
<li>保持了关键对象的数据封装</li>
</ol>
<p>核心模块：</p>
<ul>
<li>Memento(备忘录): 是一个model object，用来保存数据.     </li>
<li>Originator(原发器): 用来操作Memento，拥有save()和restore()方法用来存储当前状态和恢复之前状态.     </li>
<li>CareTaker(负责人): 用它来负责保存所有Memento，但是不能对Memento进行操作.</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Class Memento &#123;</div><div class="line">	<span class="comment">//一个正常的model object</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Memento(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getStatus() &#123;</div><div class="line">		<span class="keyword">return</span> status;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Originator &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> status;</div><div class="line">	<span class="keyword">public</span> Originator(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setStatus(<span class="keyword">String</span> status) &#123;</div><div class="line">		<span class="keyword">this</span>.status = status;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Memento <span class="built_in">save</span>() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memento(status);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> restore(Memento me) &#123;</div><div class="line">		<span class="keyword">this</span>.status = me.getStatus();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class CareTaker &#123;</div><div class="line">	<span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">public</span> Memento getMemento(<span class="built_in">int</span> step) &#123;</div><div class="line">		<span class="keyword">return</span> mementoList.<span class="built_in">get</span>(step);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setMemento(Memento memento) &#123;</div><div class="line">		<span class="keyword">this</span>.mementoList.<span class="built_in">add</span>(memento);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Main &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		CareTaker careTaker = <span class="keyword">new</span> CareTaker();</div><div class="line">		Originator originator = <span class="keyword">new</span> Originator(<span class="string">"initialize"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"media"</span>);</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">		originator.setStatus(<span class="string">"hard"</span>);</div><div class="line">		<span class="comment">//back to step 1</span></div><div class="line">		originator.restore(careTaker.getMemento(<span class="number">0</span>));</div><div class="line">		careTaker.setMemento(originator.<span class="built_in">save</span>());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Visitor-Pattern"><a href="#Visitor-Pattern" class="headerlink" title="Visitor Pattern"></a>Visitor Pattern</h3><p>访问者模式，行为模式之一，可以不修改已有类的情况下，增加新的操作。</p>
<p>优点：</p>
<ol>
<li>能够在不修改Model Object的情况下，为对象添加新的功能</li>
<li>可以通过访问者来分离无关的行为，把相关的行为封装在一起，构成访问者，这样每一个访问者的功能都比较单一</li>
</ol>
<p>缺点：</p>
<ol>
<li>不适用于object的结构经常变换的情况</li>
<li>访问者模式通常需要对象结构开放内部数据给访问者，破坏了对象的封装性.</li>
</ol>
<p>举例：雇员管理系统</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//雇员</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//把自己暴露给访问者</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">		visitor.Visit(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//唯一要根据需要 变的部分</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span></span>&#123;</div><div class="line">		Employee employee = ((Employee) element);</div><div class="line">		System.out.println(employee.getName()+<span class="string">"da"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//雇员管理</span></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Employees</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String,Employee&gt; employees;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">()</span></span>&#123;</div><div class="line">		employees = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Employee e : employees.values()) &#123;</div><div class="line">			e.Accept(visitor);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mediator-Pattern"><a href="#Mediator-Pattern" class="headerlink" title="Mediator Pattern"></a>Mediator Pattern</h3><p>替代原来各物体之间的交互，而使用中介者来与所有的物体打交道。<br>Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and suports easy maintance of the code by loose coupling.</p>
<p>适用场合：</p>
<ol>
<li>一组对象之间的通信复杂，导致相互依赖，结构混乱</li>
<li>一个对象引用很多其他对象并直接与这些对象通信，导致难以复用 </li>
</ol>
<p>优点：</p>
<ol>
<li>通过将对象彼此解耦，增加对象的复用性</li>
<li>将控制逻辑集中，简化系统维护</li>
<li>可以让对象之间所传递的消息变得简单且大幅减少</li>
<li>提供系统灵活性，易于扩展</li>
</ol>
<p>缺点：</p>
<ol>
<li>中介者承担较多责任，一旦出问题整个系统都会受到影响</li>
<li>如果设计不当，中介者对象本身变得过于复杂</li>
</ol>
<p>举例：<br>智能家电,中介者协调咖啡机，电视机，闹钟之间的通信</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class ConcreteMediator implements Mediator &#123;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;</div><div class="line">	<span class="keyword">private</span> HashMap&lt;String, String&gt; nameMap;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span> </span>&#123;</div><div class="line">		colleagueMap = <span class="keyword">new</span> HashMap&lt;String, Colleague&gt;();</div><div class="line">		nameMap = <span class="keyword">new</span> HashMap&lt;String, Colleague&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span> </span>&#123;</div><div class="line">		colleagueMap.put(colleagueName,colleague);</div><div class="line">		<span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> Alarm)&#123;</div><div class="line">			nameMap.put(<span class="string">"Alarm"</span>, colleagueName);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> CoffeeMachine)&#123;</div><div class="line">			nameMap.put(<span class="string">"CoffeeMachine"</span>, colleagueName);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> TV)&#123;</div><div class="line">			nameMap.put(<span class="string">"TV"</span>, colleagueName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Alarm) &#123;</div><div class="line">			<span class="keyword">if</span>(stateChange == <span class="number">0</span>) &#123;</div><div class="line">				((CoffeeMachine)(colleagueMap.get(nameMap.get(<span class="string">"CoffeeMachine"</span>)))).StartCoffee();	</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stateChange == <span class="number">1</span>) &#123;</div><div class="line">				((TV)(colleagueMap.get(nameMap.get(<span class="string">"TV"</span>)))).StartTV();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> TV)&#123;</div><div class="line">			...</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Mediator mediator;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mediator = mediator;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Mediator <span class="title">GetMediator</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.mediator;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Alarm</span><span class="params">(Mediator mediator, String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(mediator,name);</div><div class="line">		mediator.Register(name,<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendAlarm</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>&#123;</div><div class="line">		SendMessage(stateChange);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.GetMediator().ShowMessage(stateChange,<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMachine</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">		Alarm a = <span class="keyword">new</span> Alarm(mediator,<span class="string">"a"</span>);</div><div class="line">		CoffeeMachine c = <span class="keyword">new</span> CoffeeMachine(mediator,<span class="string">"c"</span>);</div><div class="line">		a.SendAlarm(<span class="number">0</span>);</div><div class="line">		a.SendAlarm(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Interpreter-Pattern"><a href="#Interpreter-Pattern" class="headerlink" title="Interpreter Pattern"></a>Interpreter Pattern</h3><p>解释器模式就是定义语言的文法，并且建立一个解释器来解释该语言中的句子.<br>Interpreter Pattern provides a way to evaluate language grammar or expression. </p>
<p>应用场合：SQL parsing, symbol processing engine(一些数据分析工具，报表设计工具，科学计算工具).</p>
<p>举例：Calculator</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	public <span class="keyword">abstract</span> <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">VarExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">String</span> key;</div><div class="line">	public <span class="type">VarExpression</span>(<span class="type">String</span> key) &#123;</div><div class="line">		<span class="keyword">this</span>.key = key;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">var</span>.get(<span class="keyword">this</span>.key);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line">	<span class="keyword">protected</span> <span class="type">AbstractExpresstion</span> left;</div><div class="line">	<span class="keyword">protected</span> <span class="type">AbstractExpresstion</span> right;</div><div class="line">	public <span class="type">SymbolExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">this</span>.left = left;</div><div class="line">		<span class="keyword">this</span>.right = right;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//乘法</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MultiExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</div><div class="line">	public <span class="type">MultiExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">super</span>(left,right);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="comment">//recrusive way to execute</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) * <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//加法</span></div><div class="line">public <span class="type">AddExpression</span> <span class="keyword">extends</span> <span class="type">SymbolExpression</span> &#123;</div><div class="line">	public <span class="type">MultiExpression</span>(<span class="type">AbstractExpresstion</span> left,<span class="type">AbstractExpresstion</span> right) &#123;</div><div class="line">		<span class="keyword">super</span>(left,right);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">Float</span> interpreter(<span class="type">HashMap</span>&lt;<span class="type">String</span>,<span class="type">Float</span>&gt; <span class="keyword">var</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) + <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RPN</span> </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">//添加HashMap里的+-*/()等，以及逻辑运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Chain-of-Responsibility-Pattern"><a href="#Chain-of-Responsibility-Pattern" class="headerlink" title="Chain of Responsibility Pattern"></a>Chain of Responsibility Pattern</h3><p>如果有多个对象都有机会处理请求，责任链可使请求的发送者和接收者解耦，请求沿着责任链传递，直到有一个处理了它为止.<br>It creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request.<br>In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on.</p>
<p>优点：</p>
<ol>
<li>将请求的发送者和接收者解耦，使多个对象都有机会处理这个请求</li>
<li>可以简化对象，因为无需知道链的结构</li>
<li>可以动态地增加或删减处理请求的链结构</li>
</ol>
<p>缺点：</p>
<ol>
<li>请求从链的开头进行遍历，对性能有一定的损耗</li>
<li>并不保证请求一定被处理</li>
</ol>
<p>适用场合：</p>
<ol>
<li>有多个对象可以处理一个请求</li>
<li>不明确接收者的情况</li>
<li>有序、无序链，线型、树形、环形链</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> PurchaseRequest &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	Approver successor;</div><div class="line">	String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Approver</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Approver successor)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.successor = successor;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GroupApprover</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Name + <span class="string">" GroupLeader"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(request.getSum()&gt;<span class="number">5000</span>)&#123;</div><div class="line">			...</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			successor.processRequest(request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViceApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViceApprover</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Name + <span class="string">" GroupLeader"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(request.getSum()&lt;<span class="number">5000</span>)&#123;</div><div class="line">			...</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			successor.processRequest(request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Approver groupLeader = <span class="keyword">new</span> GroupApprover(<span class="string">"Tom"</span>);</div><div class="line">		Approver vicePresident = <span class="keyword">new</span> ViceApprover(<span class="string">"Jim"</span>);</div><div class="line">		groupLeader.setSuccessor(vicePresident);</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day17 JavaScript Introduction]]></title>
      <url>http://xinli90.com/2016/10/05/Day17-JavaScript-Introduction/</url>
      <content type="html"><![CDATA[<p>本篇是关于JavaScript高级特性和应用</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆JavaScript特性</li>
<li>总结JavaScript特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>prototype</li>
<li>闭包</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Max Points on a Line]]></title>
      <url>http://xinli90.com/2016/10/05/Max-Points-on-a-Line/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="external">Leetcode-Max Points on a Line</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>A line is determined by two factors, y = ax +b.<br>If two points (x1,y1) and (x2,y2) are in the same line.<br>Then a = y1-y2/x1-x2. We can count each point for all other points and get the maximum.<br>If there are some overlap points, just count it and add at last.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * class Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() &#123; x = 0; y = 0; &#125;</div><div class="line"> *     Point(int a, int b) &#123; x = a; y = b; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxPoints(Point[] points) &#123;</div><div class="line">        <span class="keyword">if</span>(points==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(points.length&lt;=<span class="number">2</span>) <span class="keyword">return</span> points.length;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,<span class="keyword">HashMap</span>&lt;Integer,Integer&gt;&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="built_in">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;points.length<span class="number">-1</span>; i++) &#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">            <span class="built_in">int</span> overlap = <span class="number">0</span>;</div><div class="line">            <span class="built_in">map</span>.<span class="built_in">clear</span>();</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j=i+<span class="number">1</span>; j&lt;points.length; j++) &#123;</div><div class="line">                <span class="built_in">int</span> x = points[j].x - points[i].x;</div><div class="line">                <span class="built_in">int</span> y = points[j].y - points[i].y;</div><div class="line">                <span class="keyword">if</span>(x==<span class="number">0</span> &amp;&amp; y==<span class="number">0</span>)&#123;</div><div class="line">                    overlap++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//in order to get y/x, we need simplify the integrals</span></div><div class="line">                <span class="built_in">int</span> gcd = generateGCD(x,y);</div><div class="line">                <span class="keyword">if</span>(gcd!=<span class="number">0</span>) &#123;</div><div class="line">                    x /= gcd;</div><div class="line">                    y /= gcd;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(x))&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(x).containsKey(y)) &#123;</div><div class="line">                        <span class="built_in">map</span>.<span class="built_in">get</span>(x).put(y,<span class="built_in">map</span>.<span class="built_in">get</span>(x).<span class="built_in">get</span>(y)+<span class="number">1</span>);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">map</span>.<span class="built_in">get</span>(x).put(y,<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; m = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">                    m.put(y,<span class="number">1</span>);</div><div class="line">                    <span class="built_in">map</span>.put(x,m);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,<span class="built_in">map</span>.<span class="built_in">get</span>(x).<span class="built_in">get</span>(y));</div><div class="line">            &#125;</div><div class="line">            result = Math.<span class="built_in">max</span>(result,<span class="built_in">max</span>+overlap+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span> generateGCD(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">return</span> x%y == <span class="number">0</span>? y : generateGCD(y,x%y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day16 Linux common operation]]></title>
      <url>http://xinli90.com/2016/10/04/Day16-Linux-common-operation/</url>
      <content type="html"><![CDATA[<p>本篇是关于Linux常用命令</p>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><ul>
<li>ls: 显示文件和目录列表<ul>
<li>ls -l : 列出所有文件的详细信息</li>
<li>ls -a : 列出当前目录的所有文件，包含隐藏文件</li>
</ul>
</li>
<li>mkdir ** : 创建文件夹 (mkdir job)<ul>
<li>mkdir -p <em>/*</em> :     创建多层文件夹</li>
</ul>
</li>
<li>cd ** : 进入目录<ul>
<li>cd - : 进入这个目录之前的那个目录 </li>
</ul>
</li>
<li>touch **文件名 : 生成一个空文件 (touch s.text)</li>
<li>echo ‘<em>内容’&gt; </em>文件名(带类型) : 生成一个带内容的文件 (echo ‘I love you’&gt;s.text)</li>
<li>cat/tac **文件名 : 显示文本文件内容 (cat s.text)</li>
<li>cp <em>文件名1(source file) </em>文件名2(target file): 复制文件或者目录，从一个文件到另一个文件(cp s.text d.text)<ul>
<li>cp -r <strong>文件夹1 </strong>文件夹2 : 把一个文件夹及其里面所有文件复制到另一个文件夹，-r表示recursive (cp -r ss sa/)</li>
</ul>
</li>
<li><p>rm **文件名 : 删除文件(rm s.text)</p>
<ul>
<li>rm -r **文件名 : 同时删除该目录下的所有文件</li>
<li>rm -f **文件名 : 强制删除文件或目录 (rm -fr job)</li>
</ul>
</li>
<li><p>mv 文件或文件夹1 文件夹2 : (mv aa bb)如果bb存在则把文件夹aa移动到bb文件夹下，如果bb不存在则把文件夹aa改名为bb</p>
</li>
<li>find 查找指定文件<ul>
<li>find -name 文件名: 查找指定文件名的文件</li>
<li>find -iname 文件名: 忽略大小写查找文件</li>
</ul>
</li>
<li>wc 文件 : 统计文本文档的行数、字数、字符数（wc t.text）</li>
<li>grep : 查找指定的文本文件中指定的字符串<ul>
<li>grep -rsi 关键字 目录: (grep -rsni lvoe .)在当前目录下寻找关键字为lvoe的文件，显示行数，忽略大小写、错误拼写 </li>
</ul>
</li>
<li>rmdir: 删除空目录 </li>
<li>pwd: 显示当前工作目录</li>
<li>more/less : 分页显示文本文件内容</li>
<li>ln : 建立链接文件<ul>
<li>ln -s 路径 代号: (ln -s cc/bb/aa/ ee) 保存cc/bb/aa/ 这个路径为ee，之后可以直接cd ee/进入</li>
</ul>
</li>
</ul>
<h3 id="信息显示命令"><a href="#信息显示命令" class="headerlink" title="信息显示命令"></a>信息显示命令</h3><ul>
<li>stat 文件名 : 显示文件或者文件夹更详细的信息</li>
<li>who : 显示在线登录用户</li>
<li>whoami : 显示用户自己的身份</li>
<li>hostname : 显示主机名称</li>
<li>uname : 显示系统信息</li>
<li>dmesg : 显示系统启动信息，通常权限不够需要使用sudo dmesg</li>
<li>top : 显示当前系统中耗费资源最多的进程</li>
<li>ps :  显示瞬间的进程状态</li>
<li>du : 显示指定文件或目录已使用的磁盘空间总量<ul>
<li>du -h : 显示具体占用多少MB</li>
</ul>
</li>
<li>df : 显示文件系统磁盘空间的使用情况 </li>
<li>ifconfig : 显示网络接口信息</li>
<li>ping : 测试网络的连通性</li>
<li>netstat : 显示网络状态信息</li>
<li>man : 命令帮助信息查询</li>
<li>clear : 清屏</li>
</ul>
<h3 id="文件压缩tar命令"><a href="#文件压缩tar命令" class="headerlink" title="文件压缩tar命令"></a>文件压缩tar命令</h3><p>tar -cxzjvf:  </p>
<ol>
<li>-c : 压缩文件</li>
<li>-x : 解压文件</li>
<li>-z : 是否需要gzip压缩</li>
<li>-j : 是否需要bzip2压缩</li>
<li>-v : 压缩过程中显示文件</li>
<li>-f : 使用档名</li>
<li>-tf : 查看归档文件里面的文件</li>
</ol>
<p>tar -zxvf aaa.tar.gz : 解压文件aaa.tar.gz到当前文件夹.<br>tar -czvf aaa.tar.gz aaa/ : 压缩文件夹aaa为aaa.tar.gz    </p>
<h3 id="VIM-的简单使用"><a href="#VIM-的简单使用" class="headerlink" title="VIM 的简单使用"></a>VIM 的简单使用</h3><ul>
<li>vi : 进入VIM界面模式 (vi aa.text) 表明如果没有的话则新建aa.text，然后在vim中打开</li>
<li>i : 开始编写内容</li>
<li>Esc : 结束编写内容</li>
<li>q : 直接退出vi</li>
<li>wq : 保存后退出vi</li>
<li>q! : 强制退出</li>
<li>set number:在编辑文件中显示行号</li>
<li>set nonumber: 不显示行号</li>
</ul>
<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><p>R 读权限 read 4<br>W 写权限 write 2<br>X 执行权限 execute 1        </p>
<p>drwxr-xr-x : d表示是文件夹，rwx表示当前用户有读写执行的权限，r-x表示当前用户所在的组里的成员所具有读和执行的权限，r-x表示除此组之外其他人的权限<br>修改权限：chmod 777 file文件名 : 4+2+1所以把文件权限更改为rwxrwxrwx</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day15 HTTP]]></title>
      <url>http://xinli90.com/2016/10/02/Day15-HTTP/</url>
      <content type="html"><![CDATA[<p>本篇是关于HTTP协议原理和应用</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆HTTP特性</li>
<li>总结HTTP特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>在提交表单时有get和post方式，发出的http请求</li>
<li>HTTP的状态码</li>
<li>HTTP从发出请求到结束的全部过程</li>
<li>HTTP和TCP/IP的区别</li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="一次完整的HTTP事务过程"><a href="#一次完整的HTTP事务过程" class="headerlink" title="一次完整的HTTP事务过程"></a>一次完整的HTTP事务过程</h3><p>Look at the steps below in a high level that occurs at the background when a user tried to access a website:<br>DNS Resulution -&gt; TCP HandShake -&gt; HTTP using the connection to exchange information between clint and server.</p>
<p>在浏览器输入一个网址，然后回车，之后发生了什么：    </p>
<ol>
<li>首先查看浏览器自身、整个系统的DNS Caching中有没有访问过该网址，如果有，且没有过期则直接返回</li>
<li>DNS域名解析（解析网址的IP地址）</li>
<li>浏览器以此IP地址向服务器发起TCP/IP的3次握手</li>
<li>建立TCP连接后发起HTTP请求<ul>
<li>这里HTTP请求可以使用GET(完整请求一个资源)，HEAD(仅请求响应首部),POST(提交表单),PUT(上传),DELETE(删除)</li>
<li>URL: Uniform Resource Locator统一资源定位符； URI: Uniform Resource Identifier统一资源标识符</li>
</ul>
</li>
<li>服务器响应HTTP请求，浏览器得到HTML代码<ul>
<li>1xx : 信息性状态码 <ul>
<li>100，101</li>
</ul>
</li>
<li>2xx : 成功状态码 <ul>
<li>200 : OK</li>
</ul>
</li>
<li>3xx : 重定向状态码<ul>
<li>301 : 永久重定向，location响应首部的值仍为当前URL</li>
<li>302 : 临时重定向， 显示重定向，location响应首部的值为新的URL</li>
<li>304 : Not Modified 未修改，缓存里有，直接使用本地资源即可</li>
</ul>
</li>
<li>4xx : 客户端错误状态码<ul>
<li>404 : Not Found 请求的URL资源不存在</li>
</ul>
</li>
<li>5xx : 服务器错误状态码<ul>
<li>500 : Internal Server Error 服务器内部错误</li>
<li>502 : Bad Gateway 前面代理服务器联系不到后端的服务器时出现</li>
<li>504 : Gateway Timeout 代理能联系到后端服务器，但后端服务器在规定时间内没有给代理服务器响应</li>
</ul>
</li>
</ul>
</li>
<li>浏览器解析HTML代码，并请求HTML代码的资源（如js,css,图片等),使用多线程向服务器端去请求下载，如果服务器返回304，则浏览器直接从本地读取该资源的缓存文件。 服务器端关闭连接。</li>
<li>浏览器对页面进行渲染呈现给用户</li>
</ol>
<h3 id="Socket-TCP-IP-and-HTTP"><a href="#Socket-TCP-IP-and-HTTP" class="headerlink" title="Socket,TCP/IP and HTTP"></a>Socket,TCP/IP and HTTP</h3><p>TCP/IP是传输层协议Transport layer protocol，主要解决数据如何在网络中传输。</p>
<p>Socket是对TCP/IP协议的封装，是长连接，一旦建立起来不会主动断掉，但也可能连接断开，比如 服务器或客户端主机down了，网络故障，两者之间长时间没有数据传输，防火墙断开该链接释放资源。</p>
<p>HTTP是应用层协议Application layer protocol，主要解决如何包装数据。HTTP连接是短连接，客户端发送一次请求后，服务器端响应后即会断掉。</p>
<p>Web 使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。Socket是对TCP/IP的封装，是一个API. HTTP works on top of TCP, TCP is in charge of setting up a reliable connection between two machines and HTTP uses this connection to transfer data between the server and client.  Without TCP, HTTP cannot function.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Recover Binary Search Tree]]></title>
      <url>http://xinli90.com/2016/09/25/Recover-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/recover-binary-search-tree/" target="_blank" rel="external">Leetcode-Recover Binary Search Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Two elements of a binary search tree (BST) are swapped by mistake.</p>
<p>Recover the tree without changing its structure.   </p>
<p>Note:<br>A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><p>Inorder Traversal, if left child node is greater than root or rihgt child node is less than root. They would be the mistake elements.  </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	TreeNode firstNode = <span class="literal">null</span>;</div><div class="line">	TreeNode secondNode = <span class="literal">null</span>;</div><div class="line">	TreeNode preNode = new TreeNode(Integer.MIN_VALUE);</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> void recoverTree(TreeNode root) &#123;</div><div class="line">		traversal(root);</div><div class="line">		int temp = firstNode.<span class="keyword">val</span>;</div><div class="line">		firstNode.<span class="keyword">val</span> = secondNode.<span class="keyword">val</span>;</div><div class="line">		secondNode.<span class="keyword">val</span> = temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	purivate void traversal(TreeNode root)&#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">		traversal(root.left);</div><div class="line">		<span class="keyword">if</span>(firstNode==<span class="literal">null</span> &amp;&amp; preNode.<span class="keyword">val</span>&gt;=root.<span class="keyword">val</span>) &#123;</div><div class="line">			firstNode = preNode;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(firstNode!=<span class="literal">null</span> &amp;&amp; preNode.<span class="keyword">val</span>&gt;=root.<span class="keyword">val</span>) &#123;</div><div class="line">			secondNode = root;</div><div class="line">		&#125;</div><div class="line">		preNode = root;</div><div class="line">		traversal(root.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day14 Introduction to AWS]]></title>
      <url>http://xinli90.com/2016/09/25/Day14-Introduction-to-AWS/</url>
      <content type="html"><![CDATA[<p>本篇是关于各种语言特性的区别以及技术栈的选择</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆各服务特性</li>
<li>总结服务特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>EC2: Elastic Compute Cloud, 虚拟云服务器，为了程序运算。</li>
<li>S3: Simple Storage Service, 存放静态数据。</li>
<li>Elastic Beanstalk: 为了部署各种服务，提供监控。</li>
<li>AWS RDS: AWS Rational Database Service,AWS MySql数据库。</li>
<li>SQS: Simple Queue Service, 可以无限数量的接收和发送message。</li>
<li>SNS: Simple Notification Service, 可以实现通知功能。</li>
<li>ELB: Elastic Load Balancing,实现负载均衡。</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h3><ol>
<li><code>EC2</code>: Elastic Compute Cloud. It is a web service that provide resizable compute capacity in the cloud. It’s a vitual server in the AWS cloud.</li>
<li><code>EC2 Container Service</code>: 可以放置整个Docker集群，对其进行管理。</li>
<li><code>AWS Lambda</code>: 计算服务，采用事件响应机制,可以快速处理缩略图。As an event-driven compute service where AWS Lambda runs your code in response to events. We use for Real-time file processing, real-time stream processing</li>
<li><code>Elastic Beanstalk</code>: It’s for deploying and scaling web applications and service(Run and manage other AWS services). Simply upload the code and Elastic Beanstalk will set up an “environment” to contain number of EC2 instances,database and automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring.</li>
</ol>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><ol>
<li><code>S3</code>: Simple Storage Service, it provides secure, durable and highly-scalable cloud storage. It is easy to use object storage and can store very large objects. It’s typically used for storing images, videos, logs and other types of files. It’s a file system.</li>
</ol>
<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><ol>
<li><code>RDS</code>: Relational Database Service. It’s used for managing the rational database.</li>
<li><code>DynamoDB</code>: Manage the NoSQL Database.</li>
</ol>
<h3 id="Application-Service"><a href="#Application-Service" class="headerlink" title="Application Service"></a>Application Service</h3><ol>
<li><code>SQS</code>: Simple Queue Service. It’s a distributed queuing system. It was designed to enbale an unlimited number of messaging services to read and write an unlimited number of messages at any time. 你必须要先获取message到queue,才能写出和处理。</li>
</ol>
<h3 id="Mobile-Services"><a href="#Mobile-Services" class="headerlink" title="Mobile Services"></a>Mobile Services</h3><ol>
<li><code>SNS</code>:Simple Notification Service. It is a distributed publish-subscribe system. You can send individual messages or to bulk messages to large numbers of recipients. SNS supports several endpoints such as email, sms, http end point and SQS. 如果你不知道需要发给多少人信息，可以使用SNS.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Common Prefix]]></title>
      <url>http://xinli90.com/2016/09/22/Longest-Common-Prefix/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">Leetcode-Longest Common Prefix</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate array and compare each string with prefix, and update it.</li>
<li>Time complexity is O(n*m)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Sort the array first and directly compare the first string and the last one to get the prefix.</li>
<li>Time complexity is O(nlogn)</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public String longestCommonPrefix(String[] strs) &#123;</div><div class="line">        <span class="keyword">if</span>(strs==null || strs.<span class="built_in">length</span>==<span class="number">0</span>) <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</div><div class="line">        int i=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;strs.<span class="built_in">length</span> &amp;&amp; <span class="built_in">prefix</span>.<span class="built_in">length</span>()&gt;<span class="number">0</span>) &#123;</div><div class="line">            int j=<span class="number">0</span>;</div><div class="line">            String str = strs[i];</div><div class="line">            <span class="keyword">while</span>(j&lt;<span class="built_in">prefix</span>.<span class="built_in">length</span>() &amp;&amp; j&lt;str.<span class="built_in">length</span>()) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">prefix</span>.charAt(j)==str.charAt(j)) j++;</div><div class="line">                <span class="keyword">else</span> <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">prefix</span> = <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>,j);    </div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="built_in">prefix</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public String longestCommonPrefix(String[] strs) &#123;</div><div class="line">        <span class="keyword">if</span>(strs==null || strs.<span class="built_in">length</span>==<span class="number">0</span>) <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(strs.<span class="built_in">length</span>==<span class="number">1</span>) <span class="built_in">return</span> strs[<span class="number">0</span>];</div><div class="line">        Arrays.<span class="built_in">sort</span>(strs);</div><div class="line">        String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</div><div class="line">        String s = strs[strs.<span class="built_in">length</span>-<span class="number">1</span>];</div><div class="line">        int i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i&lt;<span class="built_in">prefix</span>.<span class="built_in">length</span>()&amp;&amp;i&lt;s.<span class="built_in">length</span>();i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(s.charAt(i)!=<span class="built_in">prefix</span>.charAt(i))&#123;</div><div class="line">        		<span class="built_in">break</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;    </div><div class="line">        <span class="built_in">return</span> <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>,i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Palindromic Substring]]></title>
      <url>http://xinli90.com/2016/09/22/Longest-Palindromic-Substring/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="external">Leetcode-Longest Palindromic Substring</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><ul>
<li>State: f[i][j] represents if the substring from i to j is palindromic.</li>
<li>Function: f[i][j] = f[i+1][j-1] &amp;&amp; a[i]==a[j] (i&lt;j)</li>
<li>Initialize: f[i][i] = true, f[i][i+1] = a[i]==a[i+1]</li>
<li>Answer: f[i][j]==true &amp;&amp; MAX(j-i)</li>
</ul>
<p>自上而下，所以需要先初始化，然后根据小范围推倒大范围结果，层层推进：从1个字符是否对称..2..3..到n个字符是否对称推进。</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>如果采用自下而上，虽然也是小范围推倒大范围，但是不需要先初始化。（算法以后补）</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> longestPalindrome(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</div><div class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">        	isPalindrome[i][i] = true;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</div><div class="line">        	isPalindrome[i][i+<span class="number">1</span>] = arr[i]==arr[i+<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">3</span>; <span class="built_in">size</span>&lt;=length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>; start + <span class="built_in">size</span> &lt;=length; j++) &#123;</div><div class="line">        		isPalindrome[start][start+<span class="built_in">size</span><span class="number">-1</span>] = (arr[start]==arr[start+<span class="built_in">size</span><span class="number">-1</span>]) &amp;&amp; isPalindrome[start+<span class="number">1</span>][start+<span class="built_in">size</span><span class="number">-2</span>];</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> <span class="built_in">max</span> = Integer.MIN_VALUE;</div><div class="line">        <span class="keyword">String</span> result = <span class="string">""</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> j=i; j&lt;length;j++) &#123;</div><div class="line">        		<span class="built_in">if</span>(isPalindrome[i][j]) &#123;</div><div class="line">        			<span class="built_in">if</span>(<span class="built_in">max</span>&lt;j-i) &#123;</div><div class="line">        				<span class="built_in">max</span> = j-i;</div><div class="line">        				result = s.substring(i,j+<span class="number">1</span>);</div><div class="line">        			&#125;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day13 Tradeoff of Different Language]]></title>
      <url>http://xinli90.com/2016/09/21/Day13-Tradeoff-of-Different-Language/</url>
      <content type="html"><![CDATA[<p>本篇是关于各种语言特性的区别以及技术栈的选择</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆各语言特性</li>
<li>总结语言特性，并总结用法</li>
<li>比较其优缺点</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>JAVA: Strongly-typed language, have the garbage collection mechanism.</li>
<li>C++: similar to JAVA, but no garbage collection mechanism.</li>
<li>PHP: similar syntax, dynamic script programming</li>
<li>Ruby on Rails: Ruby is a web framework. We write it using Rails language. It’s hard to learn.</li>
<li>Python: Very easy to learn. It’s very convenient to handle data and crawl web page.</li>
<li>JavaScript: We can use both frontend and backend, AngularJS for frontend and NodeJS for backend.</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="JAVA中的-“-”-用法"><a href="#JAVA中的-“-”-用法" class="headerlink" title="JAVA中的 “@” 用法"></a>JAVA中的 “@” 用法</h3><p>Annotations are a form of metadata added to a JAVA source file. It’s primarily used by code that is inpecting other code. They are often used for modifying existing classes at run-time to change their behavior. Frameworks such as JUnit and Hibernate use annotation to minimize the amount of code you need to write youself to use the frameworks.</p>
<p>参考：<a href="http://www.importnew.com/10294.html" target="_blank" rel="external">http://www.importnew.com/10294.html</a></p>
<h3 id="Strongly-vs-Weakly-and-Dynamicly-vs-Staticly-type-language"><a href="#Strongly-vs-Weakly-and-Dynamicly-vs-Staticly-type-language" class="headerlink" title="Strongly vs. Weakly and Dynamicly vs. Staticly type language"></a>Strongly vs. Weakly and Dynamicly vs. Staticly type language</h3><table>
<thead>
<tr>
<th>Type</th>
<th>Strongly</th>
<th>Weakly</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dynamically</td>
<td>Ruby, Python, Groovy</td>
<td>PHP, JavaScript, VBScript</td>
</tr>
<tr>
<td>Statically</td>
<td>JAVA, C#, Scala, Haskel</td>
<td>C, C++</td>
</tr>
</tbody>
</table>
<ol>
<li>Staticly typed: A language in which types are fixed at compile time. Most statically typed languages enforce this by requiring you to declare all variables with their datatypes before using them. 即编译的时候知道每个变量的类型，因为类型错误而不能做的事情是语法错误。</li>
<li>Dynamicly typed: A language in which types are discovered at execution time. 即编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。</li>
<li>Strongly typed: 一个变量不进行强制转换，它永远是这个数据类型，不允许隐式的类型转换。</li>
<li>Weekly typed:与强类型语言定义相反，允许编译器进行隐式的类型转换</li>
</ol>
<h3 id="J2EE-vs-PHP-Framework"><a href="#J2EE-vs-PHP-Framework" class="headerlink" title="J2EE vs. PHP Framework"></a>J2EE vs. PHP Framework</h3><ol>
<li>J2EE: is a bunch of standards that can be used for a lot of stuff. Java has more functionality and security than PHP. J2EE is going to expensive, complex to set-up and maintain, and difficult to code. J2EE handles Transaction very well, easy, and simple configuration;2.It can handle multi thread;Many Hardware appliance (for example Cisco) have build-in Java API, rather than PHP API.</li>
<li>PHP: is a scripting language. PHP is very easy to use with any framework like CodeIgniter or YII. If you need to quickly build website with more forms-validation-database interaction, PHP is the answer. </li>
</ol>
<h3 id="Python-vs-JAVA"><a href="#Python-vs-JAVA" class="headerlink" title="Python vs. JAVA"></a>Python vs. JAVA</h3><ol>
<li>Java creates applications that work across various platforms(complie once, run everywhere), while Python does not.</li>
<li>Java programs tend to run slower compared to Python pragrams.</li>
<li>Java uses traditional braces to start and end blocks, while Python uses indentation.</li>
<li>Java is statically typed and strongly typed language, while Python is dynamically and strongly typed language.</li>
<li>Python is simpler and more compact compared to JAVA.</li>
<li>Java runs faster than Python.</li>
</ol>
<h3 id="PHP-vs-Ruby-on-rails"><a href="#PHP-vs-Ruby-on-rails" class="headerlink" title="PHP vs. Ruby on rails"></a>PHP vs. Ruby on rails</h3><ol>
<li>PHP: PHP is simple and relatively shallow learning curve. PHP is really focused entirely for the web. It’s not a general purpose programming language like Ruby,Python,JAVA. Many hosting services just use a LAMP enviroment(Linux,Apache,MySql,PHP), so as long as your files are in place they just run and that’s it.</li>
<li>Ruby on Rails: Ruby on Rails is a web development framework based on the scripting language Ruby. It actually has a deep learning curve. It has Generators/Scaffolding features. The rails community provides a wealth of plygins as Ruby Gems that you simply add to the project Gemfile and install. THe active record ORM is simply the best. Rails has a testing framework that can be used. Unlike PHP, it really is Object Oriented from the ground up.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String to Integer (atoi)]]></title>
      <url>http://xinli90.com/2016/09/21/String-to-Integer-atoi/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="external">Leetcode-String to Integer (atoi)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement atoi to convert a string to an integer. </p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.   </p>
<p>spoilers alert… click to show requirements for atoi.    </p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>首先要消除空格</li>
<li>可能会有正负号，所以要取出第一个符号，之后如果还有符号，则需要返回0</li>
<li>如果数字超出最大或者最小数，一律返回最大或最小数  </li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> myAtoi(String <span class="keyword">str</span>) &#123;</div><div class="line">        <span class="keyword">str</span> = <span class="keyword">str</span>.trim();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, sign = <span class="number">1</span>, num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>.charAt(i)==<span class="string">'-'</span> || <span class="keyword">str</span>.charAt(i)==<span class="string">'+'</span>)&#123;</div><div class="line">            sign = <span class="keyword">str</span>.charAt(i++)==<span class="string">'-'</span>? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;<span class="keyword">str</span>.length()&amp;&amp; <span class="keyword">str</span>.charAt(i)&gt;=<span class="string">'0'</span>&amp;&amp; <span class="keyword">str</span>.charAt(i)&lt;=<span class="string">'9'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;Integer.MAX_VALUE/<span class="number">10</span> || (num==Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; <span class="keyword">str</span>.charAt(i)-<span class="string">'0'</span>&gt;<span class="number">7</span>))&#123;</div><div class="line">                <span class="keyword">return</span> sign==<span class="number">1</span>? Integer.MAX_VALUE:Integer.MIN_VALUE;</div><div class="line">            &#125;</div><div class="line">            num = num*<span class="number">10</span> + <span class="keyword">str</span>.charAt(i++)-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num*sign;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Integer]]></title>
      <url>http://xinli90.com/2016/09/21/Reverse-Integer/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="external">Leetcode-Reverse Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Reverse digits of an integer.</p>
<p>Example1: x = 123, return 321<br>Example2: x = -123, return -321     </p>
<p>click to show spoilers.      </p>
<p>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!       </p>
<p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>
<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>
<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<p>Update (2014-11-10):<br>Test cases had been added to test the overflow behavior.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Reverse as usual but maintain the last digit in order not to overflow.(don’t add it)  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>when the overflow happens, newResult will have garbage value</li>
<li>We cannot get back to the original value, then we can use the equal method</li>
</ol>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> reverse(<span class="built_in">int</span> x) &#123;</div><div class="line">    	<span class="comment">//to avoid negative number overflow when invert to positive number</span></div><div class="line">    	<span class="keyword">if</span>(x==Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = x&gt;<span class="number">0</span>? x : -x;</div><div class="line">        <span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>&gt;=<span class="number">10</span>)&#123;</div><div class="line">        	y = y*<span class="number">10</span> + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">        	<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>) &#123;</div><div class="line">        	<span class="built_in">int</span> compare = Integer.MAX_VALUE/<span class="number">10</span>;</div><div class="line">        	<span class="keyword">if</span>(y&lt;compare)&#123;</div><div class="line">        		result = y*<span class="number">10</span>+<span class="built_in">num</span>;</div><div class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==compare) &#123;</div><div class="line">        		result = Integer.MAX_VALUE%<span class="number">10</span>&gt;<span class="built_in">num</span>? y*<span class="number">10</span>+<span class="built_in">num</span> : <span class="number">0</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">        	<span class="built_in">int</span> compare = Integer.MIN_VALUE/<span class="number">10</span>;</div><div class="line">        	<span class="keyword">if</span>(y&lt;-compare)&#123;</div><div class="line">        		result = -(y*<span class="number">10</span>+<span class="built_in">num</span>);</div><div class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==-compare) &#123;</div><div class="line">        		result = Integer.MIN_VALUE%<span class="number">10</span>&lt;-<span class="built_in">num</span>? -(y*<span class="number">10</span>+<span class="built_in">num</span>) : <span class="number">0</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public <span class="built_in">int</span> reverse(<span class="built_in">int</span> x) &#123;</div><div class="line">		<span class="built_in">int</span> result = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(x!=<span class="number">0</span>) &#123;</div><div class="line">			<span class="built_in">int</span> tail = x%<span class="number">10</span>;</div><div class="line">			<span class="built_in">int</span> newResult = result*<span class="number">10</span> + tail;</div><div class="line">			<span class="keyword">if</span>((newResult-tail)/<span class="number">10</span> != result) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			result = newResult;</div><div class="line">			x /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Majority Element]]></title>
      <url>http://xinli90.com/2016/09/21/Majority-Element/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="external">Leetcode-Majority Element</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Sort the array, the majority element must appear in the middle.   </li>
<li>Time Complexity is O(nlgn)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use HashMap to count all elements.</li>
<li>get the value which is greater than ⌊ n/2 ⌋ times.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Track the count, only if the element that appears more than ⌊ n/2 ⌋ times can make count is greater than 0.</li>
<li>Time Complexity is O(n),Space Complexity is O(1)</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> majorityElement(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> majorityElement(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> majority = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">count</span>==<span class="number">0</span>)&#123;</div><div class="line">				majority = num;</div><div class="line">				<span class="keyword">count</span>++</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(majority==nums[i]) &#123;</div><div class="line">				<span class="keyword">count</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">count</span>--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> majority;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigZag Conversion]]></title>
      <url>http://xinli90.com/2016/09/21/ZigZag-Conversion/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/zigzag-conversion/" target="_blank" rel="external">Leetcode-ZigZag Conversion</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   <span class="keyword">N</span></div><div class="line">A P L S <span class="keyword">I</span> <span class="keyword">I</span> G</div><div class="line">Y   <span class="keyword">I</span>   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”      </p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</div></pre></td></tr></table></figure>
<p>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Create nRows StringBuffers, and keep collecting characters from original string to corresponding StringBuffer.  </p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String convert(String s, <span class="keyword">int</span> numRows) &#123;</div><div class="line">    	StringBuilder[] sb = <span class="keyword">new</span> StringBuilder[numRows];</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">    	<span class="keyword">while</span>(<span class="keyword">index</span> &lt; s.length()) &#123;</div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numRows &amp;&amp; <span class="keyword">index</span>&lt;s.length(); i++) &#123;</div><div class="line">    			sb[i].append(arr[<span class="keyword">index</span>++]);</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j=numRows<span class="number">-2</span>; j&gt;=<span class="number">1</span> &amp;&amp; <span class="keyword">index</span>&lt;s.length(); j--) &#123;</div><div class="line">    			sb[j].append(arr[<span class="keyword">index</span>++]);</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;numRows; i++) &#123;</div><div class="line">    		sb[<span class="number">0</span>].append(sb[i]);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> sb[<span class="number">0</span>].toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Excel Sheet Column Title]]></title>
      <url>http://xinli90.com/2016/09/21/Excel-Sheet-Column-Title/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">Leetcode-Excel Sheet Column Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> -&gt; A</div><div class="line"><span class="number">2</span> -&gt; B</div><div class="line"><span class="number">3</span> -&gt; C</div><div class="line">...</div><div class="line"><span class="number">26</span> -&gt; Z</div><div class="line"><span class="number">27</span> -&gt; AA</div><div class="line"><span class="number">28</span> -&gt; AB</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    	<span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</div><div class="line">    		sb.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(<span class="string">'A'</span>+(n<span class="number">-1</span>)%<span class="number">26</span>));</div><div class="line">    		n = (n<span class="number">-1</span>)/<span class="number">26</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="function"><span class="keyword">return</span> sb.<span class="title">toString</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Excel Sheet Column Number]]></title>
      <url>http://xinli90.com/2016/09/21/Excel-Sheet-Column-Number/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">Leetcode-Excel Sheet Column Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Related to question Excel Sheet Column Title</p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A -&gt; <span class="number">1</span></div><div class="line">B -&gt; <span class="number">2</span></div><div class="line">C -&gt; <span class="number">3</span></div><div class="line">...</div><div class="line">Z -&gt; <span class="number">26</span></div><div class="line">AA -&gt; <span class="number">27</span></div><div class="line">AB -&gt; <span class="number">28</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    public <span class="built_in">int</span> titleToNumber(<span class="built_in">String</span> s) &#123;</div><div class="line">        <span class="built_in">int</span> length = s.length();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">            <span class="built_in">num</span> = <span class="built_in">num</span>*<span class="number">26</span>+ (s.charAt(i)<span class="number">-64</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Number]]></title>
      <url>http://xinli90.com/2016/09/21/Palindrome-Number/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="external">Leetcode-Palindrome Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p>click to show spoilers.</p>
<p>Some hints:<br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Get how many digits for this number</li>
<li>Each time compare the lowest and highest digit.</li>
<li>Time Limit Exceed </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>We can use reverse method. But mantain the reversed version of int is always 1 time short in the factor of 10s</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>we can compare half of the digits </p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">    	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">        <span class="built_in">int</span> numDigit = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">            numDigit *= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        numDigit /= <span class="number">10</span>;</div><div class="line">        <span class="built_in">num</span> = x;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>!=<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">int</span> low = <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">            <span class="built_in">int</span> high = <span class="built_in">num</span>/numDigit;</div><div class="line">            <span class="keyword">if</span>(low!=high) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="built_in">num</span> = (<span class="built_in">num</span>-high*numDigit)/<span class="number">10</span>;</div><div class="line">            numDigit /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">num</span> &gt;= <span class="number">10</span>) &#123;</div><div class="line">			y = y*<span class="number">10</span> + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">num</span> == x%<span class="number">10</span> &amp;&amp; y==x/<span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	public boolean isPalindrome(<span class="built_in">int</span> x) &#123;</div><div class="line">	 	<span class="keyword">if</span>(x&lt;<span class="number">0</span>||(x!=<span class="number">0</span>&amp;&amp;x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">num</span> = x;</div><div class="line">		<span class="built_in">int</span> y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(y&lt;<span class="built_in">num</span>) &#123;</div><div class="line">			y = <span class="number">10</span>*y + <span class="built_in">num</span>%<span class="number">10</span>;</div><div class="line">			<span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> y==<span class="built_in">num</span> || y/<span class="number">10</span> == <span class="built_in">num</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse String]]></title>
      <url>http://xinli90.com/2016/09/21/Reverse-String/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">Leetcode-Reverse String</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes a string as input and returns the string reversed.</p>
<p>Example:<br>Given s = “hello”, return “olleh”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Use StringBuilder reverse() method    </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate String from end to start, at each character to a new string.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>Use swap method. Fastest solution.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        return <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;  </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=s.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i++) &#123;</div><div class="line">        	sb.append(s.charAt(i));</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> reverseString(<span class="built_in">String</span> s) &#123;</div><div class="line">        char[] arr = s.toCharArray();</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span>=s.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">left</span>&lt;<span class="built_in">right</span>) &#123;</div><div class="line">            char temp = arr[<span class="built_in">left</span>];</div><div class="line">            arr[<span class="built_in">left</span>] = arr[<span class="built_in">right</span>];</div><div class="line">            arr[<span class="built_in">right</span>] = temp;</div><div class="line">            <span class="built_in">left</span>++;</div><div class="line">            <span class="built_in">right</span>--;</div><div class="line">        &#125;</div><div class="line">        return <span class="keyword">new</span> <span class="built_in">String</span>(arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nim Game]]></title>
      <url>http://xinli90.com/2016/09/21/Nim-Game/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/nim-game/" target="_blank" rel="external">Leetcode-Nim Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>BrainTest</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Recursive way. Time Limited Exceed.</li>
<li>The basic idea is if the opponent can win, then the player will lose. No matter how many stones the player move, the opponent will win. So       if(canWinNim(n-1)&amp;&amp;canWinNim(n-2)&amp;&amp;canWinNim(n-3)) return false;</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> n%<span class="number">4</span>!=<span class="number">0</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(canWinNim(n-<span class="number">1</span>)&amp;&amp;canWinNim(n-<span class="number">2</span>)&amp;&amp;canWinNim(n-<span class="number">3</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Median of Two Sorted Arrays]]></title>
      <url>http://xinli90.com/2016/09/21/Median-of-Two-Sorted-Arrays/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Leetcode-Median of Two Sorted Arrays</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</div><div class="line">nums2 = [<span class="number">2</span>]</div><div class="line"></div><div class="line">The median is <span class="number">2.0</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">The median is (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Create a new Array with length of nums1 and nums2 and sort them all</li>
<li>find the median from this array</li>
<li>Time complexity is O(m+n), Space complexity is O(m+n)    </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use Binary Search Tree to get Time complexity O(log(m+n))</li>
<li>需要求得中位数m，即找第m小的数。不断地比较两个数组m/2位置的数(如果两个数组长度均大于m/2),否则一个取本身长度，一个取m的剩下值。所以要一直保证第一个数组长度小于第二个数组</li>
<li>不断地递归调用，每次舍弃更小的一半数组，确保中位数一直位于另一半的数组中。在每次截取时，同时更新需要寻找的第k小的数。</li>
</ol>
<figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="keyword">double</span> findMedianSortedArrays(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">        <span class="keyword">int</span> length1 = nums1.length<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> <span class="keyword">length2</span> = nums2.length<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> medianIndex = (length1+<span class="keyword">length2</span>)/<span class="number">2</span><span class="comment">; </span></div><div class="line">        <span class="keyword">double</span> median=<span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="keyword">int</span>[] array = new <span class="keyword">int</span>[length1+<span class="keyword">length2</span>]<span class="comment">;</span></div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,index=<span class="number">0</span><span class="comment">;</span></div><div class="line">        <span class="keyword">while</span>(index&lt;length1+<span class="keyword">length2</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;=length1)&#123;</div><div class="line">                array[index++] = nums2[j++]<span class="comment">;</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=<span class="keyword">length2</span>)&#123;</div><div class="line">                array[index++] = nums1[i++]<span class="comment">;</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;length1&amp;&amp;j&lt;<span class="keyword">length2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(nums1[i]&gt;nums2[j])&#123;</div><div class="line">                    array[index++] = nums2[j++]<span class="comment">;</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    array[index++] = nums1[i++]<span class="comment">;</span></div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((length1+<span class="keyword">length2</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">            median = array[medianIndex]<span class="comment">;</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            median = (<span class="keyword">double</span>)(array[medianIndex<span class="number">-1</span>]+array[medianIndex])/<span class="number">2</span><span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> median<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	public <span class="keyword">double</span> findMedianSortedArrays(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</div><div class="line">		<span class="keyword">int</span> length1 = nums1.length, <span class="keyword">length2</span> = nums2.length<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>((length1+<span class="keyword">length2</span>)%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">double</span>)(findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>)+findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>+<span class="number">1</span>))/<span class="number">2</span><span class="comment">;</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,<span class="number">0</span>,length1,nums2,<span class="number">0</span>,<span class="keyword">length2</span>,(length1+<span class="keyword">length2</span>)/<span class="number">2</span>+<span class="number">1</span>)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private <span class="keyword">int</span> findKth(<span class="keyword">int</span>[] nums1,<span class="keyword">int</span> start1,<span class="keyword">int</span> length1,<span class="keyword">int</span>[] nums2,<span class="keyword">int</span> start2,<span class="keyword">int</span> <span class="keyword">length2</span>, <span class="keyword">int</span> k)&#123;</div><div class="line">		<span class="comment">//mantain short array first</span></div><div class="line">		<span class="keyword">if</span>(length1&gt;<span class="keyword">length2</span>) <span class="keyword">return</span> findKth(nums2,start2,<span class="keyword">length2</span>,nums1,start1,length1,k)<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(length1==<span class="number">0</span>) <span class="keyword">return</span> nums2[k<span class="number">-1</span>]<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1],nums2[start2])<span class="comment">;</span></div><div class="line">		<span class="keyword">int</span> mid1 = Math.min(k/<span class="number">2</span>,length1)<span class="comment">;</span></div><div class="line">		<span class="keyword">int</span> mid2 = k-mid1<span class="comment">;</span></div><div class="line">		<span class="keyword">if</span>(nums1[start1+mid1<span class="number">-1</span>]&gt;=nums2[start2+mid2<span class="number">-1</span>]) &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,start1,length1,nums2,start2+mid2,<span class="keyword">length2</span>-mid2,k-mid2)<span class="comment">;</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> findKth(nums1,start1+mid1,length1-mid1,nums2,start2,<span class="keyword">length2</span>,k-mid1)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Edit Distance]]></title>
      <url>http://xinli90.com/2016/09/21/Edit-Distance/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="external">Leetcode-Edit Distance</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)</p>
<p>You have the following 3 operations permitted on a word:</p>
<p>a) Insert a character<br>b) Delete a character<br>c) Replace a character     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents word1的前i个字母和word2的前j个字母相同所需要的操作数</li>
<li>Function: f[i][j] = MIN(f[i-1][j-1],f[i][j-1]+1,f[i-1][j]+1) (word1[i] == word2[j]) Or MIN(f[i-1][j],f[i][j-1],f[i-1][j-1])+1  (word1[i] != word2[j])</li>
<li>Initialize: f[i][0] = i; f[0][j] = j</li>
<li>Answer: f[word1.length()][word2.length()]</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minDistance(<span class="keyword">String</span> word1,<span class="keyword">String</span> word2) &#123;</div><div class="line">       <span class="keyword">int</span> length1 = word1.length();</div><div class="line">       <span class="keyword">int</span> length2 = word2.length();</div><div class="line">       <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</div><div class="line">       <span class="comment">//initialize</span></div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=length1; i++) &#123;</div><div class="line">       		f[i][<span class="number">0</span>] = i;</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=length2; j++) &#123;</div><div class="line">       		f[<span class="number">0</span>][j] = j;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//function</span></div><div class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=length1; i++) &#123;</div><div class="line">       		<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=length2; j++) &#123;</div><div class="line">       			<span class="built_in">if</span>(word1.charAt(i<span class="number">-1</span>)==word2.charAt(j<span class="number">-1</span>))&#123;</div><div class="line">       				f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j]+<span class="number">1</span>,f[i][j<span class="number">-1</span>]+<span class="number">1</span>));</div><div class="line">       			&#125;<span class="built_in">else</span> &#123;</div><div class="line">       				f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]))+<span class="number">1</span>;</div><div class="line">       			&#125;</div><div class="line">       			</div><div class="line">       		&#125;</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">return</span> f[length1][length2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Strobogrammatic Number]]></title>
      <url>http://xinli90.com/2016/09/20/Strobogrammatic-Number/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/strobogrammatic-number/" target="_blank" rel="external">Leetcode-Strobogrammatic Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>
<p>Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p>
<p>For example, the numbers “69”, “88”, and “818” are all strobogrammatic.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Just checking the pairs, going inwards from the ends.</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    public boolean isStrobogrammatic(<span class="built_in">String</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>,j=<span class="built_in">num</span>.length()<span class="number">-1</span>; i&lt;=j; i++,j--) &#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="string">"00 11 88 696"</span>.contains(<span class="built_in">num</span>.charAt(i)+<span class="string">""</span>+<span class="built_in">num</span>.charAt(j)))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Increasing Subsequence]]></title>
      <url>http://xinli90.com/2016/09/20/Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-increasing-subsequence/" target="_blank" rel="external">Leetcode-Longest Increasing Subsequence</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,     </p>
<p>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.       </p>
<p>Your algorithm should run in O(n2) complexity.   </p>
<p>Follow up: Could you improve it to O(n log n) time complexity?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><ul>
<li>State: f[i] represents the longest increasing subsequence</li>
<li>Function: f[i] = MAX(f[j]+1) &amp;&amp; j&lt;i &amp;&amp; nums[j]&lt;nums[i]</li>
<li>Initialize: f[i] = 1,</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Mantain an array, use Binary search to insert or update this array.</li>
<li>We will get the longest array.</li>
</ol>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class Solution1 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = nums.<span class="built_in">length</span>;</div><div class="line">        <span class="type">int</span>[] f = new <span class="type">int</span>[<span class="built_in">length</span>];</div><div class="line">        <span class="type">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">length</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">                    <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,f[i]);</div><div class="line">                &#125;   </div><div class="line">            &#125;     </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">    public <span class="type">int</span> lengthOfLIS(<span class="type">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums==null || nums.<span class="built_in">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> <span class="built_in">length</span> = <span class="number">0</span>;</div><div class="line">        <span class="type">int</span> tails[] = new <span class="type">int</span>[nums.<span class="built_in">length</span>+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</div><div class="line">        	<span class="type">int</span> left = <span class="number">0</span>; </div><div class="line">        	<span class="type">int</span> right = <span class="built_in">length</span>;</div><div class="line">        	while(left&lt;right) &#123;</div><div class="line">        		<span class="type">int</span> mid = left+(right-left)/<span class="number">2</span>;</div><div class="line">        		<span class="keyword">if</span>(tails[mid]&lt;num)&#123;</div><div class="line">        			left = mid+<span class="number">1</span>;</div><div class="line">        		&#125;<span class="keyword">else</span> &#123;</div><div class="line">        			right = mid;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	tails[left] = num;</div><div class="line">        	<span class="keyword">if</span>(left==<span class="built_in">length</span>) ++<span class="built_in">length</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">length</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Valid Palindrome]]></title>
      <url>http://xinli90.com/2016/09/20/Valid-Palindrome/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="external">Leetcode-Valid Palindrome</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example, </p>
<p>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.      </p>
<p>Note:      </p>
<p>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Mantain two pointers, iterate from start and end respectively and compare if its lowercase is equal.</li>
<li>When meet the character is not letter or digit, move to the next character.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use Regex to replace all non digit or letter.</li>
<li>Reverse the string and compare to itself. </li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		int <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s.length()-<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">left</span>&lt;<span class="keyword">right</span>) &#123;</div><div class="line">			char c_left = s.charAt(<span class="keyword">left</span>);</div><div class="line">			char c_right = s.charAt(<span class="keyword">right</span>);</div><div class="line">			<span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_left))&#123;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="type">Character</span>.isLetterOrDigit(c_right))&#123;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="type">Character</span>.toLowerCase(c_left)!=<span class="type">Character</span>.toLowerCase(c_right))&#123;</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">left</span>++;</div><div class="line">				<span class="keyword">right</span>--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isPalindrome(<span class="type">String</span> s) &#123;</div><div class="line">		<span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		s = s.replaceAll(<span class="string">"\\W"</span>,<span class="string">""</span>);</div><div class="line">		<span class="type">String</span> s2 = new <span class="type">StringBuilder</span>(s).<span class="built_in">reverse</span>().<span class="built_in">toString</span>();</div><div class="line">		<span class="keyword">return</span> s.equalsIgnoreCase(s2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Partitioning II]]></title>
      <url>http://xinli90.com/2016/09/19/Palindrome-Partitioning-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning-ii/" target="_blank" rel="external">Leetcode-Palindrome Partitioning II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return the minimum cuts needed for a palindrome partitioning of s.</p>
<p>For example, given s = “aab”,      </p>
<p>Return 1 since the palindrome partitioning [“aa”,”b”] could be produced using 1 cut.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents the minimum cut in first i length of string</li>
<li>Function: f[i] = MIN(f[j]+1) &amp;&amp; 拿到j的最小，第j+1到第i个能组成回文即为f[j]+1</li>
<li>Initialize: f[i] = i-1,</li>
<li>Answer: f[s.length()]</li>
</ul>
<p>We use a two dimentional array to record if each substring is palindrome</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minCut(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">boolean</span>[][] isPalindrome = getPalindrome(s);</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</div><div class="line">        	f[i] = i<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length; i++) &#123;</div><div class="line">        	<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">        		<span class="built_in">if</span>(isPalindrome[j][i<span class="number">-1</span>]) &#123;</div><div class="line">        			f[i] = Math.<span class="built_in">min</span>(f[i],f[j]+<span class="number">1</span>);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[length];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//row represents start, col represents end.</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] getPalindrome(<span class="keyword">String</span> s) &#123;</div><div class="line">    	<span class="keyword">int</span> length = s.length();</div><div class="line">    	<span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[][];</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">    		isPalindrome[i][i] = true;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</div><div class="line">    		isPalindrome[i][i+<span class="number">1</span>] = (s.charAt(i)==s.charAt(i+<span class="number">1</span>));</div><div class="line">    	&#125;</div><div class="line">    	<span class="comment">//record 1 length of substring,then 2... more and more to get the entire string.</span></div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">2</span>; <span class="built_in">size</span>&lt;length;<span class="built_in">size</span>++) &#123;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> start=<span class="number">0</span>; start+<span class="built_in">size</span>&lt;length; start++) &#123;</div><div class="line">    			isPalindrome[start][start+<span class="built_in">size</span>] = isPalindrome[start+<span class="number">1</span>][start+<span class="built_in">size</span><span class="number">-1</span>]&amp;&amp;(s.charAt(start)==s.charAt(start+<span class="built_in">size</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> isPalindrome;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Partitioning]]></title>
      <url>http://xinli90.com/2016/09/19/Palindrome-Partitioning/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="external">Leetcode-Palindrome Partitioning</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>For example, given s = “aab”,     </p>
<p>Return</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="string">"aa"</span>,<span class="string">"b"</span>],</div><div class="line">  [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Backtracking</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; partition(<span class="built_in">String</span> s) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(s,<span class="number">0</span>,lists,<span class="built_in">list</span>);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="literal">void</span> helper(<span class="built_in">String</span> s, int start, <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; lists,<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(index==s.length()) &#123;</div><div class="line">			lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(<span class="built_in">list</span>));</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		for(int i=start; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(isPalindrome(s,start,i)) &#123;</div><div class="line">				<span class="built_in">list</span>.add(s.substring(start,i+<span class="number">1</span>));</div><div class="line">				helper(s,i+<span class="number">1</span>,lists,<span class="built_in">list</span>);</div><div class="line">				<span class="built_in">list</span>.remove(<span class="built_in">list</span>.size()<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> isPalindrome(<span class="built_in">String</span> p,int left,int right) &#123;</div><div class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</div><div class="line">            <span class="keyword">if</span>(p.charAt(left++) != p.charAt(right--))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jump Game II]]></title>
      <url>http://xinli90.com/2016/09/18/Jump-Game-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="external">Leetcode-Jump Game II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<p>For example:     </p>
<p>Given array A = [2,3,1,1,4]        </p>
<p>The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)</p>
<p>Note:<br>You can assume that you can always reach the last index.    </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents the minimum number which we jump from start to i.</li>
<li>Function: f[i] = Min(f[j]+1,j&lt;i &amp;&amp; j could jump to i)</li>
<li>Initialize: f[0] = 0</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Each time we move to the farthest position which we can get in the previous range. It will be the minimum steps.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</div><div class="line">        	f[i] = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="built_in">if</span>(f[j]!=Integer.MAX_VALUE &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = Math.<span class="built_in">min</span>(f[i], f[j]+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="built_in">return</span> f[nums.length<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> canJump(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">    	<span class="keyword">int</span> start=<span class="number">0</span>, <span class="built_in">end</span>=<span class="number">0</span>, steps = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">int</span> length = nums.length;</div><div class="line">    	<span class="built_in">while</span>(<span class="built_in">end</span>&lt;length<span class="number">-1</span>) &#123;</div><div class="line">    		steps++;</div><div class="line">    		<span class="keyword">int</span> farthest = <span class="built_in">end</span>;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> i=start; i&lt;=<span class="built_in">end</span>; i++) &#123;</div><div class="line">    			<span class="built_in">if</span>(i+nums[i] &gt; farthest) &#123;</div><div class="line">    				farthest = i+nums[i];</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    		start = <span class="built_in">end</span>+<span class="number">1</span>;</div><div class="line">    		<span class="built_in">end</span> = farthest;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> steps;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jump Game]]></title>
      <url>http://xinli90.com/2016/09/18/Jump-Game/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="external">Leetcode-Jump Game</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.     </p>
<p>For example:   </p>
<p>A = [2,3,1,1,4], return true.     </p>
<p>A = [3,2,1,0,4], return false.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-For-DP"><a href="#Solution1-For-DP" class="headerlink" title="Solution1 For DP"></a>Solution1 For DP</h4><p>It is easy to time limit exceeded. The time complexity is O(n^2)</p>
<ul>
<li>State: f[i] represents if we can get to the i location.</li>
<li>Function: if(f[i-1] &amp;&amp; nums[i-1]&gt;0)f[i] = true, or f[i]=false;</li>
<li>Initialize: f[0] = true</li>
<li>Answer: f[nums.length-1]</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Iterate teh array, get the farthest position and check if it can get the last position.<br>The time complexity is O(n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> f[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</div><div class="line">                <span class="keyword">if</span>(f[j] &amp;&amp; j+nums[j]&gt;=i)&#123;</div><div class="line">                    f[i] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[nums.length-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    	<span class="keyword">int</span> farthest = nums[<span class="number">0</span>];</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</div><div class="line">    		<span class="keyword">if</span>(i &lt;= farthest &amp;&amp; i+nums[i] &gt; farthest) &#123;</div><div class="line">    			farthest = i+nums[i];</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> farthest &gt;= nums.length-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Climbing Stairs]]></title>
      <url>http://xinli90.com/2016/09/18/Climbing-Stairs/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="external">Leetcode-Climbing Stairs</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i] represents ways of climbing from start to i step.</li>
<li>Function: f[i] = f[i-1] + f[i-2]; 到达第i步之前，需要i-1或者i-2步</li>
<li>Initialize: f[0] = 1, f[1] = 1</li>
<li>Answer: f[n]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n; i++)&#123;</div><div class="line">            f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unique Paths]]></title>
      <url>http://xinli90.com/2016/09/18/Unique-Paths/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/unique-paths/" target="_blank" rel="external">Leetcode-Unique Paths</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents the number of unique paths from start to coordinate(x,y)</li>
<li>Function: f[i][j] = f[i-1][j] + f[i][j-1]  (思考：怎样到达(i,j)这一步，到达这一步之前我们有多少选择)</li>
<li>Initialize: f[0][0] = 1; f[i][0] = 1; f[0][j] = 1</li>
<li>Answer: f[m-1][n-1]</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span>(<span class="params"><span class="keyword">int</span> m, <span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span> [m][n];</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">            f[<span class="number">0</span>][j] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                f[i][j] = f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> f[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Minimum Path Sum]]></title>
      <url>http://xinli90.com/2016/09/18/Minimum-Path-Sum/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="external">Leetcode-Minimum Path Sum</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p>Note: You can only move either down or right at any point in time.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: sum[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: sum[i][j] = MIN(sum[i-1][j],sum[i][j-1]) + grid[i][j], i&gt;1,j&gt;1,i&lt;m,j&lt;n</li>
<li>Initialization: f[0][0] = grid[0][0]; sum[i][0] = sum[i-1][0] + triangle[i][0]; sum[0][j] = sum[0][j-1] + grid[0][j]</li>
<li>Answer: sum[m-1][n-1]</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> minPathSum(<span class="keyword">int</span>[][] grid) &#123;</div><div class="line">        <span class="keyword">if</span>(grid==<span class="keyword">null</span> || grid.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = grid.length;</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span>[][] <span class="keyword">sum</span> = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        <span class="keyword">sum</span>[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">sum</span>[i][<span class="number">0</span>] = <span class="keyword">sum</span>[i<span class="number">-1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</div><div class="line">            <span class="keyword">sum</span>[<span class="number">0</span>][j] = <span class="keyword">sum</span>[<span class="number">0</span>][j<span class="number">-1</span>] + grid[<span class="number">0</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">sum</span>[i][j] = Math.min(<span class="keyword">sum</span>[i<span class="number">-1</span>][j],<span class="keyword">sum</span>[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Triangle]]></title>
      <url>http://xinli90.com/2016/09/18/Triangle/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/triangle/" target="_blank" rel="external">Leetcode-Triangle</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>
<p>For example, given the following triangle</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p>
<p>Note:<br>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis-For-DP"><a href="#Analysis-For-DP" class="headerlink" title="Analysis For DP"></a>Analysis For DP</h3><ul>
<li>State: f[i][j] represents 到达第i行第j列为止所达到的path sum 最小</li>
<li>Function: f[i][j] = MIN(f[i-1][j],f[i-1][j-1])+triangle[i][j], j&lt;=i</li>
<li>Initialization: f[0][0] = triangle[0][0];f[i][0]=f[i-1][0]+triangle[i][0];f[i][i]=f[i-1][i-1]+triangle[i][i]</li>
<li>Answer: f[list.length-1][j]</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> minimumTotal(List&lt;List&lt;Integer&gt;&gt; <span class="built_in">triangle</span>) &#123;</div><div class="line">        <span class="built_in">int</span> n = <span class="built_in">triangle</span>.<span class="built_in">size</span>();</div><div class="line">        <span class="built_in">int</span>[][] f = <span class="keyword">new</span> <span class="built_in">int</span>[n][n];</div><div class="line">        <span class="built_in">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE;</div><div class="line">        </div><div class="line">        <span class="comment">//initialize</span></div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">triangle</span>.<span class="built_in">get</span>(<span class="number">0</span>).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n;i++)&#123;</div><div class="line">            f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">            f[i][i] = f[i<span class="number">-1</span>][i<span class="number">-1</span>]+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//function</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</div><div class="line">                f[i][j] = Math.<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="built_in">triangle</span>.<span class="built_in">get</span>(i).<span class="built_in">get</span>(j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//answer</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</div><div class="line">            <span class="built_in">min</span> = Math.<span class="built_in">min</span>(<span class="built_in">min</span>,f[n<span class="number">-1</span>][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Number of Islands]]></title>
      <url>http://xinli90.com/2016/09/16/Number-of-Islands/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Leetcode-Number of Islands</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div></pre></td></tr></table></figure>
<p>Answer: 1</p>
<p>Example 2:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div></pre></td></tr></table></figure>
<p>Answer: 3</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Recursively to check each cell when we find the ‘1’</li>
<li>Just make the island disappear once a cell was found.</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">	public <span class="keyword">int</span> numIslands(char[][] <span class="keyword">grid</span>) &#123;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">grid</span>.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="keyword">grid</span>[<span class="number">0</span>].length; j++) &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">grid</span>[i][j]==<span class="string">'1'</span>) &#123;</div><div class="line">					count++;</div><div class="line">					disappear(<span class="keyword">grid</span>,i,j);</div><div class="line">				&#125;	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void disappear(char[][] <span class="keyword">grid</span>, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">if</span>(i&gt;=<span class="number">0</span> &amp;&amp; i&lt;<span class="keyword">grid</span>.length &amp;&amp; j&gt;=<span class="number">0</span> &amp;&amp; j&lt;<span class="keyword">grid</span>[<span class="number">0</span>].length &amp;&amp; <span class="keyword">grid</span>[i][j]==<span class="string">'1'</span>) &#123;</div><div class="line">			<span class="keyword">grid</span>[i][j]=<span class="string">'0'</span>;</div><div class="line">			disappear(<span class="keyword">grid</span>,i<span class="number">-1</span>,j);</div><div class="line">			disappear(<span class="keyword">grid</span>,i+<span class="number">1</span>,j);</div><div class="line">			disappear(<span class="keyword">grid</span>,i,j<span class="number">-1</span>);</div><div class="line">			disappear(<span class="keyword">grid</span>,i,j+<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Add Binary]]></title>
      <url>http://xinli90.com/2016/09/16/Add-Binary/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="external">Leetcode-Add Binary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).     </p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.     </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Set a flag to track if we have the carry.</li>
<li>Each time we use a and b with the same index together and plus flag to calculate which number we should to add into String.  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar with Solution1, but combine all while loops together.</li>
<li>We can use StringBuilder.inset(0,num) method instead of String operation.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        String result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> &amp;&amp; b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">            b_index--;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a.charAt(a_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            a_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(b_index &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> bInt = b.charAt(b_index)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = bInt + flag;</div><div class="line">            result = (<span class="keyword">sum</span>%<span class="number">2</span>) + result;</div><div class="line">            flag = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">            b_index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag==<span class="number">1</span>? <span class="string">"1"</span>+result : result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String addBinary(String a, String b) &#123;</div><div class="line">        <span class="keyword">int</span> a_index = a.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> b_index = b.length()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(a_index &gt;= <span class="number">0</span> || b_index &gt;= <span class="number">0</span> || carry==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> aInt = a_index &lt; <span class="number">0</span>? <span class="number">0</span> : a.charAt(a_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> bInt = b_index &lt; <span class="number">0</span>? <span class="number">0</span> : b.charAt(b_index--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span> = aInt + bInt + flag;</div><div class="line">            sb.insert(<span class="number">0</span>, <span class="keyword">sum</span>%<span class="number">2</span>);</div><div class="line">            carry = <span class="keyword">sum</span>/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First Bad Version]]></title>
      <url>http://xinli90.com/2016/09/15/First-Bad-Version/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">Leetcode-First Bad Version</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.       </p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.      </p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.      </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Binary Search.</li>
<li>If mid is bad and the number which is previous mid is not bad, return it.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The isBadVersion API <span class="keyword">is</span> defined <span class="keyword">in</span> the parent <span class="keyword">class</span> VersionControl.</div><div class="line">      boolean isBadVersion(<span class="built_in">int</span> version); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution extends VersionControl &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> firstBadVersion(<span class="built_in">int</span> n) &#123;</div><div class="line">        <span class="built_in">int</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span> = low+(high-low)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(isBadVersion(<span class="built_in">mid</span>)&amp;&amp;!isBadVersion(<span class="built_in">mid</span><span class="number">-1</span>)) return <span class="built_in">mid</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isBadVersion(<span class="built_in">mid</span>)) low = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = <span class="built_in">mid</span><span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        return low; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Top K Frequent Elements]]></title>
      <url>http://xinli90.com/2016/09/13/Top-K-Frequent-Elements/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">Leetcode-Top K Frequent Elements</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, return the k most frequent elements.     </p>
<p>For example,<br>Given [1,1,1,2,2,3] and k = 2, return [1,2].</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.<br>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n)</li>
<li>Use HashMap to count the frequency of each number, key is number ,value is frequency</li>
<li>Create a array with List, the maximum size is the 1+length of nums. Because we need consider that we only have multiple one number. The index of this number is length.</li>
<li>Put the number which has the same frequency together.</li>
<li>At last from the end to start, add the small list into list until the list size is not less than k.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(n+nlogk)</li>
<li>Use MinHeap. Each time we poll minimum element from PriorityQueue. Then we can keep track of k most significant entries.</li>
<li>Iterate through the final heap and get the keys.</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(num))&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="built_in">map</span>.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">map</span>.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;Integer&gt;[] bucket = <span class="keyword">new</span> List[nums.length+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)]==<span class="keyword">null</span>)&#123;</div><div class="line">                bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            &#125;</div><div class="line">            bucket[<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)].<span class="built_in">add</span>(<span class="built_in">key</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> index = nums.length; index&gt;=<span class="number">0</span> &amp;&amp; list.<span class="built_in">size</span>()&lt;k; index--) &#123;</div><div class="line">            <span class="keyword">if</span>(bucket[index]!=<span class="keyword">null</span>)&#123;</div><div class="line">                list.addAll(bucket[index]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;Integer&gt; topKFrequent(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> k) &#123;</div><div class="line">     <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; counterMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="built_in">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(counterMap.containsKey(num))&#123;</div><div class="line">                counterMap.put(num,counterMap.<span class="built_in">get</span>(num)+<span class="number">1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                counterMap.put(num,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue()-b.getValue());</div><div class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : counterMap.entrySet()) &#123;</div><div class="line">        pq.offer(entry);</div><div class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k) pq.poll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">while</span>(!pq.isEmpty()) &#123;</div><div class="line">        res.<span class="built_in">add</span>(<span class="number">0</span>, pq.poll().getKey());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Number of 1 Bits]]></title>
      <url>http://xinli90.com/2016/09/11/Number-of-1-Bits/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">Leetcode-Number of 1 Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(size of num)</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>“n &amp;= n - 1” is used to delete the right “1” of n. </li>
<li>Count its “1”</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> number = n;</div><div class="line">		<span class="keyword">while</span>(number!=<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">count</span> += (number&amp;<span class="number">1</span>);</div><div class="line">			<span class="comment">//unsigned operation</span></div><div class="line">			number &gt;&gt;&gt;= <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line"><span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> hammingWeight(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(; n!=<span class="number">0</span>; n = (n &amp; (n<span class="number">-1</span>)))&#123;</div><div class="line">			<span class="keyword">count</span>++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Counting Bits]]></title>
      <url>http://xinli90.com/2016/09/11/Counting-Bits/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="external">Leetcode-Count Bits</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.</p>
<p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p>
<p>Follow up:</p>
<p>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>Space complexity should be O(n).<br>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</p>
<p>Hint:</p>
<p>You should make use of what you have produced already.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n*(size of num)), but time limit exceeded.</li>
<li>count each number from 0 to num</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Similar to solution1.</li>
<li>Prevent from TLE, we use bit manipulation instead of normal operation.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Recursion.  Make Use of what I have produced already. </li>
<li>Time complexity is O(n)</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><p>The number in one range are equal to 1 plus all of the numbers in the ranges before it. For example, the numbers 8-15 have the same pattern as 0-7 but with a 1 at the front.</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">count</span> += number%<span class="number">2</span>;</div><div class="line">				number /= <span class="number">2</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> number = i;</div><div class="line">			<span class="keyword">while</span>(number&gt;<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">if</span>((number &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">count</span>++;</div><div class="line">				<span class="keyword">count</span> &gt;&gt;= <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = <span class="keyword">count</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num; i++) &#123;</div><div class="line">			result[i] = result[i/<span class="number">2</span>] + i%<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</div><div class="line">		<span class="comment">//default: result[0] = 0</span></div><div class="line">		<span class="keyword">int</span> pow = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=num; i++,j++) &#123;</div><div class="line">			<span class="keyword">if</span>(i == pow) &#123;</div><div class="line">				pow &lt;&lt;=<span class="number">1</span>;</div><div class="line">				j=<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			result[i] = result[j]+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA Web 01]]></title>
      <url>http://xinli90.com/2016/09/09/JAVA-Web-01/</url>
      <content type="html"><![CDATA[<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>一、HttpServlet首先必须读取Http请求的内容。Servlet容器负责创建HttpServlet对象，并把Http请求直接封装到HttpServlet对象中，大大简化了HttpServlet解析请求数据的工作量。HttpServlet容器响应Web客户请求流程如下：     </p>
<p>1）Web客户向Servlet容器发出Http请求；</p>
<p>2）Servlet容器解析Web客户的Http请求；</p>
<p>3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；</p>
<p>4）Servlet容器创建一个HttpResponse对象；</p>
<p>5）Servlet容器调用HttpServlet的service方法，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；</p>
<p>6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；</p>
<p>7）HttpServlet调用HttpResponse的有关方法，生成响应数据；</p>
<p>8）Servlet容器把HttpServlet的响应结果传给Web客户。</p>
<p>二、创建HttpServlet的步骤——“四部曲”</p>
<p>1）扩展HttpServlet抽象类；</p>
<p>2）覆盖HttpServlet的部分方法，如覆盖doGet()或doPost()方法；</p>
<p>3）获取HTTP请求信息。通过HttpServletRequest对象来检索HTML表单所提交的数据或URL上的查询字符串；</p>
<p>4）生成HTTP响应结果。通过HttpServletResponse对象生成响应结果，它有一个getWriter()方法，该方法返回一个PrintWriter对象。</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>Servlet主要功能是接受从浏览器发送来的HTTP请求（request），并返回HTTP响应（response）,这个在service方法中完成，service中包含了从request对象获得客户端数据和向response对象创建输出。如果Servlet 继承了 HttpServlet,实现了doPost或doGet方法，那么service只能对POST或GET做出响应。</p>
<p>Example:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mypack;</div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet//第一步：扩展HttpServlet抽象类</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//第二步：覆盖doGet()方法</span></div><div class="line"> 	public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line"> 		<span class="comment">//第三步：获取HTTP请求中的参数信息</span></div><div class="line"> 		<span class="type">String</span> clientName = request.getParameter(<span class="string">"clientName"</span>);</div><div class="line"> 		<span class="keyword">if</span>(clientName!=<span class="literal">null</span>) &#123;</div><div class="line"> 			clientName = clientName+<span class="string">"a"</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="comment">//第四步：生成HTTP响应结果</span></div><div class="line"> 		<span class="type">String</span> title=<span class="string">"HelloServlet"</span>;</div><div class="line">  		<span class="type">String</span> heading1=<span class="string">"HelloServlet的doGet方法的输出："</span>;</div><div class="line">  </div><div class="line"> 		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"> 		<span class="type">PrintWriter</span> out = response.getWriter();</div><div class="line"> 		<span class="comment">//写HTML Page</span></div><div class="line"> 		out.print(<span class="string">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;"</span>+title+<span class="string">"&lt;/TITLE&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/HEAD&gt;&lt;BODY&gt;"</span>);</div><div class="line">  		out.print(heading1);</div><div class="line">  		out.println(<span class="string">"&lt;h1&gt;&lt;p&gt;"</span>+clientName+<span class="string">":您好&lt;/h1&gt;"</span>);</div><div class="line">  		out.print(<span class="string">"&lt;/BODY&gt;&lt;/HTML&gt;"</span>);</div><div class="line">  		</div><div class="line">  		out.close();</div><div class="line"> 	&#125;</div><div class="line">	public void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">ServletException</span>&#123;</div><div class="line">		doGet(request,response);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">在web.xml中添加</div><div class="line">&lt;servlet&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;servlet-<span class="class"><span class="keyword">class</span><span class="title">&gt;mypack</span>.<span class="title">HelloServlet&lt;/servlet-class&gt;</span></span></div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">	&lt;servlet-name&gt;<span class="type">HelloServlet</span>&lt;/servlet-name&gt;</div><div class="line">	&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol>
<li><p>关于<code>response.setContentTyep()</code>： response的的设置对应你看到的html，setContentType对应这句<br><meta http-equiv="Content-type" content="text/html; charset=utf-8"><br>意思是告诉浏览器我的这个内容是文本html，然后字符编码是utf-8，如果你不告诉浏览器编码，那么浏览器，一般会根据系统默认编码来解析你的页面中的字符。 </p>
</li>
<li><p>Response：封装响应消息，设置响应消息</p>
<ul>
<li><p>设置响应行：HTTP/1.1 200 ok        </p>
<ul>
<li><p>setStatus(int code)：设置响应状态码      </p>
<ul>
<li><p>演示重定向：302<br>  //简化版的重定向<br>  response.sendRedirect(“<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</p>
<ul>
<li>实现原理<br>//1.设置响应状态码为 302<br>response.setStatus(302);<br>//2.设置响应头 location<br>response.setHeader(“location”, “<a href="http://192.168.1.66:8080/zxc/one" target="_blank" rel="external">http://192.168.1.66:8080/zxc/one</a>“);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>设置响应头：</p>
<ul>
<li>setHeader(String name,String value):     </li>
<li>setDateHeader(String name, long date) </li>
<li>setIntHeader(String name, int value) </li>
</ul>
</li>
<li><p>设置响应体：</p>
<ul>
<li><p>getOutputStream():发送字节数据</p>
<ul>
<li>验证码：<ul>
<li>防止恶意注册</li>
</ul>
</li>
</ul>
</li>
<li><p>getWriter():发送字符数据         </p>
<ul>
<li>发送中文数据时，需要在获取流之前设置编码方式，并且要告诉客户端浏览器，服务器使用的编码方式<br>  //简化版设置编码的方式<br>  response.setContentType(“text/html;charset=utf-8”);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><code>response.setHeader()</code>:     </li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">response<span class="selector-class">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"><span class="comment">//设置响应消息头： 2 秒后刷新到Demo5</span></div><div class="line">response<span class="selector-class">.setHeader</span>(<span class="string">"refresh"</span>,<span class="string">"2:URL=/day10_response/servlet/ResponseDemo5"</span>)</div><div class="line"><span class="comment">//设置编码</span></div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.getWriter</span>()<span class="selector-class">.write</span>(<span class="string">"Congratulation! Login sucessfully! Will jump to main page after 2 seconds"</span>);</div></pre></td></tr></table></figure>
<h3 id="四大域"><a href="#四大域" class="headerlink" title="四大域"></a>四大域</h3><ol>
<li>PageContext: is only used in JSP for variables that don’t get passed if the request is forwarded.</li>
<li>ServletRequest: data can only exists during one request for one user.</li>
<li>HttpSession: only one user can use. An application may manage many sessions.</li>
<li>ServletContext: All users in entire web application can use.</li>
</ol>
<h3 id="EL-and-JSTL"><a href="#EL-and-JSTL" class="headerlink" title="EL and JSTL"></a>EL and JSTL</h3><p>In order to make the code more readable, we use EL instead of JAVA in HTML. It’s more like HTML tags. It’s only used for getting data in page, request, session and applicaiton scopes.</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>JDBC 连接步骤：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.注册驱动</span></div><div class="line"><span class="keyword">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//2.获取与数据库的连接</span></div><div class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/day17"</span>,<span class="string">"root"</span>,<span class="string">"sorry"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//3.得到代表SQL语句的对象，向数据库发送语句</span></div><div class="line">Statement stmt = conn.createStatement()<span class="comment">;</span></div><div class="line"><span class="comment">//4.执行语句</span></div><div class="line">ResultSet rs = stmt.executeQuery(<span class="string">"select id from users"</span>)<span class="comment">;</span></div><div class="line"><span class="comment">//5.如果执行是查询语句，就会有结果集，处理</span></div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">	rs.getObject(<span class="string">"id"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//6.释放占用的资源</span></div><div class="line">rs.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">stmt.<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line">conn.<span class="keyword">close</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h4 id="抽取JDBC工具类模板"><a href="#抽取JDBC工具类模板" class="headerlink" title="抽取JDBC工具类模板"></a>抽取JDBC工具类模板</h4><p>1.创建数据库配置文件: dbcfg.properties</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">driverClass</span>=com.mysql.jdbc.Driver</div><div class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/cloud</div><div class="line"><span class="attr">user</span>=root</div><div class="line"><span class="attr">password</span>=sorry</div></pre></td></tr></table></figure>
<p>2.抽取模板</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="comment">//JDBC工具类:与数据库无关</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> &#123;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="comment">//读取配置文件</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InputStream <span class="keyword">in</span> = JdbcUtil.<span class="keyword">class</span>.getClassLoader().getResourceAsStream(<span class="string">"dbcfg.properties"</span>);</div><div class="line">			Properties props = <span class="keyword">new</span> Properties();</div><div class="line">			props.load(<span class="keyword">in</span>);</div><div class="line">			driverClass = props.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">			url = props.getProperty(<span class="string">"url"</span>);</div><div class="line">			user = props.getProperty(<span class="string">"user"</span>);</div><div class="line">			password = props.getProperty(<span class="string">"password"</span>);</div><div class="line">			Class.forName(driverClass);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Connection getConnection() <span class="keyword">throws</span> Exception&#123;</div><div class="line">		Connection conn = DriverManager.getConnection(url,user,password);</div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> release(ResultSet rs,Statement stmt,Connection conn)&#123;</div><div class="line">		<span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			rs = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(stmt!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				stmt.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			stmt = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(conn!=<span class="literal">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			conn = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.When you want to use this util class:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line">PreparedStatement stmt = <span class="keyword">null</span>;</div><div class="line">ResultSet rs = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	conn = JdbcUtil.getConnection();</div><div class="line">	<span class="comment">//prevent SQL Injection</span></div><div class="line">	stmt = conn.prepareStatement(<span class="string">"select..."</span>);</div><div class="line">	rs = stmt.executeQuery();</div><div class="line">	<span class="comment">//...code</span></div><div class="line">	</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	JdbcUtil.release(rs,stmt,conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="大数据存储"><a href="#大数据存储" class="headerlink" title="大数据存储"></a>大数据存储</h4><p>We can use batch processing, each time we excute a list of inserts in batch.  Instead of hitting database once for each insert statement, we will use JDBC batch operation and optimize the performance. </p>
<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p><code>Stored procedures</code>: A benefit of stored procedures is that you can centralize data access logic into a single place that is then easy for DBA’s to optimize. Stored procedures also have a security benefit in that you can grant execute rights to a stored procedure but the user will not need to have read/write permissions on the underlying tables. This is a good first step against SQL Injection.</p>
<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p><code>Trigger</code>: A trigger is a special kind of stored procedure that automatically executes when an event occurs in the database server.</p>
<h4 id="DataSource-Pool"><a href="#DataSource-Pool" class="headerlink" title="DataSource Pool"></a>DataSource Pool</h4><p>新建一个连接池，每次从连接池去conn, 用完后放回池中，而不是直接conn.close()。<br>因此我们需要改写close()方法，使用包装设计模式(Decorator), implement Connection,改写close()方法，不用改变的方法直接调用原来的方法。</p>
<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>实现自动登录功能：<br>把用户名：Base64编码，把密码：MD5加密。存入Cookie中，登录时取出解析并与数据库中的用户名和密码比较。</p>
<p>Filter先执行，chain.doFilter(request,reponse)过滤之后再执行servlet.</p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol>
<li>表单的method必须是post</li>
<li>表单的enctype属性值必须是multipart/form-data</li>
<li>表单中提供input type=”file”类型的上传输入域</li>
</ol>
<h4 id="显示上传文件条"><a href="#显示上传文件条" class="headerlink" title="显示上传文件条"></a>显示上传文件条</h4><p>使用Ajax+Listener, 不断监听文件上传多少，使用ajax不断回取数据以及更新图样。      </p>
<h4 id="8个监听器"><a href="#8个监听器" class="headerlink" title="8个监听器"></a>8个监听器</h4><ol>
<li>ServletContextListener: 完成系统初始化工作</li>
<li>HttpSessionListener: 可以统计HttpSession对象的个数，分析某个时间段同时在线的人数</li>
<li>ServletRequestListener: 可以统计每个页面的访问次数</li>
<li>HttpSessionAttributeListener: 显示在线用户列表,session.setAttribute(“user”,user);</li>
<li>ServletContextAttributeListener</li>
<li>ServletRequestAttributeListener</li>
<li>HttpSessionBindingListener: 监测何时随着HttpSession绑定和解绑</li>
<li>HttpSessionActivationListener: 监测何时随着HttpSession激活和钝化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement strStr()]]></title>
      <url>http://xinli90.com/2016/09/08/Implement-strStr/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="external">Leetcode- Implement strStr()</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement strStr().</p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>This question test how to use indexOf() in String.</p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Using subString() method. Iterate the array and compare needle with substring of haystack.</li>
<li>Time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the array and compare each character with needle.</li>
<li>The worest time complexity is O(k(n-k))</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><p>KMP, time complexity is O(n)</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">    	<span class="keyword">int</span> hayStackSize =  haystack.length();</div><div class="line">    	<span class="keyword">int</span> needleSize = needle.length();</div><div class="line">    	<span class="built_in">if</span>(hayStackSize&lt;needleSize) <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    	<span class="built_in">else</span> <span class="built_in">if</span>(needleSize==<span class="number">0</span>) <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=hayStackSize-needleSize; i++) &#123;</div><div class="line">    		<span class="built_in">if</span>(haystack.subtring(i,i+needleSize).equals(needle)) <span class="built_in">return</span> i;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> <span class="number">-1</span>;;</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> strStr(<span class="keyword">String</span> haystack, <span class="keyword">String</span> needle) &#123;</div><div class="line">        <span class="keyword">int</span> hay_size = haystack.length();</div><div class="line">        <span class="keyword">int</span> nee_size = needle.length();</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;= hay_size-nee_size ; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="built_in">while</span>(j&lt;nee_size &amp;&amp; haystack.charAt(i+j)==needle.charAt(j)) &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">if</span>(j==nee_size) <span class="built_in">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Integer to Roman]]></title>
      <url>http://xinli90.com/2016/09/07/Integer-to-Roman/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><p>This is a very smart solution to simulate the number;</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	public <span class="built_in">String</span> intToRoman(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="built_in">String</span>[] M = &#123;<span class="string">""</span>,<span class="string">"M"</span>,<span class="string">"MM"</span>,<span class="string">"MMM"</span>,<span class="string">"MMMM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] C = &#123;<span class="string">""</span>,<span class="string">"C"</span>,<span class="string">"CC"</span>,<span class="string">"CCC"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"DCC"</span>,<span class="string">"DCCC"</span>,<span class="string">"CM"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] X = &#123;<span class="string">""</span>,<span class="string">"X"</span>,<span class="string">"XX"</span>,<span class="string">"XXX"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"LXX"</span>,<span class="string">"LXXX"</span>,<span class="string">"XC"</span>&#125;;</div><div class="line">        <span class="built_in">String</span>[] I = &#123;<span class="string">""</span>,<span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>&#125;;</div><div class="line">        <span class="keyword">return</span> M[<span class="built_in">num</span>/<span class="number">1000</span>]+C[<span class="built_in">num</span>%<span class="number">1000</span>/<span class="number">100</span>]+X[<span class="built_in">num</span>%<span class="number">100</span>/<span class="number">10</span>]+I[<span class="built_in">num</span>%<span class="number">10</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Roman to Integer]]></title>
      <url>http://xinli90.com/2016/09/07/Roman-to-Integer/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Leetcode-Roman to Integer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I = <span class="number">1</span>				II = <span class="number">2</span> 	III = <span class="number">3</span></div><div class="line">V = <span class="number">5</span>				IV = <span class="number">4</span>	VI = <span class="number">6</span>	VII = <span class="number">7</span>   VIII = <span class="number">8</span></div><div class="line">X = <span class="number">10</span>				IX = <span class="number">9</span>  XI = <span class="number">11.</span>..</div><div class="line">L = <span class="number">50</span>				</div><div class="line">C = <span class="number">100</span></div><div class="line">D = <span class="number">500</span></div><div class="line">M = <span class="number">1000</span></div></pre></td></tr></table></figure>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1:"></a>Solution1:</h4><ol>
<li>The character which is greater precede the smaller one, add the original number. Otherwise, add the number which minus previous one.</li>
<li>Using Switch method to choose the right number to add based on the different character ordering. </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2:"></a>Solution2:</h4><ol>
<li>Maintain previous pointer and current pointer, if current element is less than previous one, add it.  </li>
<li>Otherwise, minus the previous one and add the difference of current and previous element.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">		<span class="keyword">char</span> previous = <span class="string">'\0'</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="built_in">switch</span>(c) &#123;</div><div class="line">				<span class="built_in">case</span> <span class="string">'I'</span>: num++; <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'V'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">3</span> : <span class="number">5</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'X'</span>: num += (previous==<span class="string">'I'</span>) <span class="number">8</span> : <span class="number">10</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'L'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">30</span> : <span class="number">50</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'C'</span>: num += (previous==<span class="string">'X'</span>) <span class="number">80</span> : <span class="number">100</span>;</div><div class="line">						  <span class="built_in">break</span>;		  </div><div class="line">				<span class="built_in">case</span> <span class="string">'D'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">300</span> : <span class="number">500</span>;</div><div class="line">						  <span class="built_in">break</span>;</div><div class="line">				<span class="built_in">case</span> <span class="string">'M'</span>: num += (previous==<span class="string">'C'</span>) <span class="number">800</span> : <span class="number">1000</span>;</div><div class="line">						  <span class="built_in">break</span>;	</div><div class="line">				<span class="built_in">default</span>: <span class="built_in">return</span> <span class="number">0</span>;	  </div><div class="line">			&#125;</div><div class="line">			previous = c;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> romanToInt(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="keyword">int</span> cur = <span class="built_in">map</span>.<span class="built_in">get</span>(c);</div><div class="line">			<span class="built_in">if</span>(cur&lt;=pre) sum += cur;</div><div class="line">			<span class="built_in">else</span> sum = sum - pre + cur - pre;</div><div class="line">			pre = cur;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day12 JAVA Key Words]]></title>
      <url>http://xinli90.com/2016/09/06/Day12-JAVA-Key-Words/</url>
      <content type="html"><![CDATA[<p>本篇是关于Java各种关键字的区别。</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆关键字特性</li>
<li>总结关键字特性，并总结用法</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>private , protected, public: private 只有当前class内可见，protected当前class,subclass和一个package下可见，public所有可见。</li>
<li>Interface and Abstract class: Interface的方法不用具体实现，默认是public的方法，如果有成员变量也默认为 public， Abstact class中方法需要具体实现，用abstract 关键字来区别是否为abstract method,可以有非abstact得方法和成员变量。</li>
<li>extnds and implement: extends一个abstact class，implement多个interface</li>
<li>static用法：static可以在创建new instance of class 前直接调用。</li>
<li>final：定义后的变量初次赋值后，不可再变。</li>
<li>Polymorphism: 当一个类继承和实现其他抽象类或接口后，该类就具备了其他类所具备的方法</li>
<li>Encapsulation: 为了使代码解耦，使得相同功能的代码放在一起，加强代码的利用率。</li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="class-and-object"><a href="#class-and-object" class="headerlink" title="class and object"></a>class and object</h3><p>Class is a general concept and the object is a very specific embodiment of that class, with a limited lifespan.</p>
<ol>
<li>Class: A class is a program construct which encapsulate data and operation on data.</li>
<li>Object: is an actual instance of a class.</li>
</ol>
<h3 id="Interface-and-Abstract-class"><a href="#Interface-and-Abstract-class" class="headerlink" title="Interface and Abstract class"></a>Interface and Abstract class</h3><ol>
<li><p><code>Interface</code>: All methods in interface are implictly abstract.  We should implement all the declared methods.  A class could implement multiple interface.  Members of interface are <code>public</code> and variables are <code>static,final and public</code> by default. (Since interface doesn’t have a direct object, the only way to access them is by using a class/interface and hence that is why if interface variable exists, it should be static otherwise it won’t be accessible at all to outside world. Now since it is static, it can be hold only one value and any classes that implements it can change it and it will be all mess. So it is final)</p>
</li>
<li><p><code>Abstract class</code>: It’s allowed to have non-abstract methods. So the memeber of abstract class can either be private,protected and public and may contain non-final variables.  A class can only extends one abstact class. They may not implement all declared methods, in this case, the subclass must be also declared as an abstract class. An abstract method could be protected or public.</p>
</li>
</ol>
<h3 id="Inner-class"><a href="#Inner-class" class="headerlink" title="Inner class"></a>Inner class</h3><p>A class can be a <code>member of another class</code>, which is an inner class.  </p>
<p><code>Non-static nested classes</code> (inner classes) have access to other members of the enclosing class, even if they are declared private.  It is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such “helper classes” makes their package more streamlined.  </p>
<p>It increases <code>encapsulation</code>: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A, A’s members can be declared private and B can access them. In addition, B itself can be hidden from the outside world.  It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.</p>
<h3 id="Inheritance-Polymorphism-Encapsulation"><a href="#Inheritance-Polymorphism-Encapsulation" class="headerlink" title="Inheritance,Polymorphism,Encapsulation"></a>Inheritance,Polymorphism,Encapsulation</h3><ol>
<li><p><code>Inheritance</code>: The ability of a new class to be created, from an existing class by extends it.</p>
</li>
<li><p><code>Polymorphism</code>: Polymorphism is a generic term that means ‘many shapes’.  More precisely means the ability to request that the same operations be performed by a wide range of different types of things.</p>
</li>
<li><p><code>Encapsulation</code>: is often used as a technique for encouraging decoupling.  This is useful because it prevents the external code from being concerned with teh internal workings of an object.</p>
</li>
</ol>
<h3 id="Override-and-Overload"><a href="#Override-and-Overload" class="headerlink" title="Override and Overload"></a>Override and Overload</h3><ol>
<li><p><code>Override</code> is defined as the case when a child class redefines the same method as a parent class. Override methods must have the same name, argumentlist and return type.</p>
</li>
<li><p><code>Overload</code> occurs when two or more methods in the same class have the exact same name, but different parameters.</p>
</li>
</ol>
<h3 id="private-protected-public"><a href="#private-protected-public" class="headerlink" title="private, protected, public"></a>private, protected, public</h3><ol>
<li><p><code>private</code>: We can only use the private variable in instance class.</p>
</li>
<li><p><code>protected</code>: Protected variable can be accessed in the same package and subclass.</p>
</li>
<li><p><code>public</code>: public opens for any scope.</p>
</li>
</ol>
<h3 id="static-and-static-block"><a href="#static-and-static-block" class="headerlink" title="static and static block"></a>static and static block</h3><ol>
<li><p><code>Static</code> function have no object to work with since they belong to the class as a whole. You can call a static function without an object.<br>So a static function cannot access non-static member variables of class. We cannot use ‘this’ pointer. <code>This</code> pointer is only used when a class is instantiated as an object.</p>
</li>
<li><p><code>Static block</code>: It’s a <code>static initializer</code>. It’s used when a block of code needs to be executed during loading of the class by JVM. It can be thought of as a “class constructor”. It’s mostly used for changing the default values of static variables. Execute static block first, then execute constructor.</p>
</li>
<li><p><code>static class</code>: A <code>class</code> can be made static only if it is a nested Class. The nested static class can be accessed without having an object of outer class. </p>
</li>
</ol>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">/* Java program to demonstrate how to implement<span class="keyword"> static</span><span class="built_in"> and </span>non-static</div><div class="line">   classes in a java program. */</div><div class="line">class OuterClass&#123;</div><div class="line">  <span class="keyword"> private</span><span class="keyword"> static</span> String msg = <span class="string">"GeeksForGeeks"</span>;</div><div class="line">    </div><div class="line">   // Static nested class</div><div class="line">  <span class="keyword"> public</span><span class="keyword"> static</span> class NestedStaticClass&#123;</div><div class="line">      </div><div class="line">       // Only<span class="keyword"> static</span> members of Outer class is directly accessible in nested </div><div class="line">       //<span class="keyword"> static</span> class </div><div class="line">      <span class="keyword"> public</span> void printMessage() &#123;</div><div class="line"> </div><div class="line">         // Try making 'message' a non-static variable, there will be </div><div class="line">         // compiler error  </div><div class="line">         System.out.println(<span class="string">"Message from nested static class: "</span> + msg); </div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // non-static nested class - also called Inner class</div><div class="line">   <span class="keyword"> public</span> class InnerClass&#123;</div><div class="line">        </div><div class="line">       // Both<span class="keyword"> static</span><span class="built_in"> and </span>non-static members of Outer class are accessible in </div><div class="line">       // this Inner class</div><div class="line">      <span class="keyword"> public</span> void display()&#123;</div><div class="line">          System.out.println(<span class="string">"Message from non-static nested class: "</span>+ msg);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">class Main</div><div class="line">&#123;</div><div class="line">    // How to create<span class="built_in"> instance </span>of<span class="keyword"> static</span><span class="built_in"> and </span>non<span class="keyword"> static</span> nested class?</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> void main(String args[])&#123;</div><div class="line">        </div><div class="line">       // create<span class="built_in"> instance </span>of nested Static class</div><div class="line">       OuterClass.NestedStaticClass printer =<span class="built_in"> new </span>OuterClass.NestedStaticClass();</div><div class="line">        </div><div class="line">       // call non<span class="keyword"> static</span> method of nested<span class="keyword"> static</span> class</div><div class="line">       printer.printMessage();   </div><div class="line">  </div><div class="line">       // In order to create<span class="built_in"> instance </span>of Inner class we need an Outer class </div><div class="line">       // instance. Let us create Outer class<span class="built_in"> instance </span>for creating </div><div class="line">       // non-static nested class</div><div class="line">       OuterClass outer =<span class="built_in"> new </span>OuterClass();        </div><div class="line">       OuterClass.InnerClass inner  = outer.new InnerClass();</div><div class="line">        </div><div class="line">       // calling non-static method of Inner class</div><div class="line">       inner.display();</div><div class="line">        </div><div class="line">       // we can also combine above steps in one step to create<span class="built_in"> instance </span>of </div><div class="line">       // Inner class</div><div class="line">       OuterClass.InnerClass innerObject =<span class="built_in"> new </span>OuterClass().new InnerClass();</div><div class="line">        </div><div class="line">       // similarly we can now call Inner class method</div><div class="line">       innerObject.display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><code>static method</code>: Static mehods and variables can be accessed using class name. In the static method, we can not use non-static variables.</p>
</li>
<li><p><code>static variable</code>: are known as Class Variables. Such variables get default values based on the data type. Memory allocation only happens once when the class is loaded in memory. Static variables are common for all instances.</p>
</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Example&#123;</div><div class="line">   static int Var1=<span class="number">77</span>; <span class="comment">//Static integer variable</span></div><div class="line">   <span class="keyword">String</span> Var2;<span class="comment">//non-static string variable</span></div><div class="line"></div><div class="line">   public static void main(<span class="keyword">String</span> args[])</div><div class="line">   &#123;</div><div class="line">      Example8 ob1 = <span class="keyword">new</span> Example8();</div><div class="line">      Example8 ob2 = <span class="keyword">new</span> Example8();</div><div class="line">      ob1.Var1=<span class="number">88</span>;</div><div class="line">      ob1.Var2=<span class="string">"I'm Object1"</span>;</div><div class="line">      ob2.Var2=<span class="string">"I'm Object2"</span>;</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob1 integer:"</span>+ob1.Var1);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob1 String:"</span>+ob1.Var2);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob2 integer:"</span>+ob2.Var1);</div><div class="line">      <span class="keyword">System</span>.out.println(<span class="string">"ob2 STring:"</span>+ob2.Var2);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">Output</span>:</div><div class="line"></div><div class="line">ob1 integer:<span class="number">88</span></div><div class="line">ob1 <span class="keyword">String</span>:I'm Object1</div><div class="line">ob2 integer:<span class="number">88</span></div><div class="line">ob2 <span class="keyword">String</span>:I'm Object2</div></pre></td></tr></table></figure>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>The instance variable with final keyword can’t be changed.  When applied to either class(can not be used as base class to derive any class from it) or method(cann’t be overriden), turns off late binding, and thus prevents polymorphism.</p>
<h3 id="enum-and-Enumeration"><a href="#enum-and-Enumeration" class="headerlink" title="enum and Enumeration"></a>enum and Enumeration</h3><ol>
<li><code>enum</code> is a special data type that enables for a variable to be a set of predefined constants.  The variable must be equal to one of the values that have been predefined for it.</li>
<li><code>Enumeration</code> is an interface.  An object that implements the Enumeration interface generates a series of elements, one at a tiem. Successive calls to the ‘nextElement’ method return successive elements of the series.<br>For example, to print all elements of a Vector<e> v:</e></li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for (<span class="name">Enumeration&lt;E&gt;</span> e = v.elements()<span class="comment">; e.hasMoreElements();)</span></div><div class="line">       System.out.println(<span class="name">e</span>.nextElement())<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Word Search]]></title>
      <url>http://xinli90.com/2016/09/06/Word-Search/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/word-search/" target="_blank" rel="external">Leetcode-Word Search</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board and a word, find if the word exists in the grid.    </p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.      </p>
<p>For example, </p>
<p>Given board =    </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'B</span>',<span class="symbol">'C</span>',<span class="symbol">'E</span>'],</div><div class="line">  [<span class="symbol">'S</span>',<span class="symbol">'F</span>',<span class="symbol">'C</span>',<span class="symbol">'S</span>'],</div><div class="line">  [<span class="symbol">'A</span>',<span class="symbol">'D</span>',<span class="symbol">'E</span>',<span class="symbol">'E</span>']</div><div class="line">]</div></pre></td></tr></table></figure>
<p>word = “ABCCED”, -&gt; returns true,<br>word = “SEE”, -&gt; returns true,<br>word = “ABCB”, -&gt; returns false.        </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ol>
<li>Recursion and Backtracking.</li>
<li>Check each element for the find() method.  </li>
<li>Make the current element “#” so that we cannot move back to traverse.  After traversal, recover its value to the original one.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> exist(<span class="keyword">char</span>[][] board, <span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">		<span class="keyword">char</span>[] arr = <span class="keyword">word</span>.toCharArray();</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++) &#123;</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++) &#123;				<span class="built_in">if</span>(<span class="built_in">find</span>(board,arr,<span class="number">0</span>,i,j)) <span class="built_in">return</span> true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> <span class="built_in">find</span>(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] <span class="keyword">word</span>,<span class="keyword">int</span> index,<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">		<span class="built_in">if</span>(index == <span class="keyword">word</span>.length) <span class="built_in">return</span> true;</div><div class="line">		<span class="built_in">if</span>(x&gt;<span class="number">0</span> || x&gt;board.length<span class="number">-1</span> || y&lt;<span class="number">0</span> || y&gt;board[<span class="number">0</span>].length<span class="number">-1</span>) <span class="built_in">return</span> false;</div><div class="line">		<span class="built_in">if</span>(board[x][y]!=<span class="keyword">word</span>[index]) <span class="built_in">return</span> false;</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="keyword">boolean</span> exist = <span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x+<span class="number">1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x<span class="number">-1</span>,y)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y<span class="number">-1</span>)||<span class="built_in">find</span>(board,<span class="keyword">word</span>,<span class="number">1</span>+index,x,y+<span class="number">1</span>);</div><div class="line">		board[x][y] ^= <span class="number">256</span>;</div><div class="line">		<span class="built_in">return</span> exist;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Regular Expression Matching(unsolved)]]></title>
      <url>http://xinli90.com/2016/09/06/Regular-Expression-Matching/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="external">Leetcode-Regular Expression Matching</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span> Matches any single character.</div><div class="line"><span class="string">'*'</span> Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire <span class="selector-tag">input</span> string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</div><div class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>1.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Solution1:recursion</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">0</span>) <span class="keyword">return</span> s.length()==<span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(p.length()==<span class="number">1</span>) <span class="keyword">return</span> (s.length()==<span class="number">1</span>)&amp;&amp;(p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>);</div><div class="line">       <span class="keyword">if</span>(p.charAt(<span class="number">1</span>)!=<span class="string">'*'</span>) &#123;</div><div class="line">           <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">return</span> (s.charAt(<span class="number">0</span>)==p.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)&amp;&amp;isMatch(s.substring(<span class="number">1</span>),p.substring(<span class="number">1</span>));</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span> &amp;&amp; (p.charAt(<span class="number">0</span>)==s.charAt(<span class="number">0</span>)||p.charAt(<span class="number">0</span>)==<span class="string">'.'</span>)) &#123;</div><div class="line">               <span class="keyword">if</span>(isMatch(s,p.substring(<span class="number">2</span>)))<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               s = s.substring(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> isMatch(s,p.substring(<span class="number">2</span>));</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2:DP</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span> || p==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</div><div class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span>(p.charAt(i)==<span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">1</span>]) &#123;</div><div class="line">				dp[<span class="number">0</span>][i+<span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;p.length(); j++) &#123;</div><div class="line">				<span class="keyword">if</span>(s.charAt(i) == p.charAt(j)||p.charAt(j)==<span class="string">'.'</span>) &#123;</div><div class="line">					dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j];</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(p.charAt(j)==<span class="string">'*'</span>) &#123;</div><div class="line">					<span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>)!= s.charAt(i) &amp;&amp; p.charAt(j-<span class="number">1</span>)!=<span class="string">'.'</span>) &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">					&#125;<span class="keyword">else</span> &#123;</div><div class="line">						dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j]||dp[i+<span class="number">1</span>][j-<span class="number">1</span>]||dp[i][j+<span class="number">1</span>]);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dp[s.length()][p.length()];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day11 Multithreading]]></title>
      <url>http://xinli90.com/2016/09/02/Day11-Multithreading/</url>
      <content type="html"><![CDATA[<p>本篇关于Multithreading多线程的原理与应用.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆多线程特性</li>
<li>实现多线程结构</li>
<li>实战训练使用该多线程</li>
<li>总结该多线程特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><h2 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h2><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>Solution1: Thread safe</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</div><div class="line">	<span class="comment">//privent others from instantiating this class</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">				<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">					instance = <span class="keyword">new</span> Singleton();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Clone Graph]]></title>
      <url>http://xinli90.com/2016/08/30/Clone-Graph/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/clone-graph/" target="_blank" rel="external">Leetcode-Clone Graph</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>
<p>OJ’s undirected graph serialization:     </p>
<p>Nodes are labeled uniquely.</p>
<p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.</p>
<p>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p>
<p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.   </p>
<ol>
<li>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.</li>
<li>Second node is labeled as 1. Connect node 1 to node 2.</li>
<li>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.    </li>
</ol>
<p>Visually, the graph looks like the following:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="number">1</span></div><div class="line">  / <span class="string">\</span></div><div class="line"> /   <span class="string">\</span></div><div class="line"><span class="number">0</span> --- <span class="number">2</span></div><div class="line">     / <span class="string">\</span></div><div class="line">     <span class="string">\_/</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use BFS</li>
<li>Queue + HashMap</li>
<li>In HashMap, key is label, value is new Object.  So each time we clone each node through HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Use DFS + Recursive Solution</li>
<li>If node is empty, return null.</li>
<li>If there is already the node in HashMap, return it.</li>
<li>Else traverse neighbor nodes, clone it and store it into HashMap and recursively add new node into its neighbors.</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for undirected graph.</div><div class="line"> * class UndirectedGraphNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     List&lt;UndirectedGraphNode&gt; neighbors;</div><div class="line"> *     UndirectedGraphNode(int x) &#123; label = x; neighbors = new ArrayList&lt;UndirectedGraphNode&gt;(); &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">public class Solution1 &#123;</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">        <span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;    </div><div class="line">    	Queue&lt;UndirectedGraphNode&gt; queue = <span class="built_in">new</span> ArrayDeque&lt;&gt;();</div><div class="line">    	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    	queue.offer(node);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	</div><div class="line">    	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">    		UndirectedGraphNode input = queue.poll();</div><div class="line">    		List&lt;UndirectedGraphNode&gt; neighbor = input.<span class="built_in">neighbors</span>;</div><div class="line">    		<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    			int <span class="built_in">label</span> = neighbor.<span class="built_in">get</span>(i).<span class="built_in">label</span>;</div><div class="line">    			<span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(<span class="built_in">label</span>)) &#123;</div><div class="line">    				<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="built_in">label</span>,<span class="built_in">new</span> UndirectedGraphNode(<span class="built_in">label</span>));</div><div class="line">    				queue.offer(neighbor.<span class="built_in">get</span>(i));</div><div class="line">    			&#125;</div><div class="line">    			<span class="built_in">map</span>.<span class="built_in">get</span>(input.<span class="built_in">label</span>).<span class="built_in">neighbors</span>.add(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">label</span>));</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	HashMap&lt;Integer,UndirectedGraphNode&gt; <span class="built_in">map</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</div><div class="line">    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) &#123;</div><div class="line">    	<span class="keyword">if</span>(node == null) <span class="built_in">return</span> null;</div><div class="line">    	<span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(node.<span class="built_in">label</span>)) <span class="built_in">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(node.<span class="built_in">label</span>);</div><div class="line">    	UndirectedGraphNode newNode = <span class="built_in">new</span> UndirectedGraphNode(node.<span class="built_in">label</span>);</div><div class="line">    	<span class="built_in">map</span>.<span class="built_in">put</span>(newNode.<span class="built_in">label</span>,newNode);</div><div class="line">    	List&lt;UndirectedGraphNode&gt; neighbor = node.<span class="built_in">neighbors</span>;</div><div class="line">    	<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;neighbor.size(); i++) &#123;</div><div class="line">    		newNode.<span class="built_in">neighbors</span>.add(cloneGraph(neighbor.<span class="built_in">get</span>(i)));</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> newNode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Insert Delete GetRandom O(1)]]></title>
      <url>http://xinli90.com/2016/08/30/Insert-Delete-GetRandom-O-1/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/insert-delete-getrandom-o1/" target="_blank" rel="external">Leetcode-Insert Delete GetRandom O(1)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports all following operations in average O(1) time.</p>
<ol>
<li>insert(val): Inserts an item val to the set if not already present.</li>
<li>remove(val): Removes an item val from the set if present.</li>
<li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li>
</ol>
<p>Example:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init an empty set.</span></div><div class="line"><span class="type">RandomizedSet</span> randomSet = <span class="function"><span class="keyword">new</span> <span class="title">RandomizedSet</span>();</span></div><div class="line"></div><div class="line"><span class="comment">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Returns false as 2 does not exist in the set.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Inserts 2 to the set, returns true. Set now contains [1,2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// getRandom should return either 1 or 2 randomly.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div><div class="line"></div><div class="line"><span class="comment">// Removes 1 from the set, returns true. Set now contains [2].</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">remove</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 2 was already in the set, so return false.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">insert</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// Since 1 is the only number in the set, getRandom always return 1.</span></div><div class="line"><span class="title">randomSet</span>.<span class="title">getRandom</span>();</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use HashMap and ArrayList</li>
<li>Dlete operation: 1. Swap the target to the last of list and remove the last element. This takes O(1) time. 2. Should update the value of the last element in HashMap.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Keep two HashMap</li>
<li>One hashmap stores <value, location="">, another hashmap stores<location, value="">.</location,></value,></li>
<li>Dlete operation: Inorder to maintain the correct location, when delete one element from output HashMap, we need update the pair with the size of input as the key.  Then we need correspondingly update the value of this specific pair in input HashMap.</li>
<li>Random to get element from the second hashmap</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="built_in">map</span>;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</div><div class="line">    </div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">map</span>.put(val,list.<span class="built_in">size</span>());</div><div class="line">            list.<span class="built_in">add</span>(val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">int</span> index = <span class="built_in">map</span>.<span class="built_in">get</span>(val);</div><div class="line">          </div><div class="line">            <span class="built_in">int</span> temp = list.<span class="built_in">get</span>(list.<span class="built_in">size</span>()<span class="number">-1</span>);                        </div><div class="line">            list.<span class="built_in">set</span>(index,temp);</div><div class="line">            <span class="built_in">map</span>.put(temp,index);</div><div class="line">            </div><div class="line">            <span class="built_in">map</span>.remove(val);</div><div class="line">            list.remove(list.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random rand = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = rand.nextInt(list.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> list.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;		</div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> class RandomizedSet &#123;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; input;</div><div class="line">	<span class="keyword">HashMap</span>&lt;Integer,Integer&gt; output;</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="keyword">public</span> RandomizedSet() &#123;</div><div class="line">        input = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">        output = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;Integer,Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> insert(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">size</span>();</div><div class="line">        input.put(val,location);</div><div class="line">        output.put(location,val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="built_in">int</span> val) &#123;</div><div class="line">        <span class="keyword">if</span>(!input.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span> location = input.<span class="built_in">get</span>(val);</div><div class="line">        <span class="built_in">int</span> insteadValue = output.<span class="built_in">get</span>(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//update the pair which the key is the last location</span></div><div class="line">        output.put(location,insteadValue);</div><div class="line">        input.put(insteadValue,location);</div><div class="line">        </div><div class="line">        <span class="comment">//remove the key with the last location</span></div><div class="line">        output.remove(input.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">        input.remove(val);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get a random element from the set. */</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getRandom() &#123;</div><div class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">        <span class="built_in">int</span> index = <span class="built_in">random</span>.nextInt(input.<span class="built_in">size</span>());</div><div class="line">        <span class="keyword">return</span> output.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alien Dictionary(UnSolved)]]></title>
      <url>http://xinli90.com/2016/08/30/Alien-Dictionary/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/alien-dictionary/" target="_blank" rel="external">Leetcode-Alien Dictionary</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.</p>
<p>For example,<br>Given the following words in dictionary,</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  <span class="string">"wrt"</span>,</div><div class="line">  <span class="string">"wrf"</span>,</div><div class="line">  <span class="string">"er"</span>,</div><div class="line">  <span class="string">"ett"</span>,</div><div class="line">  <span class="string">"rftt"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>The correct order is: “wertf”.</p>
<p>Note:</p>
<ol>
<li>You may assume all letters are in lowercase.</li>
<li>If the order is invalid, return an empty string.</li>
<li>There may be multiple valid order of letters, return any one of them is fine.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>BFS</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>DFS</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> alienOrder(<span class="keyword">String</span>[] words) &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sort Colors]]></title>
      <url>http://xinli90.com/2016/08/30/Sort-Colors/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="external">Leetcode-Sort Colors</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p>Note:<br>You are not suppose to use the library’s sort function for this problem.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n), space complexity is O(3)</li>
<li>Loop this array and count the frequency of each number.</li>
<li>Assign to original array one by one </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Follow the first step of solution1, loop the count array instead of loop the nums array.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Solution1 and solution2 are two-pass algorithm</li>
<li>We can track low and high pointer and use i to iterate this array to make 0 left and 2 right. </li>
<li>That would be one pass and constant space.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[<span class="keyword">index</span>]&lt;=<span class="number">0</span> &amp;&amp; <span class="keyword">index</span>&lt;<span class="number">3</span>)&#123;</div><div class="line">				<span class="keyword">index</span>++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">index</span>==<span class="number">3</span>) <span class="keyword">return</span>;</div><div class="line">			nums[i] = <span class="keyword">index</span>;</div><div class="line">			<span class="keyword">count</span>[<span class="keyword">index</span>]--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> [] <span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">			<span class="keyword">count</span>[num]++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">count</span>[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">				nums[<span class="keyword">index</span>++] = i;</div><div class="line">				<span class="keyword">count</span>[i]--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sortColors(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> high = nums.length<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=low; i&lt;=high;) &#123;</div><div class="line">			<span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</div><div class="line">				swap(nums,i,low);</div><div class="line">				<span class="comment">//in order to maintain low point to 1,and we don't handle 1,so to do the next round.</span></div><div class="line">				low++;</div><div class="line">				i++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==<span class="number">2</span>) &#123;</div><div class="line">				swap(nums,i,high);</div><div class="line">				high--;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> swap(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</div><div class="line">		<span class="keyword">int</span> temp = nums[i];</div><div class="line">		nums[i] = nums[j];</div><div class="line">		nums[j] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lowest Common Ancestor of a Binary Tree]]></title>
      <url>http://xinli90.com/2016/08/25/Lowest-Common-Ancestor-of-a-Binary-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="external">Leetcode-Lowest Common Ancestor of a Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="external">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">     _______3______</div><div class="line">    /              \</div><div class="line"> ___5__          ___1__</div><div class="line">/      \        /      \</div><div class="line"><span class="number">6</span>      _2       <span class="number">0</span>       <span class="number">8</span></div><div class="line">      /  \</div><div class="line">      <span class="number">7</span>   <span class="number">4</span></div></pre></td></tr></table></figure>
<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>If search from root and find two target nodes in different sides. Then the LCA is root.</li>
<li>If find two nodes in left subtree, then recursively search from the left of root.</li>
<li>If find two nodes in right subtree, then recursively search from the right of root.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><ol>
<li>If root is null, return null</li>
<li>If root is one of two nodes, return root.</li>
<li>Recurseively traverse left subtree and right subtree.</li>
<li>If both left subtree and right subtree get the specific node, then return root.</li>
<li>If one of subtree is null, return another subtree.</li>
</ol>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Use List to record the path which find from root to the specific nodes.</li>
<li>Compare elements from two lists and get the last common elements.</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(findNode(root.left,p)) &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.left,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.left,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.right,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.right,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean findNode(TreeNode root, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(root==node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		</div><div class="line">		boolean found = findNode(root.left,node);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findNode(root.right,node);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</div><div class="line">		TreeNode commonLeft = getLastCommonParentRec(root.left,p,q);</div><div class="line">		TreeNode commonRight = getLastCommonParentRec(root.right,p,q);</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span> &amp;&amp; commonRight!=<span class="literal">null</span>) <span class="keyword">return</span> root;</div><div class="line">		<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span>) <span class="keyword">return</span> commonLeft;</div><div class="line">		<span class="keyword">return</span> commonRight;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; list1 = new ArrayList&lt;&gt;();</div><div class="line">		ArrayList&lt;TreeNode&gt; list2 = new ArrayList&lt;&gt;();</div><div class="line">		boolean found1 = findPath(root,p,list1);</div><div class="line">		boolean found2 = findPath(root,q,list2);</div><div class="line">		<span class="keyword">if</span>(!found1 || !found2) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">	</div><div class="line">		TreeNode result = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;Math.min(list1.size(),list2.size());i++) &#123;</div><div class="line">			<span class="keyword">if</span>(list1.<span class="keyword">get</span>(i)==list2.<span class="keyword">get</span>(i))&#123;</div><div class="line">				result = list1.<span class="keyword">get</span>(i);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	boolean findPath(TreeNode root, TreeNode node, ArrayList&lt;TreeNode&gt; list) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		list.add(root);</div><div class="line">		<span class="keyword">if</span>(root == node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		boolean found = findPath(root.left,node,list);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findPath(root.right,node,list);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!found) list.remove(root);</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Construct Binary Tree from Preorder and Inorder Traversal]]></title>
      <url>http://xinli90.com/2016/08/25/Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="external">Leetcode-Construct Binary Tree from Preorder and Inorder Traversal </a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p>Note:<br>You may assume that duplicates do not exist in the tree.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution-Iterative-solution"><a href="#Solution-Iterative-solution" class="headerlink" title="Solution: Iterative solution."></a>Solution: Iterative solution.</h4><ol>
<li>PreOrder: root is the first element in the array and use this element to divide inorder array. </li>
<li>InOrder: the left array of the root is left subtree and the right array of the root is right subtree.We can get the size of left subtree and right subtree and use for the preorder array. Use this size to divide preorder array and build tree.</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> buildTree(preorder,<span class="number">0</span>,preorder.length<span class="number">-1</span>,inorder,<span class="number">0</span>,inorder.length<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="function">TreeNode <span class="title">buildTree</span>(<span class="params"><span class="keyword">int</span>[]preorder,<span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[]inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">int</span> rootVal = preorder[preStart];</div><div class="line">		<span class="keyword">int</span> inRoot=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=inStart,j=inEnd; i&lt;=j; i++,j--) &#123;</div><div class="line">			<span class="keyword">if</span>(inorder[i] == rootVal) &#123;</div><div class="line">				inRoot = i;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">inorder[j] == rootVal</span>)</span>&#123;</div><div class="line">				inRoot = j;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; </div><div class="line">		TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</div><div class="line">		root.left = buildTree(preorder,preStart+<span class="number">1</span>,preStart+(inRoot-inStart), inorder,inStart,inRoot<span class="number">-1</span>);</div><div class="line">		root.right = buildTree(preorder,preEnd-(inEnd-inRoot)+<span class="number">1</span>,preEnd,inorder,inRoot+<span class="number">1</span>,inEnd);</div><div class="line">		<span class="keyword">return</span> root;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Balanced Binary Tree]]></title>
      <url>http://xinli90.com/2016/08/24/Balanced-Binary-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/balanced-binary-tree/" target="_blank" rel="external">Leetcode-Balanced Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><p>Time complexity is O(nlogn).     </p>
<ol>
<li>if tree is null, return true;</li>
<li>if the difference of left subtree and right subtree is greater than 1, return false;</li>
<li>recursively compare left subtree and right subtree loop 1 and 2.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><p>Time complexity is O(n)</p>
<ol>
<li>Get the depth of left subtree and right subtree from bottom to the top.</li>
<li>Once the difference of two depth is greater than 1, it will always return -1 and there is no need to compare any more.  If not, return its depth for the father node.   </li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isBalanced(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(Math.abs(getDepth(root.left)-getDepth(root.right))&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	int getDepth(TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> Math.max(getDepth(node.left),getDepth(node.right))+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isBalanced(TreeNode root) &#123;			<span class="keyword">if</span>(getDepth(root)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	int getDepth(TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		</div><div class="line">		int leftDepth = getDepth(node.left);</div><div class="line">		<span class="keyword">if</span>(leftDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		int rightDepth = getDepth(node.right);</div><div class="line">		<span class="keyword">if</span>(rightDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		int diff = Math.abs(leftDepth-rightDepth);</div><div class="line">		<span class="keyword">if</span>(diff&gt;<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> Math.max(leftDepth,rightDepth) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Same Tree]]></title>
      <url>http://xinli90.com/2016/08/24/Same-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="external">Leetcode-Same Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if two nodes are null, return true;</li>
<li>if the value of two nodes are equivalent, recursively compare their left and right subtree.</li>
<li>else return false.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Traverse two trees and compare each nodes.</li>
<li>Use Pre-Order traversal.</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isSameTree(TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">if</span>(p.<span class="keyword">val</span>!=q.<span class="keyword">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		<span class="keyword">if</span>(p.<span class="keyword">val</span>==q.<span class="keyword">val</span>) <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;isSameTree(p.right,q.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> boolean isSameTree(TreeNode p, TreeNode q) &#123;		<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		Stack&lt;TreeNode&gt; s1 = new Stack&lt;&gt;();</div><div class="line">		Stack&lt;TreeNode&gt; s2 = new Stack&lt;&gt;();</div><div class="line">		s1.push(p);</div><div class="line">		s2.push(q);</div><div class="line">		<span class="keyword">while</span>(!s1.isEmpty() &amp;&amp; !s2.isEmpty()) &#123;</div><div class="line">			TreeNode node1 = s1.pop();</div><div class="line">			TreeNode node2 = s2.pop();</div><div class="line">			<span class="keyword">if</span>(node1==<span class="literal">null</span> &amp;&amp; node2==<span class="literal">null</span>) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span>(node1!=<span class="literal">null</span> &amp;&amp; node2!=<span class="literal">null</span> &amp;&amp; node1.<span class="keyword">val</span>==node2.<span class="keyword">val</span>) &#123;</div><div class="line">				s1.push(node1.left);</div><div class="line">				s1.push(node1.right);</div><div class="line">				s2.push(node2.left);</div><div class="line">				s2.push(node2.right);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flatten Binary Tree to Linked List]]></title>
      <url>http://xinli90.com/2016/08/23/Flatten-Binary-Tree-to-Linked-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Level Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, flatten it to a linked list in-place.</p>
<p>For example,<br>Given</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">5</span></div><div class="line"> / \   \</div><div class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></div></pre></td></tr></table></figure>
<p>The flattened tree should look like:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line">   \</div><div class="line">    <span class="number">3</span></div><div class="line">     \</div><div class="line">      <span class="number">4</span></div><div class="line">       \</div><div class="line">        <span class="number">5</span></div><div class="line">         \</div><div class="line">          <span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution-Like-post-order-solution"><a href="#Solution1-Recursive-solution-Like-post-order-solution" class="headerlink" title="Solution1: Recursive solution. Like post-order solution."></a>Solution1: Recursive solution. Like post-order solution.</h4><ol>
<li>if tree is null, return.</li>
<li>if tree is not null, Recursively traverse left subtree and then right subtree, change the left subtree to the right and the original right subtree as the most right node.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Each time, make the right subtree of root to be the right subtree of most right node of left child node of root.</li>
<li>Then make the left subtree as the right subtree of the root, move to the next right node, loop 1 and 2.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">		</div><div class="line">		flatten(root.<span class="built_in">left</span>);</div><div class="line">		flatten(root.<span class="built_in">right</span>);</div><div class="line">		</div><div class="line">		TreeNode <span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">		root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">		root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">		TreeNode cur = root;</div><div class="line">		<span class="keyword">while</span>(cur.<span class="built_in">right</span>!=<span class="literal">null</span>) cur = cur.<span class="built_in">right</span>;</div><div class="line">		cur.<span class="built_in">right</span> = <span class="built_in">right</span>;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">		<span class="keyword">while</span>(root!=<span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(root.<span class="built_in">left</span>==<span class="literal">null</span>)&#123;</div><div class="line">				root = root.<span class="built_in">right</span>;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			TreeNode <span class="built_in">left</span> = root.<span class="built_in">left</span>;</div><div class="line">			<span class="keyword">while</span>(<span class="built_in">left</span>.<span class="built_in">right</span>!=<span class="literal">null</span>) &#123;</div><div class="line">				<span class="built_in">left</span> = <span class="built_in">left</span>.<span class="built_in">right</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">left</span>.<span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">			root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">			root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Level Order Traversal]]></title>
      <url>http://xinli90.com/2016/08/23/Binary-Tree-Level-Order-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Level Order Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">9</span>   <span class="number">20</span></div><div class="line"> / \   </div><div class="line"><span class="number">15</span>  <span class="number">7</span></div></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, compare if the size of lists equals to the level. If yes, directly add current node into lists.get(level). If no, create a new list into lists.</li>
<li>Recursively traverse left subtree and right subtree and the level+1.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Use BFS.</li>
<li>For each loop, we add them together into a new List.</li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(lists, root,<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists, TreeNode node, int level) &#123;</div><div class="line">		<span class="keyword">if</span>(node == <span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="comment">//add a new list to the new level of nodes</span></div><div class="line">		<span class="keyword">if</span>(lists.size() == level) lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">Integer</span>&gt;());</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; temp = lists.get(level);</div><div class="line">		temp.add(node.val);</div><div class="line">		helper(lists, node.left,level+<span class="number">1</span>);</div><div class="line">		helper(lists, node.right,level+<span class="number">1</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> lists;</div><div class="line">		<span class="built_in">Queue</span>&lt;TreeNode&gt; <span class="built_in">queue</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</div><div class="line">		<span class="built_in">queue</span>.add(root);</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">queue</span>.isEmpty()) &#123;</div><div class="line">			int size = <span class="built_in">queue</span>.size();</div><div class="line">			<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">			for(int i=<span class="number">0</span>;i&lt;size;i++) &#123;</div><div class="line">				TreeNode node = <span class="built_in">queue</span>.poll();</div><div class="line">				<span class="built_in">list</span>.add(node.val);</div><div class="line">				<span class="keyword">if</span>(node.left!=<span class="built_in">null</span>) <span class="built_in">queue</span>.add(node.left);</div><div class="line">				<span class="keyword">if</span>(node.right!=<span class="built_in">null</span>) <span class="built_in">queue</span>.add(node.right);</div><div class="line">			&#125;</div><div class="line">			lists.add(<span class="built_in">list</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Postorder Traversal]]></title>
      <url>http://xinli90.com/2016/08/23/Binary-Tree-Postorder-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Postorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[3,2,1]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, traverse left subtree, traverse right subtree, visit root and add the value of root into list.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Keep two stacks</li>
<li>Use the way similar to Preorder traversal, preorder is：<code>self, left, right</code>, change its order to <code>self, right, left</code>, then converse to <code>left, right, self</code>    </li>
</ol>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Only one stack. similar to preorder traversal(iterative solution), push root into stack first, then push right subnode and then left subnode.</li>
<li>There are two situations we need pop node from stack to the list. One is the left subnode and right subnode of the current node is null.  Another is the left subtree and right subtree have been visited.</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree <span class="keyword">node</span>.</div><div class="line"> <span class="title">* public</span> class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line">public class Solution1 &#123;</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		helper(list, root);</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">	void helper(List<span class="tag">&lt;Integer&gt;</span> list, TreeNode <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">		if(<span class="keyword">node</span> <span class="title">== null</span>) return;</div><div class="line">		helper(list, <span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">		helper(list, <span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">		list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution2 &#123;</div><div class="line">	//Two stack</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		if(root == null) return list;</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> reverseStack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		stack.push(root);</div><div class="line">		while(!stack.isEmpty()) &#123;</div><div class="line">			TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">			reverseStack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">			if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">		&#125;</div><div class="line">		while(!reverseStack.isEmpty()) &#123;</div><div class="line">			list.add(reverseStack.pop());</div><div class="line">		&#125;</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Solution3 &#123;</div><div class="line">	public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">		List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">		if(root == null) return list;</div><div class="line">		Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">		stack.push(root);</div><div class="line">		TreeNode prev = null;</div><div class="line">		while(!stack.isEmpty()) &#123;</div><div class="line">			TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.peek();</div><div class="line">			</div><div class="line">			//<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null means <span class="keyword">node</span> <span class="title">is</span> leave</div><div class="line">			//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">left</span> means have already traversed left subtree, the right subtree is null			//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span> means have already traversed right subtree</div><div class="line">			//prev!=<span class="keyword">node</span>.<span class="title">left</span>&amp;&amp;prev!=<span class="keyword">node</span>.<span class="title">right</span> means have poped from stack several times <span class="keyword">and</span> get to the another side of tree.</div><div class="line">			</div><div class="line">			if((<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null)||(prev!=null &amp;&amp; (prev == <span class="keyword">node</span>.<span class="title">left</span> || <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span>))) &#123;</div><div class="line">				<span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">				list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">				prev = <span class="keyword">node</span><span class="title">;</span></div><div class="line">			&#125;else &#123;</div><div class="line">				if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">				if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			&#125;		</div><div class="line">		&#125;</div><div class="line">		return list;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Inorder Traversal]]></title>
      <url>http://xinli90.com/2016/08/23/Binary-Tree-Inorder-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Inorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[1,3,2]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, traverse left subtree, visit root and add the value of root into list, and then right subtree.</li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><ol>
<li>Utilize Stack, traverse left subtree of the root to the left most node and push them into stack.      </li>
<li>If left subtree is null, pop() one node from stack and record its value into list. Visit the right subtree of this node once, and then repeat 1 and 2 operation.          </li>
<li>Notice: here is a tricky point. Since traverse left subtree of the root, there is no need to traverse left subtree again for the node which pop from the stack.  Therefore, we need have two nodes. One assigns to the node pop from stack. One assigns to the new node which we find when we traverse right subtree of someone. Traverse left subtree only for the second node.        </li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="comment">//Solution1: add helper() method</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(<span class="built_in">list</span>, root);</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span>, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node == <span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		helper(<span class="built_in">list</span>, node.left);</div><div class="line">		<span class="built_in">list</span>.add(node.val);</div><div class="line">		helper(<span class="built_in">list</span>,node.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">		<span class="built_in">stack</span>.push(root);</div><div class="line">		TreeNode node = root;</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;	</div><div class="line">			<span class="keyword">while</span>(node.left!=<span class="built_in">null</span>) &#123;</div><div class="line">				<span class="built_in">stack</span>.push(node.left);</div><div class="line">				node = node.left;</div><div class="line">			&#125;</div><div class="line">			TreeNode addNode = <span class="built_in">stack</span>.pop();</div><div class="line">			<span class="built_in">list</span>.add(addNode.val);</div><div class="line">			<span class="keyword">if</span>(addNode.right!=<span class="built_in">null</span>) &#123;</div><div class="line">				<span class="built_in">stack</span>.push(addNode.right);</div><div class="line">				node = addNode.right;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Preorder Traversal]]></title>
      <url>http://xinli90.com/2016/08/23/Binary-Tree-Preorder-Traversal/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="external">Leetcode-Binary Tree Preorder Traversal</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<p>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"> \</div><div class="line">  <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>return <code>[1,2,3]</code>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, return.      </li>
<li>if the tree is not null, visit root and add the value of root into list. Traverse left subtree and then right subtree.</li>
</ol>
<h4 id="Solution2-Recursive-solution"><a href="#Solution2-Recursive-solution" class="headerlink" title="Solution2: Recursive solution."></a>Solution2: Recursive solution.</h4><p>The similar way with solution1, but without helper() method.     </p>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><ol>
<li>Utilize Stack, Each time we use List to store the output node from stack.    </li>
<li>Traverse the output node from right to left and push into stack.    </li>
<li>Loop 1 and 2 operation.    </li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="comment">//Solution1: add helper() method</span></div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		helper(<span class="built_in">list</span>,root);</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span>, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="built_in">list</span>.add(node.val);</div><div class="line">		helper(<span class="built_in">list</span>,node.left);</div><div class="line">		helper(<span class="built_in">list</span>,node.right);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">list</span>.add(root.val);</div><div class="line">		<span class="built_in">list</span>.addAll(preorderTraversalRec(root.left));</div><div class="line">		<span class="built_in">list</span>.addAll(preorderTraversalRec(root.right));</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> class Solution3 &#123;</div><div class="line">		<span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;</div><div class="line">		<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">		<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">		<span class="built_in">stack</span>.push(root);</div><div class="line">		<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;</div><div class="line">			TreeNode node = <span class="built_in">stack</span>.pop();</div><div class="line">			<span class="built_in">list</span>.add(node.val);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.right);</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Depth of Binary Tree]]></title>
      <url>http://xinli90.com/2016/08/23/Maximum-Depth-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">Leetcode-Maximum Depth of Binary Tree</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Recursive-solution"><a href="#Solution1-Recursive-solution" class="headerlink" title="Solution1: Recursive solution."></a>Solution1: Recursive solution.</h4><ol>
<li>if the tree is null, the depth is 0;      </li>
<li>if the tree is null, the depth = max(depth of left tree，depth of right tree) + 1       </li>
</ol>
<h4 id="Solution2-Iterative-solution"><a href="#Solution2-Iterative-solution" class="headerlink" title="Solution2: Iterative solution."></a>Solution2: Iterative solution.</h4><p>Utilize BFS, count the levels. It’s the same as the the number of loops.      </p>
<h4 id="Solution3-Iterative-solution"><a href="#Solution3-Iterative-solution" class="headerlink" title="Solution3: Iterative solution."></a>Solution3: Iterative solution.</h4><p>Utilize DFS, record the depth of each path and maintain the maximum one until traversal all paths.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> maxDepth(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="comment">//Traverse tree use BFS</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getNodeNum(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">		queue.add(root);</div><div class="line">		<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">			<span class="keyword">int</span> <span class="keyword">size</span> = queue.<span class="keyword">size</span>();</div><div class="line">			<span class="keyword">count</span> += <span class="keyword">size</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++) &#123;</div><div class="line">				TreeNode node = queue.poll();</div><div class="line">				<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.add(node.left);</div><div class="line">				<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.add(node.right);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day10 Algorithm about Itetation and Recursion]]></title>
      <url>http://xinli90.com/2016/08/22/Day10-Algorithm-about-Itetation-and-Recursion/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day9 Algorithm about Binary Tree]]></title>
      <url>http://xinli90.com/2016/08/22/Day9-Algorithm-about-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<p>本篇是关于二叉树Binary Tree算法的分析和总结。</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆算法特性</li>
<li>实现算法功能</li>
<li>实战训练使用该算法</li>
<li>总结该算法特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>一般二叉树的查找可以使用DFS 和 BFS</li>
<li>平衡二叉树可以使用二分法，时间复杂度为O(logn)</li>
<li>二叉树的遍历有先序遍历，中序遍历 和 后序遍历</li>
<li>Binary Tree and Binary Search Tree: Each node of BT and BST only allowed two children nodes. What’s more, in BST, left &lt; current &lt; right.</li>
</ul>
<h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p>在这里我们总结出经典15道二叉树题目： </p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Definition for a binary tree node.</span></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">TreeNode</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	TreeNode left;</div><div class="line">	TreeNode right;</div><div class="line">	TreeNode(<span class="keyword">int</span> x) &#123;</div><div class="line">		val = x;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.求二叉树中的节点个数: getNodeNumRec（递归），getNodeNum（迭代） </p>
<p>递归解法：Time O(n)<br>(1) 如果二叉树为空，节点个数为0<br>(2) 如果二叉树不为空，二叉树节点个数 = 左子树节点个数 + 右子树节点个数 + 1  </p>
<p>迭代解法：Time O(n)<br>使用DFS 或者 BFS 遍历所有节点，统计节点个数       </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> getNodeNumRec(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> getNodeNumRec(root.left)+getNodeNumRec(root.right)+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Traverse tree use BFS</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> getNodeNum(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">	<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">	queue.add(root);</div><div class="line">	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = queue.<span class="keyword">size</span>();</div><div class="line">		<span class="keyword">count</span> += <span class="keyword">size</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++) &#123;</div><div class="line">			TreeNode node = queue.poll();</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.add(node.left);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.add(node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.求二叉树的深度: getDepthRec（递归），getDepth(迭代)<br>LeetCode - 104.Maximum Depth of Binary Tree<br>递归解法:  Time O(n)<br>(1) 如果二叉树为空，深度为0<br>(2) 如果二叉树不为空，二叉树深度 = max(左子树深度，右子树的深度) + 1</p>
<p>迭代解法： Time O(n)<br>(1)解法一：使用BFS,统计层数 即 执行循环的次数<br>(2)解法二：使用DFS,每次一条路径到底，比较深度，把所有树遍历一遍，找出最大长度   </p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> getDepthRec(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root==<span class="keyword">null</span>) retrun <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> Math.<span class="built_in">max</span>(getDepthRec(root.left),getDepthRec(root.right))+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Traverse tree use BFS</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> getNodeNum(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	<span class="built_in">int</span> count = <span class="number">0</span>;</div><div class="line">	queue.<span class="built_in">add</span>(root);</div><div class="line">	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">size</span> = queue.<span class="built_in">size</span>();</div><div class="line">		count++;</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++) &#123;</div><div class="line">			TreeNode node = queue.poll();</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.left);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.前序遍历，中序遍历，后序遍历: preorderTraversalRec, preorderTraversal, inorderTraversalRec, postorderTraversalRec (<a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_2" target="_blank" rel="external">https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_2</a>) </p>
<p>LeetCode - 104.Binary Tree Preorder Traversal<br>Pre-Order递归解法:  Time O(n)<br>(1) 如果二叉树为空，返回<br>(2) 如果二叉树不为空，访问根节点,list.add(root.val), 前序遍历左子树，前序遍历右子树      </p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1: add helper() method</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">	helper(<span class="built_in">list</span>,root);</div><div class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span>, TreeNode node) &#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="built_in">list</span>.add(node.val);</div><div class="line">	helper(<span class="built_in">list</span>,node.left);</div><div class="line">	helper(<span class="built_in">list</span>,node.right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversalRec(TreeNode root) &#123;</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	<span class="built_in">list</span>.add(root.val);</div><div class="line">	<span class="built_in">list</span>.addAll(preorderTraversalRec(root.left));</div><div class="line">	<span class="built_in">list</span>.addAll(preorderTraversalRec(root.right));</div><div class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pre-Order迭代解法:  Time O(n), Space O(n)<br>使用Stack, 用List存储输出的节点，每次从右向左遍历子节点, 存入Stack中    </p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">	<span class="built_in">stack</span>.push(root);</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;</div><div class="line">		TreeNode node = <span class="built_in">stack</span>.pop();</div><div class="line">		<span class="built_in">list</span>.add(node.val);</div><div class="line">		<span class="keyword">if</span>(node.right!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.right);</div><div class="line">		<span class="keyword">if</span>(node.left!=<span class="built_in">null</span>)<span class="built_in">stack</span>.push(node.left);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LeetCode - 94.Binary Tree Inorder Traversal<br>In-Order递归解法:  Time O(n)<br>(1) 如果二叉树为空，返回<br>(2) 如果二叉树不为空，中序遍历左子树，访问根节点,list.add(root.val), 中序遍历右子树  </p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public List<span class="tag">&lt;Integer&gt;</span> inorderTraversal(TreeNode root) &#123;</div><div class="line">	List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">	helper(list, root);</div><div class="line">	return list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void helper(List<span class="tag">&lt;Integer&gt;</span> list, TreeNode <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">	if(<span class="keyword">node</span> <span class="title">== null</span>) return;</div><div class="line">	helper(list, <span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">	list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">	helper(list,<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In-Order迭代解法:  Time O(n)<br>(1) 使用Stack, 先把每个需要存入的节点遍历所有左子节点，并全部存入<br>(2) 如果左子树为空，则从stack中输出一个节点，用list依次记录所有输出节点，以此节点向右访问一次右节点，然后重复（1）操作。<br>(3) 特别注意：这里有个tricky的地方，就是一开始是从root节点直接向左遍历，但当我从stack中输出的节点就不需要再向左遍历，所以需要创建两个新的节点，一个代表从stack输出的节点，一个代表向右找到的新节点。只有向右找到的新节点需要左遍历。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">if</span>(root == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">	<span class="built_in">Stack</span>&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="literal">new</span> <span class="built_in">Stack</span>&lt;&gt;();</div><div class="line">	<span class="built_in">stack</span>.push(root);</div><div class="line">	TreeNode node = root;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty()) &#123;</div><div class="line">			</div><div class="line">		<span class="keyword">while</span>(node.left!=<span class="built_in">null</span>) &#123;</div><div class="line">			<span class="built_in">stack</span>.push(node.left);</div><div class="line">			node = node.left;</div><div class="line">		&#125;</div><div class="line">		TreeNode addNode = <span class="built_in">stack</span>.pop();</div><div class="line">		<span class="built_in">list</span>.add(addNode.val);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(addNode.right!=<span class="built_in">null</span>) &#123;</div><div class="line">			<span class="built_in">stack</span>.push(addNode.right);</div><div class="line">			node = addNode.right;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LeetCode - 145.Binary Tree Postorder Traversal<br>Post-Order递归解法:  Time O(n)<br>(1) 如果二叉树为空，返回<br>(2) 如果二叉树不为空，后序遍历左子树，后序遍历右子树，访问根节点,list.add(root.val)</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public List<span class="tag">&lt;Integer&gt;</span> postorderTraversalRec(TreeNode root) &#123;</div><div class="line">	List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">	helper(list, root);</div><div class="line">	return list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void helper(List<span class="tag">&lt;Integer&gt;</span> list, TreeNode <span class="keyword">node</span><span class="title">) &#123;</span></div><div class="line">	if(<span class="keyword">node</span> <span class="title">== null</span>) return;</div><div class="line">	helper(list, <span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">	helper(list, <span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">	list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Post-Order迭代解法:<br>解法一：<br>(1) 使用双栈法，使用先序遍历的反向逆转<br>(2) 首先先序遍历是：<code>self, left, right</code>, 反向先序遍历为<code>self, right, left</code>, 在使用另一个stack逆转为<code>left, right, self</code> 即为后序遍历</p>
<p>解法二：<br>(1) 解法像pre-order,stack先压人root，然后压入右节点再压入左节点<br>(2) 有两种情况需要从stack中压出节点并添加到list中，一是左右节点为null，二是左右的节点都被访问过。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//Solution1: Two stack</div><div class="line">public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">	List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">	if(root == null) return list;</div><div class="line">	Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">	Stack<span class="tag">&lt;TreeNode&gt;</span> reverseStack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">	stack.push(root);</div><div class="line">	while(!stack.isEmpty()) &#123;</div><div class="line">		TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">		reverseStack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">		if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">		if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">	&#125;</div><div class="line">	while(!reverseStack.isEmpty()) &#123;</div><div class="line">		list.add(reverseStack.pop());</div><div class="line">	&#125;</div><div class="line">	return list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Solution2: </div><div class="line">public List<span class="tag">&lt;Integer&gt;</span> postorderTraversal(TreeNode root) &#123;</div><div class="line">	List<span class="tag">&lt;Integer&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</div><div class="line">	if(root == null) return list;</div><div class="line">	Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">	stack.push(root);</div><div class="line">	TreeNode prev = null;</div><div class="line">	while(!stack.isEmpty()) &#123;</div><div class="line">		TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.peek();</div><div class="line">		//<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null表明<span class="keyword">node</span><span class="title">为叶节点</span></div><div class="line">		//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">left</span> 表明左子树遍历完，右子树为空</div><div class="line">		//prev!=null &amp;&amp; <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span> 表明右子树遍历完</div><div class="line">		//prev!=<span class="keyword">node</span>.<span class="title">left</span>&amp;&amp;prev!=<span class="keyword">node</span>.<span class="title">right</span>表明stack已经连续输出节点到另一分支</div><div class="line">		if((<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null)||(prev!=null &amp;&amp; (prev == <span class="keyword">node</span>.<span class="title">left</span> || <span class="attr">prev=</span>=<span class="keyword">node</span>.<span class="title">right</span>))) &#123;</div><div class="line">			<span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">			list.add(<span class="keyword">node</span>.<span class="title">val</span>);</div><div class="line">			prev = <span class="keyword">node</span><span class="title">;</span></div><div class="line">		&#125;else &#123;</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">right</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">left</span>!=null) stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">	return list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.分层遍历二叉树（按层次从上往下，从左往右）: levelTraversal, levelTraversalRec（递归解法）</p>
<p>LeetCode - 102.Binary Tree Level Order Traversal </p>
<p>递归解法：<br>记录每层个数，用层数去比较大lists的size，如果size等于层数，则需要添加一个新的list用于记录当前层的nodes，如果size小于层数，则拿出lists中相对应层数的list去添加nodes.</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">	helper(lists, root,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> lists;</div><div class="line">&#125;</div><div class="line"><span class="literal">void</span> helper(<span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt;&gt; lists, TreeNode node, int level) &#123;</div><div class="line">	<span class="keyword">if</span>(node == <span class="built_in">null</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="comment">//add a new list to the new level of nodes</span></div><div class="line">	<span class="keyword">if</span>(lists.size() == level) lists.add(<span class="literal">new</span> ArrayList&lt;<span class="built_in">Integer</span>&gt;());</div><div class="line">	<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; temp = lists.get(level);</div><div class="line">	temp.add(node.val);</div><div class="line">	helper(lists, node.left,level+<span class="number">1</span>);</div><div class="line">	helper(lists, node.right,level+<span class="number">1</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法：<br>使用Queue实现BFS</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Traverse tree use BFS</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> levelTraversal(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	queue.<span class="built_in">add</span>(root);</div><div class="line">	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">size</span> = queue.<span class="built_in">size</span>();</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++) &#123;</div><div class="line">			TreeNode node = queue.poll();</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.left);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.将二叉查找树变为有序的双向链表: convertBST2DLLRec, convertBST2DLL</p>
<p>LeetCode - 114.Flatten Binary Tree to Linked List </p>
<p>递归解法：<br>(1) 如果二叉树为空，返回<br>(2) 如果二叉树不为空，后序遍历左子树，后序遍历右子树，访问根节点, 把根节点的左子树移到右边，左边致为null,把根节点的原右子树放到原左子树的最右边</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">	</div><div class="line">	flatten(root.<span class="built_in">left</span>);</div><div class="line">	flatten(root.<span class="built_in">right</span>);</div><div class="line">	</div><div class="line">	TreeNode <span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">	root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">	root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">	TreeNode cur = root;</div><div class="line">	<span class="keyword">while</span>(cur.<span class="built_in">right</span>!=<span class="literal">null</span>) cur = cur.<span class="built_in">right</span>;</div><div class="line">	cur.<span class="built_in">right</span> = <span class="built_in">right</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法： </p>
<ol>
<li>依次遍历右节点</li>
<li>每次把current node 的右子树放到左子树的最右边，然后把左子树放到右边之后，把左边致为null</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void flatten(TreeNode root) &#123;</div><div class="line">		<span class="keyword">if</span>(root == <span class="literal">null</span>) return;</div><div class="line">		<span class="keyword">while</span>(root!=<span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(root.<span class="built_in">left</span>==<span class="literal">null</span>)&#123;</div><div class="line">				root = root.<span class="built_in">right</span>;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			TreeNode <span class="built_in">left</span> = root.<span class="built_in">left</span>;</div><div class="line">			<span class="keyword">while</span>(<span class="built_in">left</span>.<span class="built_in">right</span>!=<span class="literal">null</span>) &#123;</div><div class="line">				<span class="built_in">left</span> = <span class="built_in">left</span>.<span class="built_in">right</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">left</span>.<span class="built_in">right</span> = root.<span class="built_in">right</span>;</div><div class="line">			root.<span class="built_in">right</span> = root.<span class="built_in">left</span>;</div><div class="line">			root.<span class="built_in">left</span> = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6.求二叉树第K层的节点个数：getNodeNumKthLevelRec, getNodeNumKthLevel<br>递归解法：即把问题分解的过程<br>(1) 如果current node为null 或者 k为0，返回0.<br>(2) 如果二叉树不为空且k为1，则返回1.<br>(3) 如果二叉树不为空且k&gt;1, 则返回 左子树+右子树 的个数.</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getNodeNumKthLevel</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span> || k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span>  getNodeNumKthLevel(root.left,k<span class="number">-1</span>) + getNodeNumKthLevel(root.right,k<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法： </p>
<ol>
<li>使用BFS, 用Queue去存储每一层节点</li>
<li>返回某层节点数，即size of Queue</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Traverse tree use BFS</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> getNodeNumKthLevel(TreeNode root, <span class="built_in">int</span> k) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	<span class="built_in">int</span> count = <span class="number">0</span>;</div><div class="line">	queue.<span class="built_in">add</span>(root);</div><div class="line">	<span class="built_in">int</span> result = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">size</span> = queue.<span class="built_in">size</span>();</div><div class="line">		<span class="keyword">if</span>(--k == <span class="number">0</span>)&#123;</div><div class="line">			result = <span class="built_in">size</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++) &#123;</div><div class="line">			TreeNode node = queue.poll();</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.left);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.<span class="built_in">add</span>(node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7.求二叉树中叶子节点的个数：getNodeNumLeafRec, getNodeNumLeaf<br>递归解法：即把问题分解的过程<br>(1) 如果二叉树为null，返回0<br>(2) 如果二叉树不为空且其左右子树均为null，则返回1. 叶子数 = 左子树叶子数 + 右子树叶子数</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> int getNodeNumLeafRec(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(root.right==<span class="literal">null</span> &amp;&amp; root.left==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span>  getNodeNumLeafRec(root.left) + getNodeNumLeafRec(root.right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法： </p>
<ol>
<li>使用BFS, 用Queue去存储每一层节点</li>
<li>判断每个node是否含有左子树和右子树，如果没有则 叶子数+1</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Traverse tree use BFS</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> getNodeNumKthLevel(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">	queue.add(root);</div><div class="line">	<span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">size</span> = queue.<span class="keyword">size</span>();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++) &#123;</div><div class="line">			TreeNode node = queue.poll();</div><div class="line">			<span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right==<span class="keyword">null</span>)<span class="keyword">count</span>++;</div><div class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.add(node.left);</div><div class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.add(node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>8.判断两棵二叉树是否相同的树：isSameRec, isSame</p>
<p>LeetCode - 100.Same Tree     </p>
<p>递归解法：<br>(1) 如果两个树都为空，返回true. 如果其中有一个节点为空或者两个节点的值不等，返回false.<br>(2) 递归遍历左子树和右子树，重复（1）</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> boolean isSameTree(TreeNode p, TreeNode q) &#123;</div><div class="line">	<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">if</span>(p.<span class="keyword">val</span>!=q.<span class="keyword">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">if</span>(p.<span class="keyword">val</span>==q.<span class="keyword">val</span>) <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;isSameTree(p.right,q.right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法： </p>
<ol>
<li>对两个树同时使用先序遍历</li>
<li>每次比较两个点</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isSameTree(TreeNode p, TreeNode q) &#123;		<span class="keyword">if</span>(p==<span class="keyword">null</span> &amp;&amp; q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span>(p==<span class="keyword">null</span> || q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Stack&lt;TreeNode&gt; s1 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">		Stack&lt;TreeNode&gt; s2 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">		s1.<span class="keyword">push</span>(p);</div><div class="line">		s2.<span class="keyword">push</span>(q);</div><div class="line">		<span class="keyword">while</span>(!s1.isEmpty() &amp;&amp; !s2.isEmpty()) &#123;</div><div class="line">			TreeNode node1 = s1.<span class="keyword">pop</span>();</div><div class="line">			TreeNode node2 = s2.<span class="keyword">pop</span>();</div><div class="line">			<span class="keyword">if</span>(node1==<span class="keyword">null</span> &amp;&amp; node2==<span class="keyword">null</span>) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span>(node1!=<span class="keyword">null</span> &amp;&amp; node2!=<span class="keyword">null</span> &amp;&amp; node1.val==node2.val) &#123;</div><div class="line">				s1.<span class="keyword">push</span>(node1.left);</div><div class="line">				s1.<span class="keyword">push</span>(node1.right);</div><div class="line">				s2.<span class="keyword">push</span>(node2.left);</div><div class="line">				s2.<span class="keyword">push</span>(node2.right);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>9.判断二叉树是不是平衡二叉树：isBalanced </p>
<p>LeetCode - 110.Balanced Binary Tree</p>
<p>递归解法1：O(NlogN)<br>遍历每个点，每次都比较其左子树和右子树的高度 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> boolean isBalanced(<span class="type">TreeNode</span> root) &#123;</div><div class="line">	<span class="keyword">if</span>(root==null) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="type">Math</span>.<span class="built_in">abs</span>(getDepth(root.<span class="keyword">left</span>)-getDepth(root.<span class="keyword">right</span>))&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> isBalanced(root.<span class="keyword">left</span>) &amp;&amp; isBalanced(root.<span class="keyword">right</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int getDepth(<span class="type">TreeNode</span> node) &#123;</div><div class="line">	<span class="keyword">if</span>(node==null) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="type">Math</span>.<span class="built_in">max</span>(getDepth(node.<span class="keyword">left</span>),getDepth(node.<span class="keyword">right</span>))+<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>递归解法2： </p>
<ol>
<li>自下而上，每次比较左子树和右子树，如果两边高度大于1，则返回-1。如果不是，则返回高度，供父节点使用。</li>
<li>如果有一边是-1，就直接向上，不用再求高度。</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;			<span class="keyword">if</span>(getDepth(root)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode node)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> leftDepth = getDepth(node.left);</div><div class="line">		<span class="keyword">if</span>(leftDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> rightDepth = getDepth(node.right);</div><div class="line">		<span class="keyword">if</span>(rightDepth==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> diff = Math.abs(leftDepth-rightDepth);</div><div class="line">		<span class="keyword">if</span>(diff&gt;<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> Math.max(leftDepth,rightDepth) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>10.求二叉树的镜像（破坏和不破坏原来的树两种情况）：<br>     mirrorRec, mirrorCopyRec<br>     mirror, mirrorCopy   </p>
<p>破坏原来的树<br>递归解法：<br>(1) 如果二叉树为空，返回null.<br>(2) 如果二叉树不为空, 无论有没有左右子树，交换他们的位置. 即自底向上依次调换所有左右子树位置。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="type">TreeNode</span> mirrorRec(<span class="type">TreeNode</span> root) &#123;</div><div class="line">	<span class="keyword">if</span>(root==null) <span class="keyword">return</span> null;</div><div class="line">	<span class="type">TreeNode</span> <span class="keyword">left</span> = mirrorRec(root.<span class="keyword">left</span>);</div><div class="line">	<span class="type">TreeNode</span> <span class="keyword">right</span> = mirrorRec(root.<span class="keyword">right</span>);</div><div class="line">	root.<span class="keyword">right</span> = <span class="keyword">left</span>;</div><div class="line">	root.<span class="keyword">left</span> = <span class="keyword">right</span>;</div><div class="line">	<span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法：<br>使用BFS,每次遍历一个点都交换它左右子树的位置 </p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public TreeNode mirror(TreeNode root) &#123;</div><div class="line">	if(root == null) return null;</div><div class="line">	Queue<span class="tag">&lt;TreeNode&gt;</span> queue = new LinkedList<span class="tag">&lt;&gt;</span>();</div><div class="line">	queue.add(root);</div><div class="line">	while(!queue.isEmpty()) &#123;</div><div class="line">		TreeNode <span class="keyword">node</span> <span class="title">= queue</span>.poll();</div><div class="line">		if(<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null) continue;</div><div class="line">		TreeNode left = <span class="keyword">node</span>.<span class="title">left</span>;</div><div class="line">		<span class="keyword">node</span>.<span class="title">left</span> = <span class="keyword">node</span>.<span class="title">right</span>;</div><div class="line">		<span class="keyword">node</span>.<span class="title">right</span> = left;</div><div class="line">		if(<span class="keyword">node</span>.<span class="title">left</span>!=null) queue.add(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">		if(<span class="keyword">node</span>.<span class="title">right</span>!=null) queue.add(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	return root;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不破坏原来的树<br>递归解法：<br>(1) 如果二叉树为空，返回null.<br>(2) 如果二叉树不为空, 使用先序遍历，首先创建新的节点，然后左右颠倒构造新的二叉树</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode mirrorCopyRec(TreeNode root) &#123;</div><div class="line">	<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;	</div><div class="line">	TreeNode newRoot = new TreeNode(root.<span class="keyword">val</span>);</div><div class="line">	newRoot.left = mirrorRec(root.right);</div><div class="line">	newRoot.right = mirrorRec(root.left);</div><div class="line">	<span class="keyword">return</span> newRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法：<br>使用Pre-Order, 保持两个stack，使新创建的点与原来的树保持一一对应. </p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public TreeNode mirror(TreeNode root) &#123;</div><div class="line">	if(root == null) return null;</div><div class="line">	Stack<span class="tag">&lt;TreeNode&gt;</span> stack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">	Stack<span class="tag">&lt;TreeNode&gt;</span> newStack = new Stack<span class="tag">&lt;&gt;</span>();</div><div class="line">	stack.push(root);</div><div class="line">	TreeNode newRoot = new TreeNode(root.val);</div><div class="line">	newStack.push(newRoot);</div><div class="line">	while(!queue.isEmpty()) &#123;</div><div class="line">		TreeNode <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">		TreeNode newNode = newStack.pop();</div><div class="line">		if(<span class="keyword">node</span>.<span class="title">left</span>!=null) &#123;</div><div class="line">			stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			newNode.rihgt = newTreeNode(<span class="keyword">node</span>.<span class="title">left</span>.val);</div><div class="line">			stack.push(newNode.right);</div><div class="line">		&#125; </div><div class="line">		if(<span class="keyword">node</span>.<span class="title">right</span>!=null) &#123;</div><div class="line">			stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">			newNode.left = newTreeNode(<span class="keyword">node</span>.<span class="title">right</span>.val);</div><div class="line">			stack.push(newNode.left);</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">	return newRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>10.1 判断两个树是否互相镜像：isMirrorRec isMirror</p>
<p>递归解法：<br>(1) 如果两个二叉树都为空，返回true.<br>(2) 如果只有其中一个二叉树为空，返回false.<br>(3) 若果两个节点的val不相等，返回false.<br>(4) 比较一个树的左子树和另个树的右子树，以及一个树的右子树和另个树的左子树.</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> boolean isMirrorRec(TreeNode p, TreeNode q) &#123;</div><div class="line">	<span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>; </div><div class="line">	<span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">if</span>(p.<span class="keyword">val</span> != q.<span class="keyword">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> isMirrorRec(p.left,q.right) &amp;&amp; isMirrorRec(p.right,q.left);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法：<br>使用Pre-Order,每次遍历交叉树的值</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isMirror(TreeNode p, TreeNode q) &#123;</div><div class="line">	<span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">if</span>(p == <span class="keyword">null</span> || q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">	Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">	stack1.<span class="keyword">push</span>(p);</div><div class="line">	stack2.<span class="keyword">push</span>(q);</div><div class="line">	<span class="keyword">while</span>(!p.isEmpty()&amp;&amp;!q.isEmpty()) &#123;</div><div class="line">		TreeNode node1 = stack1.<span class="keyword">pop</span>();</div><div class="line">		TreeNode node2 = stack2.<span class="keyword">pop</span>();</div><div class="line">		<span class="keyword">if</span>(node1.val != node.val) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>((node1.left==<span class="keyword">null</span>&amp;&amp;node2.rihgt!=<span class="keyword">null</span>)||(node1.left!=<span class="keyword">null</span>&amp;&amp;node2.rihgt==<span class="keyword">null</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(node1.left!=<span class="keyword">null</span> &amp;&amp; node2.right!=<span class="keyword">null</span>) &#123;</div><div class="line">			stack1.<span class="keyword">push</span>(node1.left);</div><div class="line">			stack2.<span class="keyword">push</span>(node2.right);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span>((node1.rihgt==<span class="keyword">null</span>&amp;&amp;node2.left!=<span class="keyword">null</span>)||(node1.right!=<span class="keyword">null</span>&amp;&amp;node2.left==<span class="keyword">null</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(node1.rihgt!=<span class="keyword">null</span> &amp;&amp; node2.left!=<span class="keyword">null</span>) &#123;</div><div class="line">			stack1.<span class="keyword">push</span>(node1.right);</div><div class="line">			stack2.<span class="keyword">push</span>(node2.left);</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>11.求二叉树中两个节点的最低公共祖先节点：<br>       getLastCommonParent    求解最小公共祖先, 使用list来存储path.<br>       getLastCommonParentRec     递归算法 .      </p>
<p>LeetCode - 236.Lowest Common Ancestor of a Binary Tree    </p>
<p>递归解法：<br>(1) 如果从根节点出发，分别从左右两边找到两个节点，则LastCommonParrent是根节点<br>(2) 如果从根节点的左子树出发，找到两节点，则LastCommonParrent在左子树<br>(3) 如果从根节点的右子树出发，找到两节点，则LastCommonParrent在右子树</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//Solution1:</span></div><div class="line">	<span class="keyword">public</span> TreeNode getLastCommonParentRec(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">		<span class="keyword">if</span>(findNode(root.left,p)) &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.left,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.left,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span>(findNode(root.right,q)) &#123;</div><div class="line">				<span class="keyword">return</span> getLastCommonParentRec(root.right,p,q);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> root;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean findNode(TreeNode root, TreeNode node) &#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="literal">null</span> || node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(root==node) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		</div><div class="line">		boolean found = findNode(root.left,node);</div><div class="line">		<span class="keyword">if</span>(!found) &#123;</div><div class="line">			found = findNode(root.right,node);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> found;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Solution2:</span></div><div class="line"><span class="keyword">public</span> TreeNode getLastCommonParentRec(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">	<span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">	<span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</div><div class="line">	TreeNode commonLeft = getLastCommonParentRec(root.left,p,q);</div><div class="line">	TreeNode commonRight = getLastCommonParentRec(root.right,p,q);</div><div class="line">	<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span> &amp;&amp; commonRight!=<span class="literal">null</span>) <span class="keyword">return</span> root;</div><div class="line">	<span class="keyword">if</span>(commonLeft!=<span class="literal">null</span>) <span class="keyword">return</span> commonLeft;</div><div class="line">	<span class="keyword">return</span> commonRight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代解法： </p>
<ol>
<li>分别从根节点出发，查找到达两个节点的路径，用list保存</li>
<li>然后同时比较两个list中的点，找出最后相同的两个点（两个list前面的点都相同）</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> TreeNode getLastCommonParentRec(TreeNode root, TreeNode p, TreeNode q) &#123;</div><div class="line">	ArrayList&lt;TreeNode&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	ArrayList&lt;TreeNode&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="built_in">boolean</span> found1 = findPath(root,p,list1);</div><div class="line">	<span class="built_in">boolean</span> found2 = findPath(root,q,list2);</div><div class="line">	<span class="keyword">if</span>(!found1 || !found2) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	TreeNode result = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;Math.<span class="built_in">min</span>(list1.<span class="built_in">size</span>(),list2.<span class="built_in">size</span>());i++) &#123;</div><div class="line">		<span class="keyword">if</span>(list1.<span class="built_in">get</span>(i)==list2.<span class="built_in">get</span>(i))&#123;</div><div class="line">			result = list1.<span class="built_in">get</span>(i);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">boolean</span> findPath(TreeNode root, TreeNode node, ArrayList&lt;TreeNode&gt; list) &#123;</div><div class="line">	<span class="keyword">if</span>(root==<span class="keyword">null</span> || node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	list.<span class="built_in">add</span>(root);</div><div class="line">	<span class="keyword">if</span>(root == node) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	<span class="built_in">boolean</span> found = findPath(root.left,node,list);</div><div class="line">	<span class="keyword">if</span>(!found) &#123;</div><div class="line">		found = findPath(root.right,node,list);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(!found) list.remove(root);</div><div class="line">	<span class="keyword">return</span> found;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>12.求二叉树中节点的最大距离：getMaxDistanceRec     </p>
<p>递归法：<br>(1)求最大距离有两种情况：一是两个最大深度相加，它分别位于根节点的两侧；一是某个子节点下两个分支距离的和最大<br>(2)创建一个类去记录最大距离和最大深度，每次记录每个点的深度，以及最长距离</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxDistanceRec</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">	Distance dis = getDistance(root);</div><div class="line">	<span class="keyword">return</span> dis.maxDistance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Distance <span class="title">getDistance</span>(<span class="params">TreeNode node</span>) </span>&#123;</div><div class="line">	<span class="comment">//最底一层，深度为0</span></div><div class="line">	<span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</div><div class="line">		Distance empty = <span class="keyword">new</span> Distance(<span class="number">0</span>,<span class="number">-1</span>);</div><div class="line">		<span class="keyword">return</span> empty;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	Distance left = getDistance(node.left);</div><div class="line">	Distance right = getDistance(node.right);</div><div class="line">	</div><div class="line">	Distance dis = <span class="keyword">new</span> Distance();</div><div class="line">	dis.maxDepth = Math.max(left.maxDepth,right.maxDepth)+<span class="number">1</span>;</div><div class="line">	dis.maxDistance = Math.max(left.maxDepth+right.maxDepth+<span class="number">2</span>,Math.max(left.maxDistance,right.maxDistance));</div><div class="line">	<span class="keyword">return</span> dis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Distance</span> &#123;</div><div class="line">	<span class="keyword">int</span> maxDistance;</div><div class="line">	<span class="keyword">int</span> maxDepth;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Distance</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Distance</span>(<span class="params"><span class="keyword">int</span> maxDistance,<span class="keyword">int</span> maxDepth</span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.maxDistance = maxDistance;</div><div class="line">		<span class="keyword">this</span>.maxDepth = maxDepth;</div><div class="line">	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>13.由前序遍历序列和中序遍历序列重建二叉树：rebuildBinaryTreeRec</p>
<p>LeetCode - 105. Construct Binary Tree from Preorder and Inorder Traversal     </p>
<p>递归解法：</p>
<ol>
<li>由前序遍历可以知道第一个点是root，接下来几个点是左子树的点，之后几个是右子树的点, 特点是大体排列次序按照每个树的根节点顺序排列。</li>
<li>由中序遍历可以知道root点左边的都是左子树的点，右边都是右子树的点.可以得出左子树和右子树节点数</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function">TreeNode <span class="title">rebuildBinaryTreeRec</span><span class="params">(<span class="keyword">int</span>[]preorder,<span class="keyword">int</span>[]inorder)</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">return</span> <span class="title">buildTree</span><span class="params">(preorder,<span class="number">0</span>,preorder.length<span class="number">-1</span>,inorder,<span class="number">0</span>,inorder.length<span class="number">-1</span>)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[]preorder,<span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[]inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> rootVal = preorder[preStart];</div><div class="line">	<span class="keyword">int</span> inRoot=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=inStart,j=inEnd; i&lt;=j; i++,j--) &#123;</div><div class="line">		<span class="keyword">if</span>(inorder[i] == rootVal) &#123;</div><div class="line">			inRoot = i;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(inorder[j] == rootVal)</span></span>&#123;</div><div class="line">			inRoot = j;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">	TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</div><div class="line">	root.left = buildTree(preorder,preStart+<span class="number">1</span>,preStart+(inRoot-inStart), inorder,inStart,inRoot<span class="number">-1</span>);</div><div class="line">	root.right = buildTree(preorder,preEnd-(inEnd-inRoot)+<span class="number">1</span>,preEnd,inorder,inRoot+<span class="number">1</span>,inEnd);</div><div class="line">	<span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>14.判断二叉树是不是完全二叉树：isCompleteBinaryTree, isCompleteBinaryTreeRec</p>
<p>迭代解法：<br>(1)使用BFS遍历节点，每层节点中，如果遇到左右子树为空时，或者遇到的第一个左子树不为空但右子树为空的情况，则后面所有的左右子树必须为空。即为完全二叉树。<br>(2)设立一个标志，如果有个节点的左右子树为空，则之后所有节点的子树必须为空。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public boolean isCompleteBinaryTree(TreeNode root) &#123;</div><div class="line">	if(root == null) return <span class="literal">false</span>;</div><div class="line">	Queue<span class="tag">&lt;TreeNode&gt;</span> queue = new Queue<span class="tag">&lt;&gt;</span>();</div><div class="line">	queue.add(root);</div><div class="line">	boolean flag = <span class="literal">true</span>;</div><div class="line">	while(!queue.isEmpty()) &#123;</div><div class="line">		TreeNode <span class="keyword">node</span> <span class="title">= queue</span>.poll();</div><div class="line">		if(flag) &#123;</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null) flag = <span class="literal">false</span>;</div><div class="line">			else if(<span class="keyword">node</span>.<span class="title">left</span>==null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>!=null) return <span class="literal">false</span>;</div><div class="line">			else if(<span class="keyword">node</span>.<span class="title">left</span>!=null &amp;&amp; <span class="keyword">node</span>.<span class="title">right</span>==null) &#123;</div><div class="line">				flag = <span class="literal">false</span>;</div><div class="line">				queue.add(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">			&#125;else &#123;</div><div class="line">				queue.add(<span class="keyword">node</span>.<span class="title">left</span>);</div><div class="line">				queue.add(<span class="keyword">node</span>.<span class="title">right</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;else &#123;</div><div class="line">			if(<span class="keyword">node</span>.<span class="title">left</span>!=null || <span class="keyword">node</span>.<span class="title">right</span>!=null) return <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return <span class="literal">true</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>15.找出二叉树中最长连续子串(即全部往左的连续节点，或是全部往右的连续节点）findLongest</p>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="When-to-use-Pre-Order-In-Order-Post-Order"><a href="#When-to-use-Pre-Order-In-Order-Post-Order" class="headerlink" title="When to use Pre-Order, In-Order, Post-Order"></a>When to use Pre-Order, In-Order, Post-Order</h3><ul>
<li>Pre-Order: Recursively, this is <code>self, left, right</code>. From root node to right most node. Firstly, if you know you need to explore the roots before inspecting any leaves, you should pick pre-order because you will encounter all the roots before all of the leaves.  Secondly, if you want to simply print out the hierachical format of the tree in a linear format, use preorder traversal.</li>
</ul>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> Root</span></div><div class="line">    -<span class="ruby"> A</span></div><div class="line">    	-<span class="ruby"> B</span></div><div class="line">    	-<span class="ruby"> C</span></div><div class="line">    -<span class="ruby"> D</span></div><div class="line">    	-<span class="ruby"> E</span></div><div class="line">    	-<span class="ruby"> F</span></div><div class="line">    		-<span class="ruby">G</span></div></pre></td></tr></table></figure>
<ul>
<li>Post-Order: Recursively, this is<code>left, right, self</code>. From left most node to right most node.  If you know you need to explore all the leaves before any nodes, you should pick post-order because you don’t waster any time inspecting roots in search for leaves. 或者应用在：树的删除。为了释放树结构的内存，某节点在被释放以前，其左右子树的节点首先应当被释放掉。</li>
<li>In-Order: Recursively, this is<code>left, self, right</code>. From left most node to right most node. If you know that the tree has an inherent sequence, and you want to flatten the tree back into the original sequence(simply process the items in the defined order).  </li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">For example, you have <span class="keyword">a</span> BST <span class="keyword">of</span> <span class="keyword">a</span> list <span class="keyword">of</span> <span class="built_in">number</span>, inorder traversal would print them out <span class="keyword">in</span> <span class="keyword">ascending</span> order.</div><div class="line"></div><div class="line">	+</div><div class="line">  /	  \ </div><div class="line"> A     * </div><div class="line">	  /  \</div><div class="line">	 B    C</div><div class="line"></div><div class="line">Output: A + B * C</div><div class="line"></div><div class="line">If you want <span class="built_in">to</span> evaluate <span class="keyword">the</span> expression, you traverse <span class="keyword">the</span> tree <span class="keyword">in</span> postorder, applying <span class="keyword">each</span> operator <span class="built_in">to</span> <span class="keyword">the</span> values <span class="built_in">from</span> <span class="keyword">each</span> <span class="keyword">of</span> its sub-trees.</div></pre></td></tr></table></figure>
<h3 id="When-to-use-BFS-and-DFS-the-relationship-between-DFS-and-PreOrder"><a href="#When-to-use-BFS-and-DFS-the-relationship-between-DFS-and-PreOrder" class="headerlink" title="When to use BFS and DFS, the relationship between DFS and PreOrder"></a>When to use BFS and DFS, the relationship between DFS and PreOrder</h3><p>DFS 包括: </p>
<ol>
<li>Pre-Order, In-Order, Post-Order</li>
<li>Divide &amp; Conquer</li>
</ol>
<p>Notice：<br>Sometimes it is easy to figure out question using Recursion.  So interviewer wants you to use Iterative solution.  因为这里，递归的方法和变量都是存储在Stack中的，现在就是想考验你去实现栈的内部工作原理，使用iteration 都需要去借助一个数据结构来完成recursion的方法。</p>
<p>DFS Template:</p>
<p>1.Recursively Traverse</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(roo==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">	</div><div class="line">	traversal(root.left);</div><div class="line">	</div><div class="line">	traversal(root.right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.Divide &amp; Conquer</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="type">ResultType</span> traversal(<span class="type">TreeNode</span> root) &#123;</div><div class="line">	<span class="keyword">if</span>(root==null) &#123;</div><div class="line">		<span class="keyword">return</span> null;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//Divide</span></div><div class="line">	<span class="type">ResultType</span> <span class="keyword">left</span> = traversal(root.<span class="keyword">left</span>);</div><div class="line">	<span class="type">ResultType</span> <span class="keyword">right</span> = traversal(root.<span class="keyword">right</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//Conquer</span></div><div class="line">	<span class="type">ResultType</span> result = <span class="type">Merge</span> from <span class="keyword">left</span> to <span class="keyword">right</span></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="How-to-think-over-Divide-amp-Conquer"><a href="#How-to-think-over-Divide-amp-Conquer" class="headerlink" title="How to think over Divide&amp;Conquer"></a>How to think over Divide&amp;Conquer</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum III - Data structure design]]></title>
      <url>http://xinli90.com/2016/08/19/Two-Sum-III-Data-structure-design/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/two-sum-iii-data-structure-design/" target="_blank" rel="external">Leetcode-Two Sum III - Data structure design</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design and implement a TwoSum class. It should support the following operations: add and find.</p>
<p>add - Add the number to an internal data structure.<br>find - Find if there exists any pair of numbers which sum is equal to the value.</p>
<p>For example,</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">1</span>); add(<span class="number">3</span>); add(<span class="number">5</span>);</div><div class="line">find<span class="function"><span class="params">(<span class="number">4</span>)</span> -&gt;</span> <span class="literal">true</span></div><div class="line">find<span class="function"><span class="params">(<span class="number">7</span>)</span> -&gt;</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n), space complexity is O(n)</li>
<li>Store number and its frequency into HashMap</li>
<li>If target-number==number and frequency is less than 2, then we should continue to search through map.containsKey(target-key).</li>
<li>But time limit exceeded.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(n^2), space complexity is O(n)</li>
<li>Brute solution but time limit exceeded.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Time complexity is O(nlogn), space complexity is O(n)</li>
<li>Sort the list and then keep two pointers move from head and tail respectively to combine and compare.</li>
<li>But time limit exceeded.</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><ol>
<li>Time complexity is O(n), space complexity is O(n)</li>
<li>Using ArrayList add and remove, Still time limit exceeded.</li>
</ol>
<h4 id="Solution5"><a href="#Solution5" class="headerlink" title="Solution5"></a>Solution5</h4><ol>
<li>Time complexity is O(n), space complexity is O(n)</li>
<li>Using ArrayList and HashMap instead of iterating hashmap. Beats 99%. Done!</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TwoSum &#123;</div><div class="line">    <span class="keyword">private</span> HashMap&lt;Integer,Integer&gt; <span class="built_in">map</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoSum</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Add the number to an internal data structure.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">	    <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(number))&#123;</div><div class="line">	        <span class="keyword">int</span> count = <span class="built_in">map</span>.get(number);</div><div class="line">	        <span class="built_in">map</span>.put(number,count+<span class="number">1</span>);</div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	        <span class="built_in">map</span>.put(number,<span class="number">1</span>);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find if there exists any pair of numbers which sum is equal to the value.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">	    Iterator&lt;Integer&gt; it = <span class="built_in">map</span>.keySet().iterator();</div><div class="line">	    <span class="keyword">while</span>(it.hasNext()) &#123;</div><div class="line">	        <span class="keyword">int</span> num = it.next();</div><div class="line">	        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(value-num)) &#123;</div><div class="line">	            <span class="keyword">if</span>((value == num*<span class="number">2</span>) &amp;&amp; (<span class="built_in">map</span>.get(num) == <span class="number">1</span>)) <span class="keyword">continue</span>;</div><div class="line">	            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TwoSum &#123;</div><div class="line">    List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">// Add the number to an internal data structure.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">	    <span class="built_in">list</span>.add(number);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find if there exists any pair of numbers which sum is equal to the value.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>.size()<span class="number">-1</span>; i++) &#123;</div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">list</span>.size(); j++) &#123;</div><div class="line">	            <span class="keyword">if</span>(value==<span class="built_in">list</span>.get(i)+<span class="built_in">list</span>.get(j))<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution3</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TwoSum &#123;</div><div class="line">    List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">// Add the number to an internal data structure.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">	    <span class="built_in">list</span>.add(number);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find if there exists any pair of numbers which sum is equal to the value.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">	    Collections.sort(<span class="built_in">list</span>);</div><div class="line">	    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="built_in">list</span>.size()<span class="number">-1</span>;</div><div class="line">	    <span class="keyword">while</span>(left&lt;right)&#123;</div><div class="line">	        <span class="keyword">if</span>(value == <span class="built_in">list</span>.get(left)+<span class="built_in">list</span>.get(right)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	        <span class="keyword">else</span> <span class="keyword">if</span>(value &gt; <span class="built_in">list</span>.get(left)+<span class="built_in">list</span>.get(right)) left++;</div><div class="line">	        <span class="keyword">else</span> right--;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution4</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TwoSum &#123;</div><div class="line">    ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;();</span></div><div class="line">    <span class="comment">// Add the number to an internal data structure.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">	    <span class="built_in">list</span>.add(number);</div><div class="line">	   </div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find if there exists any pair of numbers which sum is equal to the value.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>.size() ; i++) &#123;</div><div class="line">	        <span class="keyword">int</span> num = <span class="built_in">list</span>.get(i);</div><div class="line">	        <span class="built_in">list</span>.remove(i);</div><div class="line">	        <span class="keyword">if</span>(<span class="built_in">list</span>.contains(Integer.valueOf(value-num))) &#123;</div><div class="line">	            <span class="built_in">list</span>.add(i,num);</div><div class="line">	            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	        &#125;</div><div class="line">	        <span class="built_in">list</span>.add(i,num);</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution5:</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TwoSum &#123;</div><div class="line">    ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    HashMap&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">    <span class="comment">// Add the number to an internal data structure.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">	    <span class="built_in">list</span>.add(number);</div><div class="line">	    <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(number))&#123;</div><div class="line">	        <span class="keyword">int</span> count = <span class="built_in">map</span>.get(number);</div><div class="line">	        <span class="built_in">map</span>.put(number,count+<span class="number">1</span>);</div><div class="line">	    &#125;<span class="keyword">else</span>&#123;</div><div class="line">	        <span class="built_in">map</span>.put(number,<span class="number">1</span>);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find if there exists any pair of numbers which sum is equal to the value.</span></div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>.size() ; i++) &#123;</div><div class="line">	        <span class="keyword">int</span> num = <span class="built_in">list</span>.get(i);</div><div class="line">	        <span class="keyword">int</span> another = value-num;</div><div class="line">	        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(another)) &#123;</div><div class="line">	            <span class="keyword">if</span>((another == num) &amp;&amp; (<span class="built_in">map</span>.get(num) == <span class="number">1</span>)) <span class="keyword">continue</span>;</div><div class="line">	            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Your TwoSum object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// TwoSum twoSum = new TwoSum();</span></div><div class="line"><span class="comment">// twoSum.add(number);</span></div><div class="line"><span class="comment">// twoSum.find(value);</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum II - Input array is sorted]]></title>
      <url>http://xinli90.com/2016/08/18/Two-Sum-II-Input-array-is-sorted/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="external">Leetcode-Two Sum II - Input array is sorted</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.        </p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.        </p>
<p>You may assume that each input would have exactly one solution.      </p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: <span class="attr">numbers=&#123;2,</span> <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;, <span class="attr">target=9</span>      </div><div class="line">Output: <span class="attr">index1=1,</span> <span class="attr">index2=2</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-and-2"><a href="#Solution1-and-2" class="headerlink" title="Solution1 and 2"></a>Solution1 and 2</h4><p>Based on <code>Two Sum</code> solution, and add pruning solution.</p>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Keep two pointers. One moves from head and another moves from tail.</li>
<li>If the sum of two values is greater than target, move second pointer to the left.</li>
<li>If the sum of two values is less than target, move first pointer to the right.</li>
<li>Until we find the right one.</li>
<li>Time complexity is O(n), space complexity is O(1).</li>
</ol>
<h4 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h4><ol>
<li>For each left pointer,  Use Binary Seach to find the right pointer.</li>
<li>Time complexity is O(nlogn), space complexity is O(1).</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</div><div class="line">		<span class="built_in">int</span> size = nums.length;</div><div class="line">		<span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;size<span class="number">-1</span>; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(numbers[i] &gt; target) break;</div><div class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> j=i+<span class="number">1</span>; j&lt;size; j++) &#123;</div><div class="line">				<span class="keyword">if</span>(numbers[i]+numbers[j] &gt; target)break;</div><div class="line">				<span class="keyword">if</span>(target == nums[i] + nums[j])&#123;</div><div class="line">					result[<span class="number">0</span>] = i;</div><div class="line">					result[<span class="number">1</span>] = j;</div><div class="line">					return result;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</div><div class="line">		<span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = nums.length<span class="number">-1</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">left</span>&lt;<span class="built_in">right</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(nums[<span class="built_in">left</span>]+nums[<span class="built_in">right</span>] == target) return <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="built_in">left</span>+<span class="number">1</span>, <span class="built_in">right</span>+<span class="number">1</span>&#125;;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="built_in">left</span>]+nums[<span class="built_in">right</span>] &lt; target)&#123;</div><div class="line">				<span class="built_in">left</span>++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="built_in">right</span>--;</div><div class="line">		&#125;</div><div class="line">		return <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution4 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</div><div class="line">		<span class="built_in">int</span> size = nums.length;</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;size<span class="number">-1</span>; i++) &#123;</div><div class="line">			<span class="built_in">int</span> <span class="built_in">left</span> = i+<span class="number">1</span>, <span class="built_in">right</span> = size - <span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span>(<span class="built_in">left</span>&lt;=<span class="built_in">right</span>) &#123;</div><div class="line">				<span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">left</span> + (<span class="built_in">right</span>-<span class="built_in">left</span>)/<span class="number">2</span>;</div><div class="line">				<span class="keyword">if</span>(nums[<span class="built_in">mid</span>] == target-nums[i]) return <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;i+<span class="number">1</span>,<span class="built_in">mid</span>+<span class="number">1</span>&#125;;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="built_in">mid</span>] &lt; target-nums[i]) <span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">				<span class="keyword">else</span> <span class="built_in">right</span> = <span class="built_in">mid</span><span class="number">-1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum]]></title>
      <url>http://xinli90.com/2016/08/17/Two-Sum/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Leetcode-Two Sum</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</div><div class="line"></div><div class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</div><div class="line">return [<span class="number">0</span>, <span class="number">1</span>].</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n^2), space complexity is O(1)</li>
<li>Loop this array and find the right pair.</li>
<li>Note: we cannot change the original order.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Time complexity is O(n), space complexity is O(n)</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = nums.length;</div><div class="line">		<span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span><span class="number">-1</span>; i++) &#123;</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">size</span>; j++) &#123;</div><div class="line">				<span class="built_in">if</span>(target == nums[i] + nums[j])&#123;</div><div class="line">					result[<span class="number">0</span>] = i;</div><div class="line">					result[<span class="number">1</span>] = j;</div><div class="line">					<span class="built_in">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> result;</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">		HashMap&lt;Integer,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</div><div class="line">			<span class="built_in">if</span>(<span class="built_in">map</span>.containsKey(target-nums[i])) &#123;</div><div class="line">				<span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="built_in">map</span>.<span class="built_in">get</span>(target-nums[i]),i&#125;;</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				<span class="built_in">map</span>.<span class="built_in">put</span>(nums[i],i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Count Primes]]></title>
      <url>http://xinli90.com/2016/08/17/Count-Primes/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/count-primes/" target="_blank" rel="external">Leetcode-Count Primes</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Count the number of prime numbers less than a non-negative number, n.       </p>
<p>Hint:</p>
<p>Let’s start with a isPrime function. To determine if a number is prime, we need to check if it is not divisible by any number less than n. The runtime complexity of isPrime function would be O(n) and hence counting the total prime numbers up to n would be O(n2). Could we do better?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Based on the hint, we can provide the solution with product.</li>
<li>Time complexity is still O(n^2), but it is much simple.</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>For the solution1, there are some duplicate operation. In order to avoid duplicate operation, we need prune it.</li>
<li>The prime number only happen in odd number. So we don’t have to check all numbers.</li>
<li>It is fastest.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> countPrimes(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n ;i++) &#123;</div><div class="line">			<span class="keyword">if</span>(isPrime[i] == <span class="keyword">false</span>)&#123;</div><div class="line">				<span class="keyword">count</span>++;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j*i&lt;n; j++) &#123;</div><div class="line">					isPrime[j*i] = <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> countPrimes(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</div><div class="line">		<span class="keyword">int</span> <span class="keyword">count</span> = n/<span class="number">2</span>;</div><div class="line">		<span class="comment">//i*i&lt;n so that integer doesn't exceed the limitation</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i*i &lt; n ; i += <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(isPrime[i]) <span class="keyword">continue</span>;</div><div class="line">			<span class="comment">//make sure j is odd(odd+even)</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i*i; j&lt;n; j += <span class="number">2</span>*i) &#123;</div><div class="line">				<span class="keyword">if</span>(!isPrime[j])&#123;</div><div class="line">					<span class="keyword">count</span>--;</div><div class="line">					isPrime[j] = <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Group Anagrams]]></title>
      <url>http://xinli90.com/2016/08/17/Group-Anagrams/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/anagrams/" target="_blank" rel="external">Leetcode-Group Anagrams</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of strings, group anagrams together.</p>
<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="string">"ate"</span>, <span class="string">"eat"</span>,<span class="string">"tea"</span>],</div><div class="line">  [<span class="string">"nat"</span>,<span class="string">"tan"</span>],</div><div class="line">  [<span class="string">"bat"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Note: All inputs will be in lower-case.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Sort each string and reorder it with natural ordering.</li>
<li>Store the sorted string and the list of original string into HashMap. The ordered string as the key and List which includes original strings as the value.</li>
<li>return List&lt;&gt;(map.values());</li>
<li>Time complexity is O(n<em>k</em>logk), space complexity is O(n).</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>We use List<list<string>&gt; and HashMap<string,integer> instead of HashMap<string, list<string="">&gt;.</string,></string,integer></list<string></li>
<li>Store the index of list into hashmap.  It will be faster.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>The data structure is List<list<string>&gt; and HashMap<integer,integer></integer,integer></list<string></li>
<li>The key of HashMap is the product of prime number which represent each charactor. The product is unique.     </li>
<li>It is fastest.</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; groupAnagrams(<span class="keyword">String</span>[] strs) &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span> : strs) &#123;</div><div class="line">            <span class="keyword">String</span> keyString = sortString(<span class="built_in">str</span>);</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(keyString))&#123;</div><div class="line">                <span class="built_in">map</span>.<span class="built_in">get</span>(keyString).<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                list.<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">                <span class="built_in">map</span>.put(keyString,list);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="built_in">map</span>.values());</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> sortString(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</div><div class="line">        <span class="built_in">char</span>[] arr = <span class="built_in">str</span>.toCharArray();</div><div class="line">        Arrays.<span class="built_in">sort</span>(arr);</div><div class="line">        </div><div class="line">        <span class="comment">//Solution1: StringBuilder</span></div><div class="line">        <span class="comment">//StringBuilder sb = new StringBuilder();</span></div><div class="line">        <span class="comment">//for(char c : arr) &#123;</span></div><div class="line">        <span class="comment">//	sb.append(c);</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">        <span class="comment">//return sb.toString();</span></div><div class="line">        </div><div class="line">        <span class="comment">//Solution2: valueOf()</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">String</span>.valueOf(arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; groupAnagrams(<span class="keyword">String</span>[] strs) &#123;</div><div class="line">		List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length==<span class="number">0</span>) <span class="keyword">return</span> lists;</div><div class="line">		<span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span> : strs) &#123;</div><div class="line">			<span class="keyword">String</span> keyString = sortString(<span class="built_in">str</span>);</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(keyString))&#123;</div><div class="line">        		lists.<span class="built_in">get</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(keyString)).<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">        	&#125; <span class="keyword">else</span> &#123;</div><div class="line">        		List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        		list.<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">        		<span class="built_in">map</span>.put(keyString,lists.<span class="built_in">size</span>());</div><div class="line">        		lists.<span class="built_in">add</span>(list);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> sortString(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</div><div class="line">    	<span class="built_in">char</span>[] arr = <span class="built_in">str</span>.toCharArray();</div><div class="line">    	Arrays.<span class="built_in">sort</span>(arr);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">String</span>.valueOf(arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Solution3 &#123;</div><div class="line">	<span class="keyword">public</span> List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; groupAnagrams(<span class="keyword">String</span>[] strs) &#123;</div><div class="line">		List&lt;List&lt;<span class="keyword">String</span>&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length==<span class="number">0</span>) <span class="keyword">return</span> lists;</div><div class="line">		<span class="keyword">HashMap</span>&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">		<span class="built_in">int</span>[] prime = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>&#125;; <span class="comment">//26 primes</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span> : strs) &#123;</div><div class="line">			<span class="built_in">int</span> <span class="built_in">key</span> = convertToProduct(<span class="built_in">str</span>,prime);</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(<span class="built_in">key</span>))&#123;</div><div class="line">        		lists.<span class="built_in">get</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>).<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">        	&#125; <span class="keyword">else</span> &#123;</div><div class="line">        		List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        		list.<span class="built_in">add</span>(<span class="built_in">str</span>);</div><div class="line">        		<span class="built_in">map</span>.put(<span class="built_in">key</span>,lists.<span class="built_in">size</span>());</div><div class="line">        		lists.<span class="built_in">add</span>(list);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> convertToProduct(<span class="keyword">String</span> <span class="built_in">str</span>, <span class="built_in">int</span>[] prime) &#123;</div><div class="line">    	<span class="built_in">int</span> product = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="built_in">char</span> c : <span class="built_in">str</span>.toCharArray()) &#123;</div><div class="line">    		product *= prime[c - <span class="string">'a'</span>];</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Happy Number]]></title>
      <url>http://xinli90.com/2016/08/17/Happy-Number/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/happy-number/" target="_blank" rel="external">Leetcode-Happy Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Use HashSet to store all sum in each loop</li>
<li>If the sume is 1, then it is happy number. Ohterwise store in HashSet and if the specific element is already in HashSet, this is not happy number.</li>
<li>Space complexity is O(n)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Space complexity is O(1), much faster.</li>
<li>Adapt the Floyd Cycle detection algorithm.</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isHappy(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        HashSen&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> num = n;</div><div class="line">        whlie(num!=<span class="number">1</span>) &#123;</div><div class="line">        	<span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">        	<span class="keyword">while</span>(num&gt;<span class="number">0</span>) &#123;</div><div class="line">        		<span class="keyword">sum</span> += Math.pow(num%<span class="number">10</span>,<span class="number">2</span>);</div><div class="line">        		num /= <span class="number">10</span>;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">if</span>(!set.add(<span class="keyword">sum</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        	num = <span class="keyword">sum</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isHappy(<span class="keyword">int</span> n) &#123;</div><div class="line">		<span class="keyword">int</span> slow =n, fast = n;</div><div class="line">		do &#123;</div><div class="line">			slow = helper(slow);</div><div class="line">			fast = helper(helper(fast));</div><div class="line">			<span class="keyword">if</span>(fast == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;<span class="keyword">while</span>(slow!=fast)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> helper(<span class="keyword">int</span> num) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">sum</span>=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(num&gt;<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> remainder = num%<span class="number">10</span>;</div><div class="line">			<span class="keyword">sum</span> += remainder * remainder;</div><div class="line">			num /= <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">sum</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Contains Duplicate]]></title>
      <url>http://xinli90.com/2016/08/16/Contains-Duplicate/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/contains-duplicate/" target="_blank" rel="external">Leetcode-Contains Duplicate</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Time complexity is O(n), space complexity is O(n)</li>
<li>Use HashSet  </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Time complexity is O(nlogn), space complexity is O(1)</li>
<li>Use Arrays.sort(), find duplicate elements </li>
<li>But time limit exceeded.</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Time complexity is O(n^2), space complexity is O(1)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span>(!set.add(num)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">		Arrays.sort(nums);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length-<span class="number">1</span>; i++)&#123;</div><div class="line">			<span class="keyword">if</span>(nums[i]==nums[i+<span class="number">1</span>])<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] == nums[j]) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Substring Without Repeating Characters]]></title>
      <url>http://xinli90.com/2016/08/16/Longest-Substring-Without-Repeating-Characters/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="external">Leetcode-Longest Substring Without Repeating Characters</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>
<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>
<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a substring, <code>&quot;pwke&quot;</code> is a subsequence and not a substring.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate through the string, store its character and index into HashMap.     </li>
<li>If there is a existed key, then record the size of hashmap which  is the length of substringand compare to get the maximum one.      </li>
<li>remove all elements which are before this existed key(inclusive this element)      </li>
<li>store this new element and continue to the next one.      </li>
<li>At last return the maximum one from max and the size of hashmap.     </li>
<li>The time complexity is O(n^2)      </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate through the string, store its character and index into HashMap.     </li>
<li>Keep two pointers. Utilize right pointer to scan through string and left pointer move to the right of the same character last found if possible. Note that boty pointers only move forward.</li>
<li>The length between two pointers is the result.</li>
<li>The time complexity is O(n)</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Use Array instead of HashMap</li>
<li>Initiate Array with -1 in order that left pointer move from the first location.</li>
<li>Store location in Array based on the index of character.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> lengthOfLongestSubstring(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="built_in">if</span>(<span class="built_in">map</span>.containsKey(c)) &#123;</div><div class="line">				<span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>,<span class="built_in">map</span>.<span class="built_in">size</span>());</div><div class="line">				<span class="keyword">int</span> <span class="built_in">end</span> = <span class="built_in">map</span>.<span class="built_in">get</span>(c);</div><div class="line">				<span class="built_in">for</span>(<span class="keyword">int</span> j=start; j&lt;=<span class="built_in">end</span>; j++) &#123;</div><div class="line">					<span class="built_in">map</span>.<span class="built_in">remove</span>(s.charAt(j));</div><div class="line">				&#125;</div><div class="line">				start = <span class="built_in">end</span>+<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">map</span>.<span class="built_in">put</span>(c,i);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> Math.<span class="built_in">max</span>(<span class="built_in">map</span>.<span class="built_in">size</span>(),<span class="built_in">max</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> lengthOfLongestSubstring(<span class="keyword">String</span> s) &#123;</div><div class="line">		HashMap&lt;Character,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="keyword">int</span> maxLength = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> right=<span class="number">0</span>; right&lt;s.length(); right++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(right);</div><div class="line">			<span class="built_in">if</span>(<span class="built_in">map</span>.containsKey(c)) &#123;</div><div class="line">				left = Math.<span class="built_in">max</span>(left, <span class="built_in">map</span>.<span class="built_in">get</span>(c)+<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//if c has existed, update the value.Otherwise, add the new pair.</span></div><div class="line">			<span class="built_in">map</span>.<span class="built_in">put</span>(c,right);</div><div class="line">			maxLength = Math.<span class="built_in">max</span>(maxLength,right-left+<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> maxLength;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> lengthOfLongestSubstring(<span class="keyword">String</span> s) &#123;</div><div class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</div><div class="line">		Arrays.<span class="built_in">fill</span>(arr,<span class="number">-1</span>);</div><div class="line">		<span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			left = Math.<span class="built_in">max</span>(left,arr[c]+<span class="number">1</span>);</div><div class="line">			arr[c] = i;</div><div class="line">			<span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, i-left+<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">max</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day8 DataStructure about Set]]></title>
      <url>http://xinli90.com/2016/08/16/Day8-DataStructure-about-Set/</url>
      <content type="html"><![CDATA[<p>本篇关于Set的原理与应用.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆数据结构：分析数据结构特性，比较类似数据结构差异</li>
<li>实现数据结构</li>
<li>实战训练使用该数据结构</li>
<li>总结该数据结构特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>HashSet: only store value and in random order. It doesn’t allow to duplicate value in the hashset.  </li>
<li>TreeSet: It’s ordered set.</li>
</ul>
<h2 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h2><p>HashSet’s internal implementation is based on HashMap.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;     </div><div class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.put(e, PRESENT)==<span class="keyword">null</span>;     </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;     </div><div class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.containsKey(o);     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><h3 id="HashSet-vs-TreeSet"><a href="#HashSet-vs-TreeSet" class="headerlink" title="HashSet vs. TreeSet"></a>HashSet vs. TreeSet</h3><ul>
<li>HashSet: 所有操作都是O(1),only allow unique element in HashSet. allowed null value. not thread-safe. If multiple threads access to the hashset, at least one thread modify set, it must be synchronized externally or use Collections.synchronizedSet() method.  HashSet is faster than TreeSet.</li>
<li>TreeSet: 所有操作都是O(logn),duplicate-free collection of elements. not allowed null value. The default order is natural ordering. offers some handy method like <code>first()</code>,<code>last()</code>.</li>
<li>LinkedHashSet: It provides insertion-ordered iteration.</li>
</ul>
<table>
<thead>
<tr>
<th>Property</th>
<th>HashSet</th>
<th>LinkedHashSet</th>
<th>TreeSet</th>
</tr>
</thead>
<tbody>
<tr>
<td>Order</td>
<td>no guarantee order</td>
<td>insertion order</td>
<td>sorted according comparison mechanism(comparator),the default is natural ordering</td>
</tr>
<tr>
<td>add/remove/contains/size</td>
<td>O(1)</td>
<td>O(1)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>Interfaces</td>
<td>Set</td>
<td>Set</td>
<td>Set,SortedSet,NavigableSet</td>
</tr>
<tr>
<td>Null values/keys</td>
<td>allowed</td>
<td>allowed</td>
<td>not allowed(will throw NullPointerException)</td>
</tr>
<tr>
<td>Fail-fast behavior</td>
<td>Will throw ConcurrentModificationException</td>
<td>Will throw ConcurrentModificationException</td>
<td>Will throw ConcurrentModificationException</td>
</tr>
<tr>
<td>Implementation</td>
<td>HashMap</td>
<td>HashMap</td>
<td>Red-Black Tree</td>
</tr>
<tr>
<td>Is sunchronized</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day7 DataStructure about Map]]></title>
      <url>http://xinli90.com/2016/08/15/Day7-DataStructure-about-Map/</url>
      <content type="html"><![CDATA[<p>本篇是关于Map的原理与应用.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆数据结构：分析数据结构特性，比较类似数据结构差异</li>
<li>实现数据结构</li>
<li>实战训练使用该数据结构</li>
<li>总结该数据结构特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>HashMap: key不能重复，value可以重复，只能存储wrapper class，not primitive type. Not thread-safe. It is faster than hashtable.    </li>
<li>Hashtable:  Thread-safe. Others are similar to HashMap.</li>
<li>ConcurrentHashMap: It’s thread-safe.</li>
<li>TreeMap: It’s ordered map.</li>
</ul>
<h2 id="实现数据结"><a href="#实现数据结" class="headerlink" title="实现数据结"></a>实现数据结</h2><p>HashMap works on the principal of hashing.<br>HashMap stores both <code>key+value</code> pair in every node of linked list.</p>
<ul>
<li>How do <code>get()</code> and <code>put()</code> method of HashMap work: As we put(key,value) to store key-value pairs into the hashmap, HashMap implementation calls <code>hashcode()</code> on Key object to calculate a hash that is used to find a bucket where entry(key and value) will be stored.  When <code>get()</code> method is used to retrieve value, again key objects is used to calculate the hash then to find the bucket where that particular key is stored.</li>
<li><code>Collision</code>: Two different keys with the same hash value.  </li>
<li>What will happen if two different objects have same hashcode: Since hashcode() is same, bucket location would be same and collision occurs in hashmap. Since HashMap uses a linked list to store in bucket, object(both key and value) will be stored in next node of linked list.</li>
<li>How did you retrieve if two different objects have same hashcode: After finding bucket location through the hashcode(via key), we will call <code>keys equals()</code> method to identify correct node in linked list and return the associated value object for that key. </li>
<li>How to reduce collision: Using immutable, final obejct with proper equals() and hashcode() implementation wolud act as perfect JAVA HashMap keys and improve performance.  Since immutablity also allows caching their hashcode of different keys which makes overall retrieval process very fast.</li>
<li>The performance of get() method when collision happen: Using equals() method to compare keys to find out the correct object within a linked-list. The complexity is <code>O(n)</code>.  If hash will change from using a linked list to a balanced tree. This will improve to <code>O(logn)</code>.</li>
</ul>
<p>特别注意：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;Character, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'z'</span>,<span class="number">1</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'z'</span>,<span class="number">2</span>);</div><div class="line">System.out.<span class="built_in">println</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">'z'</span>));</div><div class="line"></div><div class="line"><span class="comment">//This will output 2, because put() method, key is same then it will get the most recently value instead.</span></div></pre></td></tr></table></figure>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="HashMap-vs-Hashtable"><a href="#HashMap-vs-Hashtable" class="headerlink" title="HashMap vs. Hashtable"></a>HashMap vs. Hashtable</h3><ul>
<li>HashMap: It’s not synchronized so it’s faster and takes less memory than Hashtable.  It allows one null key and any number of null values. </li>
<li>Hashtable: It’s synchronized so it’s thread-safe. It doesn’t allow null keys or values. </li>
</ul>
<h3 id="ConcurrentHashMap-vs-Hashtable"><a href="#ConcurrentHashMap-vs-Hashtable" class="headerlink" title="ConcurrentHashMap vs. Hashtable"></a>ConcurrentHashMap vs. Hashtable</h3><ul>
<li>ConcurrentHashMap provides its own synchronization, so you don’t have to  synchronize access to it explicitly. It provides <code>putIfAbsent</code> method and this ensure to atomically add a mapping if the specific key does’t exist.</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ConcurrentHashMap&lt;<span class="built_in">String</span>, Integer&gt; myMap = new ConcurrentHashMap&lt;<span class="built_in">String</span>, Integer&gt;()<span class="comment">;</span></div><div class="line"></div><div class="line">//this is <span class="literal">not</span> thread-safe, because another thread may add a mapping <span class="keyword">for</span> <span class="string">'key'</span> between the <span class="built_in">call</span> <span class="keyword">to</span> containsKey() <span class="literal">and</span> the <span class="built_in">call</span> <span class="keyword">to</span> put()<span class="comment">;</span></div><div class="line"><span class="keyword">if</span>(maMap.containsKey(<span class="string">"key"</span>)) &#123;</div><div class="line">	myMap.put(<span class="string">"key"</span>,<span class="number">1</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">//this is thread-safe</div><div class="line">myMap.putIfAbsent(<span class="string">"key"</span>,<span class="number">1</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>The difference between ConcurrentHashMap and Hashtable:        </li>
</ul>
<p>ConcurrentHashMap uses a <code>lock striping strategy</code>: It uses mutiple locks  on segment level instead of object level. It has(with defalut setting) 16 locks, each guarding 1/16th of the hashmap buckets. In this way, multiple threads can get/put key-value pairs from ConcurrentHashMap without blocking/waiting for each other.  (just like it locks each room instead of main door)<br>Hashtable and Collections.synchronizedMap(): It uses single lock for entire map.   It means if multiple threads try to access to it at the same time, it only allows one thread to access to it.  (it locks home’s main door)         </p>
<ul>
<li>How to make HashMap thread safe: You can make HashMap thread safe by wrapping it with Collections.synchronizedMap(). Or use <code>lock</code> explicitly. </li>
</ul>
<table>
<thead>
<tr>
<th>Property</th>
<th>HashMap</th>
<th>Hashtable</th>
<th>ConcurrentHashMap</th>
</tr>
</thead>
<tbody>
<tr>
<td>Null values/keys</td>
<td>One null key, any number of null values</td>
<td>not allowed</td>
<td>not allowed</td>
</tr>
<tr>
<td>Is thread-safe</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Lock mechanism</td>
<td>not applicable</td>
<td>locks entire map(locks the object)</td>
<td>locks the portion of map(locks the bucket)</td>
</tr>
<tr>
<td>Iterator</td>
<td>fail-fast</td>
<td>fail-fast</td>
<td>fail-safe</td>
</tr>
</tbody>
</table>
<h3 id="LinkedHashMap-vs-TreeMap"><a href="#LinkedHashMap-vs-TreeMap" class="headerlink" title="LinkedHashMap vs. TreeMap"></a>LinkedHashMap vs. TreeMap</h3><ul>
<li>TreeMap: It’s a tree based mapping. Its put/get operations take O(log n) time. It requires items to have some comparison mechanism, either with Comparable or Comparator.  The iteration order is determined by this mechanism(so the default ordering is natural ordering).</li>
<li>LinkedHashMap: It’s based on HashMap and Linked List, but it adds awareness to the order at which items are added.  So the iteration order is the same as insertion order.</li>
</ul>
<table>
<thead>
<tr>
<th>Property</th>
<th>HashMap</th>
<th>LinkedHashMap</th>
<th>TreeMap</th>
</tr>
</thead>
<tbody>
<tr>
<td>Order</td>
<td>no guarantee order</td>
<td>insertion order</td>
<td>sorted according comparison mechanism(the default is natural ordering)</td>
</tr>
<tr>
<td>Get/put/remove/containsKey</td>
<td>O(1)</td>
<td>O(1)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>Interfaces</td>
<td>Map</td>
<td>Map</td>
<td>Map,NavigableMap,SortedMap</td>
</tr>
<tr>
<td>Null values/keys</td>
<td>allowed</td>
<td>allowed</td>
<td>only values</td>
</tr>
<tr>
<td>Fail-fast behavior</td>
<td>Will throw ConcurrentModificationException</td>
<td>Will throw ConcurrentModificationException</td>
<td>Will throw ConcurrentModificationException</td>
</tr>
<tr>
<td>Implementation</td>
<td>buckets</td>
<td>doble-linked bukets</td>
<td>Red-Black Tree</td>
</tr>
<tr>
<td>Is sunchronized</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
</tbody>
</table>
<h3 id="HashMap的方法"><a href="#HashMap的方法" class="headerlink" title="HashMap的方法"></a>HashMap的方法</h3><ul>
<li>values() 返回所有值（value）的集合，是一个Collection</li>
<li>keySet() 返回所有键（key）的集合，是一个set集合，遍历这个set，用get()获取key所对应的value，也就遍历了Map</li>
<li>entrySet() 返回一个Set集合，在set集合中存放的是Map.Entry类型的对象，每个Entry代表Map的one pair(key,value)</li>
</ul>
<p>遍历HashMap的两种方法：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Map</span>&lt;<span class="keyword">String,String&gt; </span><span class="meta">map</span> = new HashMap&lt;&gt;()<span class="comment">;</span></div><div class="line">//遍历方法<span class="number">1</span>：keySet() <span class="meta">include</span> all keys</div><div class="line"><span class="keyword">Iterator&lt;String&gt; </span><span class="keyword">iterator </span>= <span class="meta">map</span>.keySet().<span class="keyword">iterator();</span></div><div class="line"><span class="symbol">while</span>(<span class="keyword">iterator.hasNext()) </span>&#123;</div><div class="line">	<span class="keyword">String </span>key = <span class="keyword">iterator.next();</span></div><div class="line">	<span class="keyword">String </span>value = <span class="meta">map</span>.get(key)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">//遍历方法<span class="number">2</span>：返回此映射中包含的映射关系的Set视图</div><div class="line"><span class="keyword">Iterator&lt;Map.Entry&lt;String,String&gt;&gt; </span><span class="keyword">iterator </span>= <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></div><div class="line"><span class="symbol">while</span>(<span class="keyword">iterator.hasNext()) </span>&#123;</div><div class="line">	<span class="meta">Map</span>.Entry <span class="meta">entry</span> = <span class="keyword">iterator.next();</span></div><div class="line">	<span class="keyword">String </span>key = <span class="meta">entry</span>.getKey()<span class="comment">;</span></div><div class="line">	<span class="keyword">String </span>value = <span class="meta">entry</span>.getValue()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Stack using Queues]]></title>
      <url>http://xinli90.com/2016/08/13/Implement-Stack-using-Queues/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-stack-using-queues/" target="_blank" rel="external">Leetcode-Implement Stack using Queues</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the following operations of a stack using queues.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>empty() – Return whether the stack is empty.</li>
</ul>
<p>Notes:</p>
<ul>
<li>You must use only standard operations of a queue – which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>
<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>
<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>
</ul>
<p>Update (2015-06-11):<br>The class name of the Java function had been updated to MyStack instead of Stack.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1-Two-Queue"><a href="#Solution1-Two-Queue" class="headerlink" title="Solution1: Two Queue"></a>Solution1: Two Queue</h4><p>check the first queue firstly, then the second if necessary. Since the first queue has higher priority to own the target.  Push all elements except the last one from one queue to another.  Return the last one.</p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Each time when we push an element, we rotate the queue to make the tail be the head.</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Solution1: Two Queues</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</div><div class="line">	 Queue&lt;Integer&gt; firstQueue;</div><div class="line">	 Queue&lt;Integer&gt; secondQueue;</div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</div><div class="line">	 	firstQueue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">	 	secondQueue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line">	 &#125;</div><div class="line">    <span class="comment">// Push element x onto stack.</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	firstQueue.offer(x);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Removes the element on top of the stack.</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span>(firstQueue.isEmpty())&#123;</div><div class="line">    		<span class="keyword">while</span>(secondQueue.size()!=<span class="number">1</span>)&#123;</div><div class="line">    			firstQueue.offer(secondQueue.poll());</div><div class="line">    		&#125;</div><div class="line">    		secondQueue.poll();</div><div class="line">    	&#125;<span class="keyword">else</span> &#123;	</div><div class="line">    		<span class="keyword">while</span>(firstQueue.size()!=<span class="number">1</span>)&#123;</div><div class="line">    			secondQueue.offer(firstQueue.poll());</div><div class="line">    		&#125;</div><div class="line">    		firstQueue.poll();</div><div class="line">    	&#125;</div><div class="line">    &#125;		</div><div class="line">    <span class="comment">// Get the top element.</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="keyword">int</span> <span class="keyword">target</span>;</div><div class="line">    	<span class="keyword">if</span>(firstQueue.isEmpty())&#123;</div><div class="line">    		<span class="keyword">while</span>(secondQueue.size()!=<span class="number">1</span>)&#123;</div><div class="line">    			firstQueue.offer(secondQueue.poll());</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">target</span> =  secondQueue.poll();</div><div class="line">    		firstQueue.offer(<span class="keyword">target</span>);</div><div class="line">    	&#125;<span class="keyword">else</span> &#123;</div><div class="line">    	  <span class="keyword">while</span>(firstQueue.size()!=<span class="number">1</span>)&#123;</div><div class="line">    	  	secondQueue.offer(firstQueue.poll());</div><div class="line">    	  &#125;</div><div class="line">    	  <span class="keyword">target</span> =  firstQueue.poll();</div><div class="line">    	  secondQueue.offer(<span class="keyword">target</span>);</div><div class="line">    	 &#125;</div><div class="line">    	 <span class="keyword">return</span> <span class="keyword">target</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Return whether the stack is empty.</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> firstQueue.isEmpty() &amp;&amp; secondQueue.isEmpty();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2: One Queue</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</div><div class="line">	Queue&lt;Integer&gt; queue;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</div><div class="line">		queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	&#125;</div><div class="line">    <span class="comment">// Push element x onto stack.</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	queue.offer(x);</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;queue.size()<span class="number">-1</span>;i++) &#123;</div><div class="line">    		queue.offer(queue.poll());</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">// Removes the element on top of the stack.</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">		queue.poll();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Get the top element.</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">return</span> queue.<span class="title">peek</span><span class="params">()</span></span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Return whether the stack is empty.</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">return</span> queue.<span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Queue using Stacks]]></title>
      <url>http://xinli90.com/2016/08/13/Implement-Queue-using-Stacks/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-queue-using-stacks/" target="_blank" rel="external">Leetcode-Implement Queue using Stacks</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the following operations of a queue using stacks.</p>
<ul>
<li>push(x) – Push element x to the back of queue.</li>
<li>pop() – Removes the element from in front of queue.</li>
<li>peek() – Get the front element.</li>
<li>empty() – Return whether the queue is empty.</li>
</ul>
<p>Notes:</p>
<ul>
<li>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>
<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>
<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ul>
<li>push: make sure the second stack is empty and push it into first stack.</li>
<li>pop: make sure the first stack is empty and pop from the second stack.</li>
<li>peek: the same rule with pop.</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ul>
<li>push: push it into first stack.</li>
<li>peek: if second stack is not empty, pop from it. Otherwise, put all elements from the first stack to the second stack and the peek it. </li>
<li>pop: the similar operation with peek and at last pop it.</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1:</span></div><div class="line"><span class="keyword">class</span> MyQueue &#123;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; firstStack;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; secondStack;</div><div class="line">    <span class="keyword">public</span> MyQueue() &#123;</div><div class="line">        firstStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        secondStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Push element x to the back of queue.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="keyword">while</span>(!secondStack.empty()) &#123;</div><div class="line">            firstStack.<span class="keyword">push</span>(secondStack.<span class="keyword">pop</span>());</div><div class="line">        &#125;</div><div class="line">        firstStack.<span class="keyword">push</span>(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Removes the element from in front of queue.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">pop</span>() &#123;</div><div class="line">        <span class="keyword">while</span>(!firstStack.empty()) &#123;</div><div class="line">            secondStack.<span class="keyword">push</span>(firstStack.<span class="keyword">pop</span>());</div><div class="line">        &#125;</div><div class="line">        secondStack.<span class="keyword">pop</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Get the front element.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> peek() &#123;       	    	&#125;</div><div class="line">        <span class="keyword">while</span>(!firstStack.empty()) &#123;</div><div class="line">            secondStack.<span class="keyword">push</span>(firstStack.<span class="keyword">pop</span>());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> secondStack.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return whether the queue is empty.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> empty() &#123;</div><div class="line">        <span class="keyword">if</span>(firstStack.empty() &amp;&amp; secondStack.empty()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Solution2:</span></div><div class="line"><span class="keyword">class</span> MyQueue &#123;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; firstStack;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; secondStack;</div><div class="line">    <span class="keyword">public</span> MyQueue() &#123;</div><div class="line">        firstStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        secondStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Push element x to the back of queue.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> x) &#123;</div><div class="line">        firstStack.<span class="keyword">push</span>(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Removes the element from in front of queue.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">pop</span>() &#123;</div><div class="line">        peek();</div><div class="line">        secondStack.<span class="keyword">pop</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Get the front element.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> peek() &#123;</div><div class="line">    	<span class="keyword">if</span>(secondStack.empty())&#123;</div><div class="line">    		<span class="keyword">while</span>(!firstStack.empty()) &#123;</div><div class="line">            	secondStack.<span class="keyword">push</span>(firstStack.<span class="keyword">pop</span>());</div><div class="line">        	&#125;</div><div class="line">    	&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> secondStack.peek();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return whether the queue is empty.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> empty() &#123;</div><div class="line">        <span class="keyword">return</span> firstStack.empty() &amp;&amp; secondStack.empty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Moving Average from Data Stream]]></title>
      <url>http://xinli90.com/2016/08/13/Moving-Average-from-Data-Stream/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/moving-average-from-data-stream/" target="_blank" rel="external">Leetcode-Moving Average from Data Stream</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>
<p>For example,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MovingAverage m = new MovingAverage(<span class="number">3</span>);</div><div class="line">m.next(<span class="number">1</span>) = <span class="number">1</span></div><div class="line">m.next(<span class="number">10</span>) = (<span class="number">1</span> + <span class="number">10</span>) / <span class="number">2</span></div><div class="line">m.next(<span class="number">3</span>) = (<span class="number">1</span> + <span class="number">10</span> + <span class="number">3</span>) / <span class="number">3</span></div><div class="line">m.next(<span class="number">5</span>) = (<span class="number">10</span> + <span class="number">3</span> + <span class="number">5</span>) / <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Utilize Queue(implemented by LinkedList) and size to maintain a window.<br>Utilize sum to record the current sum of all elements.<br>Time complexity is O(1). </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Utilize Queue(implemented by ArrayDeque) and size to maintain a window.<br>Utilize sum to record the current sum of all elements.<br>It is faster than solution1.          </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1:</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MovingAverage &#123;</div><div class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="keyword">private</span> final <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum;</div><div class="line">    </div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovingAverage</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span> = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">this</span>.size = size;</div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>.offer(val);</div><div class="line">        sum += val;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>.size()&gt;size) &#123;</div><div class="line">            sum -= <span class="built_in">queue</span>.poll();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)sum/<span class="built_in">queue</span>.size();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"> <span class="comment">//Solution2:</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> MovingAverage2 &#123;</div><div class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="keyword">private</span> final <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sum;</div><div class="line">    </div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovingAverage</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span> = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</div><div class="line">        <span class="keyword">this</span>.size = size;</div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>.offer(val);</div><div class="line">        sum += val;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>.size()&gt;size) &#123;</div><div class="line">            sum -= <span class="built_in">queue</span>.poll();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum/<span class="built_in">queue</span>.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your MovingAverage object will be instantiated and called as such:</div><div class="line"> * MovingAverage obj = new MovingAverage(size);</div><div class="line"> * double param_1 = obj.next(val);</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day6 DataStructure Collection]]></title>
      <url>http://xinli90.com/2016/08/13/Day6-DataStructure-Collection/</url>
      <content type="html"><![CDATA[<p>本篇是关于Collection的各种数据结构的分析和对比.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆数据结构：分析数据结构特性，比较类似数据结构差异</li>
<li>实现数据结构</li>
<li>实战训练使用该数据结构</li>
<li>总结该数据结构特点，并总结算法题</li>
</ul>
<h3 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h3><ul>
<li>Collections and Arrays: 都可以快速调用实现sort功能      </li>
<li>Queue: First in first out.</li>
<li>Stack: First in last out.</li>
</ul>
<h3 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h3><h3 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h3><h4 id="Collections-vs-Arrays"><a href="#Collections-vs-Arrays" class="headerlink" title="Collections vs. Arrays"></a>Collections vs. Arrays</h4><ul>
<li>Collections: Collections.sort(list) ,  它是专门operates on <code>List</code>排序。使用的算法为TimSort(modified by MergeSort) and ensure it’s stable.</li>
<li>Arrays:  Arrays.sort(array) , 它是专门为operates on <code>Array</code>排序。使用的算法为QucikSort for primitive type(not stable). TimSort for objects(stable). Actually, <code>java.util.Collections.sort()</code> simply calls <code>java.util.Arrays.sort()</code> to do the heavy lifting.</li>
</ul>
<h4 id="Queue-vs-Stack"><a href="#Queue-vs-Stack" class="headerlink" title="Queue vs. Stack"></a>Queue vs. Stack</h4><ul>
<li>Queue is an interface, if you want to get this collection, you need a specific implementing class, like LinkedList or ArrayDeque.</li>
<li>Stack is a class. It implements List.</li>
<li>operation:</li>
</ul>
<p>Stack:</p>
<ul>
<li>pop() 删去element at the <code>top(head/first)</code> of stack and return.  Throws <code>EmptyStackException</code> if the stack is empty.         </li>
<li>push() 存入element at the <code>top(head/first)</code> of stack.       </li>
<li>peek() 取出element at the <code>top(head/first)</code> of stack. Throws <code>EmptyStackException</code> if the stack is empty.           </li>
</ul>
<p>Queue:     </p>
<ul>
<li><code>boolean add()</code> vs. <code>boolean offer()</code> : insert the element into the <code>tail(end/last)</code> of the queue. add() throws an <code>IllegalStateException</code> if no space is available.        </li>
<li>poll() 删去element at the <code>top(head/first)</code> of stack and return, return null if queue is empty.                       </li>
<li>peek() 取出element at the <code>top(head/first)</code> of stack, return null if the queue is empty.   </li>
<li>empty() 返回if queue is empty.</li>
</ul>
<p>Deque:</p>
<ul>
<li>addFirst(), offerFirst()</li>
<li>addLast(), offerLast()</li>
<li>pollFirst(), peekFirst()</li>
<li>pollLast(),peekLast()</li>
<li>removeFirst(), removeLast()</li>
</ul>
<h4 id="ArrayDeque-vs-LinkedList"><a href="#ArrayDeque-vs-LinkedList" class="headerlink" title="ArrayDeque vs. LinkedList"></a>ArrayDeque vs. LinkedList</h4><p>Both implement Deque and Queue.</p>
<ul>
<li>Memory cost: ArrayDeque is memory efficient since you don’t have to keep track of next node unlike in LinkedList. </li>
<li><p>Accessing speed: Accessing an element in ArrayDeque is always faster than LinkedList. It takes O(1) for accessing elements.  In Linked List, it will take O(n) to find last element.</p>
</li>
<li><p>ArrayDeque: This class is likely to be faster than Stack when used as a stack, and faster than LinkedList when used as a queue. It doesn’t support null elements and concurrent access by multiple threads and is not thread-safe.</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Add and Search Word - Data structure design]]></title>
      <url>http://xinli90.com/2016/08/11/Add-and-Search-Word-Data-structure-design/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/" target="_blank" rel="external">Leetcode-Add and Search Word - Data structure design</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports the following two operations:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> addWord(<span class="keyword">word</span>)</div><div class="line"><span class="keyword">bool</span> search(<span class="keyword">word</span>)</div></pre></td></tr></table></figure>
<p>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p>
<p>For example:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">addWord</span><span class="params">(<span class="string">"bad"</span>)</span></span></div><div class="line"><span class="function"><span class="title">addWord</span><span class="params">(<span class="string">"dad"</span>)</span></span></div><div class="line"><span class="function"><span class="title">addWord</span><span class="params">(<span class="string">"mad"</span>)</span></span></div><div class="line"><span class="function"><span class="title">search</span><span class="params">(<span class="string">"pad"</span>)</span></span> -&gt; false</div><div class="line"><span class="function"><span class="title">search</span><span class="params">(<span class="string">"bad"</span>)</span></span> -&gt; true</div><div class="line"><span class="function"><span class="title">search</span><span class="params">(<span class="string">".ad"</span>)</span></span> -&gt; true</div><div class="line"><span class="function"><span class="title">search</span><span class="params">(<span class="string">"b.."</span>)</span></span> -&gt; true</div></pre></td></tr></table></figure>
<p>Note:<br>You may assume that all words are consist of lowercase letters a-z.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Utilize Trie Tree and Backtracking for search.       </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Utilize HashMap to store the length of string as the key, the list of string with the same length as the value.</li>
<li>compare the specific string with each string in the ArrayList to find if it is existed.</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1: Trie Tree</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> TrieNode &#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> isEndOfWord;</div><div class="line">	<span class="keyword">private</span> TrieNode[] children;</div><div class="line">	<span class="keyword">public</span> TrieNode() &#123;</div><div class="line">		<span class="comment">//default:isEndOfWord = false;</span></div><div class="line">		children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> getIsEndOfWord() &#123;</div><div class="line">		<span class="built_in">return</span> isEndOfWord;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setIsEndOfWord(<span class="keyword">boolean</span> isEndOfWord) &#123;</div><div class="line">		<span class="keyword">this</span>.isEndOfWord = isEndOfWord;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> TrieNode getChild(<span class="keyword">int</span> i) &#123;</div><div class="line">		<span class="built_in">return</span> children[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setChild(<span class="keyword">int</span> i, TrieNode node) &#123;</div><div class="line">		children[i] = node;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> TrieNode[] getChildren() &#123;</div><div class="line">		<span class="built_in">return</span> children;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> WordDictionary &#123;</div><div class="line">    <span class="keyword">private</span> TrieNode root;</div><div class="line">    WordDictionary() &#123;</div><div class="line">    	root = <span class="keyword">new</span> TrieNode();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Adds a word into the data structure.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addWord(<span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">        TrieNode node = root;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">word</span>.length(); i++) &#123;</div><div class="line">        	<span class="keyword">char</span> c = <span class="keyword">word</span>.charAt(i);</div><div class="line">        	<span class="built_in">if</span>(node.getChild(c-<span class="string">'a'</span>)==null)&#123;</div><div class="line">        		node.setChild(c-<span class="string">'a'</span>, <span class="keyword">new</span> TrieNode());</div><div class="line">        	&#125;</div><div class="line">        	node = node.getChild(c-<span class="string">'a'</span>);</div><div class="line">        &#125;</div><div class="line">        node.setIsEndOfWord(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Returns if the word is in the data structure. A word could</span></div><div class="line">    <span class="comment">// contain the dot character '.' to represent any one letter.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> search(<span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">        <span class="built_in">return</span> helper(<span class="keyword">word</span>, <span class="number">0</span>, root);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> helper(<span class="keyword">String</span> <span class="keyword">word</span>, <span class="keyword">int</span> level, TrieNode dummy) &#123;</div><div class="line">    	<span class="built_in">if</span>(level == <span class="keyword">word</span>.length()) <span class="built_in">return</span> dummy.getIsEndOfWord();</div><div class="line">        <span class="keyword">char</span> c = <span class="keyword">word</span>.charAt(level);</div><div class="line">        <span class="built_in">if</span>(c==<span class="string">'.'</span>) &#123;</div><div class="line">        		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dummy.getChildren().length;i++) &#123;</div><div class="line">        			<span class="built_in">if</span>(dummy.getChild(i)!=null)&#123;</div><div class="line">        				<span class="keyword">boolean</span> b = helper(<span class="keyword">word</span>, level+<span class="number">1</span>, dummy.getChild(i));</div><div class="line">        				<span class="built_in">if</span>(b) <span class="built_in">return</span> true;</div><div class="line">        			&#125;</div><div class="line">        		&#125;</div><div class="line">        		<span class="built_in">return</span> false;</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">if</span>(dummy.getChild(c-<span class="string">'a'</span>)==null)&#123;</div><div class="line">        		<span class="built_in">return</span> false;</div><div class="line">        	&#125;</div><div class="line">        	<span class="built_in">return</span> helper(<span class="keyword">word</span>, ++level, dummy.getChild(c-<span class="string">'a'</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Solution2</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> WordDictionary &#123;</div><div class="line">    HashMap&lt;Integer, List&lt;<span class="keyword">String</span>&gt;&gt; hashMap;</div><div class="line">    WordDictionary() &#123;</div><div class="line">         hashMap = <span class="keyword">new</span> HashMap&lt;Integer, List&lt;<span class="keyword">String</span>&gt;&gt;();    </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Adds a word into the data structure.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addWord(<span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">word</span>.length();</div><div class="line">        <span class="built_in">if</span>(hashMap.containsKey(<span class="built_in">size</span>)) hashMap.<span class="built_in">get</span>(<span class="built_in">size</span>).add(<span class="keyword">word</span>);</div><div class="line">        <span class="built_in">else</span> &#123;</div><div class="line">        	List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            list.add(<span class="keyword">word</span>);</div><div class="line">            hashMap.<span class="built_in">put</span>(<span class="built_in">size</span>,list);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Returns if the word is in the data structure. A word could</span></div><div class="line">    <span class="comment">// contain the dot character '.' to represent any one letter.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> search(<span class="keyword">String</span> <span class="keyword">word</span>) &#123;</div><div class="line">    	<span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">word</span>.length();</div><div class="line">    	<span class="built_in">if</span>(hashMap.containsKey(<span class="built_in">size</span>)) &#123;</div><div class="line">    		List&lt;<span class="keyword">String</span>&gt; list = hashMap.<span class="built_in">get</span>(<span class="built_in">size</span>);</div><div class="line">    		<span class="built_in">if</span>(list.contains(<span class="keyword">word</span>)) <span class="built_in">return</span> true;</div><div class="line">    		<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;list.<span class="built_in">size</span>();j++) &#123;</div><div class="line">    			<span class="keyword">String</span> s = list.<span class="built_in">get</span>(j);</div><div class="line">    			<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    			<span class="built_in">for</span>(;i&lt;s.length();i++) &#123;</div><div class="line">    				<span class="built_in">if</span>(<span class="keyword">word</span>.charAt(i)==<span class="string">'.'</span> || <span class="keyword">word</span>.charAt(i) == s.charAt(i))<span class="built_in">continue</span>;</div><div class="line">    				<span class="built_in">else</span> <span class="built_in">break</span>;</div><div class="line">    			&#125;</div><div class="line">    			<span class="built_in">if</span>(i == s.length()) <span class="built_in">return</span> true;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> false;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Your WordDictionary object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// WordDictionary wordDictionary = new WordDictionary();</span></div><div class="line"><span class="comment">// wordDictionary.addWord("word");</span></div><div class="line"><span class="comment">// wordDictionary.search("pattern");</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Trie (Prefix Tree)]]></title>
      <url>http://xinli90.com/2016/08/11/Implement-Trie-Prefix-Tree/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="external">Leetcode-Implement Trie (Prefix Tree)</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement a trie with insert, search, and startsWith methods.</p>
<p>Note:<br>You may assume that all inputs are consist of lowercase letters a-z.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>For the <code>TrieNode</code>, each node has two fields: </p>
<ul>
<li>a <code>boolean isEndOfWord</code> that stores whether the current character is the end of the word.        </li>
<li>a <code>TrieNode[]</code> array of size 26 that stores its children</li>
</ul>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>We use HashMap instead of Array to implement Trie Tree</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Solution1: Array</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> isEndOfWord;</div><div class="line">	<span class="keyword">private</span> TrieNode[] children;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//default:isEndOfWord = false;</span></div><div class="line">		children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getIsEndOfWord</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> isEndOfWord;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsEndOfWord</span><span class="params">(<span class="keyword">boolean</span> isEndOfWord)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.isEndOfWord = isEndOfWord;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> TrieNode <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> children[i];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChild</span><span class="params">(<span class="keyword">int</span> i, TrieNode node)</span> </span>&#123;</div><div class="line">		children[i] = node;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> TrieNode root;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</div><div class="line">		root = <span class="keyword">new</span> TrieNode();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//Inserts a word into the trie</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">		TrieNode dummy = root;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;word.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = word.charAt(i);</div><div class="line">			<span class="keyword">if</span>(dummy.getChild(c-<span class="string">'a'</span>)==<span class="keyword">null</span>) &#123;</div><div class="line">				dummy.setChild(c-<span class="string">'a'</span>, <span class="keyword">new</span> TrieNode());</div><div class="line">			&#125;</div><div class="line">			dummy = dummy.getChild(c-<span class="string">'a'</span>);</div><div class="line">		&#125;</div><div class="line">		dummy.setIsEndOfWord(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// Returns if the word is in the trie.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">    	TrieNode dummy = root;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;word.length(); i++) &#123;</div><div class="line">    		<span class="keyword">char</span> c = word.charAt(i);</div><div class="line">    		<span class="keyword">if</span>(dummy.getChild(c-<span class="string">'a'</span>) == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    		dummy = dummy.get(c-<span class="string">'a'</span>);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> dummy.getIsEndOfWord();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Returns if there is any word in the trie</span></div><div class="line">    <span class="comment">// that starts with the given prefix.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</div><div class="line">    	TrieNode dummy = root;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;word.length(); i++) &#123;</div><div class="line">    		<span class="keyword">char</span> c = word.charAt(i);</div><div class="line">    		<span class="keyword">if</span>(dummy.getChild(c-<span class="string">'a'</span>) == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    		dummy = dummy.get(c-<span class="string">'a'</span>);</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Solution2: HashMap</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</div><div class="line">	<span class="keyword">boolean</span> isEndOfWord;</div><div class="line">	HashMap&lt;Character, TrieNode&gt; children;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</div><div class="line">		isEndOfWord = <span class="keyword">false</span>;</div><div class="line">		children = <span class="keyword">new</span> HashMap&lt;Character, TrieNode&gt;();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> TrieNode root;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</div><div class="line">		root = <span class="keyword">new</span> TrieNode();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//Inserts a word into the trie</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">		TrieNode dummy = root;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;word.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = word.charAt(i);</div><div class="line">			<span class="keyword">if</span>(!dummy.children.containsKey(c)) &#123;</div><div class="line">				dummy.children.put(c, <span class="keyword">new</span> TrieNode());</div><div class="line">			&#125;</div><div class="line">			dummy = dummy.children.get(c);</div><div class="line">		&#125;</div><div class="line">		dummy.isEndOfWord = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// Returns if the word is in the trie.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">    	TrieNode node = get(word);</div><div class="line">    	<span class="keyword">return</span> node==<span class="keyword">null</span>? <span class="keyword">false</span> : node.isEndOfWord;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Returns if there is any word in the trie</span></div><div class="line">    <span class="comment">// that starts with the given prefix.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</div><div class="line">    	TrieNode node = get(prefix);</div><div class="line">    	<span class="keyword">return</span> node==<span class="keyword">null</span>? <span class="keyword">false</span> : <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> TrieNode <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    	TrieNode dummy = root;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;key.length(); i++) &#123;</div><div class="line">    		<span class="keyword">char</span> c = key.charAt(i);</div><div class="line">    		dummy = dummy.children.get(c);</div><div class="line">    		<span class="keyword">if</span>(dummy == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> dummy;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Your Trie object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// Trie trie = new Trie();</span></div><div class="line"><span class="comment">// trie.insert("somestring");</span></div><div class="line"><span class="comment">// trie.search("key");</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day5 Class Design]]></title>
      <url>http://xinli90.com/2016/08/10/Day5-Class-Design/</url>
      <content type="html"><![CDATA[<p>本篇是关于Class Design方面的一些注意事项和总结。</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆内部结构：分析设计类的特性和步骤</li>
<li>学习、探究和提出细节问题</li>
<li>解惑、总结及训练</li>
</ul>
<h3 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h3><p>在定义一个custom类时，需要根据已有的数据结构，来获得自己想要的方法，并构建外部可以调用的方法，而封装内部的具体实现和结构。<br>比如：实现一个双端链表，并且该链表可以把链表尾部指定个数的元素累加一定的值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> CustomStack&#123;</div><div class="line">	Deque&lt;Integer&gt; <span class="built_in">stack</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="built_in">stack</span> = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="built_in">stack</span>.poll();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">		<span class="built_in">stack</span>.push(num);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">stack</span>.peek();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">stack</span>.isEmpty();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[x];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</div><div class="line">			arr[i] = <span class="built_in">stack</span>.pollLast()+d;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">			<span class="built_in">stack</span>.offer(arr[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="学习过程和疑问"><a href="#学习过程和疑问" class="headerlink" title="学习过程和疑问"></a>学习过程和疑问</h3><p>在上述的程序里，我们有以下几个疑问：     </p>
<ol>
<li>如何构建一个类，如何在一个类中定义自己的constructor， Override 和 Overload应用。        </li>
<li>如何构建自己的外部方法，封装内部结构。           </li>
<li>Deque<integer> stack = new LinkedList&lt;&gt;(); 定义的意义，为什么声明和具体实现对象的不同的做法.          </integer></li>
<li>如何设计一个扩展性强的通用class，还是把业务逻辑写在custom class中更好。       </li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="When-do-we-use-‘this’-keyword-in-the-class"><a href="#When-do-we-use-‘this’-keyword-in-the-class" class="headerlink" title="When do we use ‘this’ keyword in the class?"></a>When do we use ‘this’ keyword in the class?</h4><ul>
<li>We commonly pass an argument with the same name as the private member variable we are attempting to set, we need use <code>this</code> to disambiguate variable references.      </li>
<li>When accessing an outer instance from a nested non-static class:</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Outer</span> &#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> a;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Inner</span> &#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> a;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> Outer.<span class="keyword">this</span>.a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Outer <span class="title">getOuter</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> Outer.<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Why-do-we-use-private-for-member-variable"><a href="#Why-do-we-use-private-for-member-variable" class="headerlink" title="Why do we use private for member variable?"></a>Why do we use <code>private</code> for member variable?</h4><ul>
<li>防止外界对象对内部成员变量的影响， a public member can be accessed from outside the class.  If something goes wrong, the culprit can be anywhere, and so in order to track down the bug, you may have to look at quite a lot of code. </li>
<li>解耦Encapsulation and Decoupling. If you change the member variable in A class, we need to check usages of this variable in B class which we use it in B.</li>
</ul>
<h4 id="Why-do-we-use-private-Get-and-Set-Method-instead-of-direct-access-to-the-information"><a href="#Why-do-we-use-private-Get-and-Set-Method-instead-of-direct-access-to-the-information" class="headerlink" title="Why do we use private, Get and Set Method instead of direct access to the information?"></a>Why do we use <code>private</code>, Get and Set Method instead of direct access to the information?</h4><p>It is bad to let external objects direct access to the informaiton.  If you don’t want other objects to access the internal data, but wish to controll it. You woould make it either private or protected, but provide get and set functions which can manipulate the data in a controlled way.</p>
<p>Because in the get and set functions, we can filter the invalid data and modification.       </p>
<p>For example:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> bank_balance</div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> owner;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> balance; </div><div class="line"></div><div class="line">	<span class="keyword">public</span> bank_balance( <span class="keyword">String</span> name, <span class="keyword">int</span> dollars )</div><div class="line">	&#123;</div><div class="line">		owner = name;</div><div class="line"></div><div class="line">		<span class="built_in">if</span> (dollars &gt;= <span class="number">0</span>)</div><div class="line">			balance = dollars;</div><div class="line">		<span class="built_in">else</span></div><div class="line">			dollars =<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We have declared our string and integer to be public. This means that any object in the system can change the balance (setting it to zero, or even giving us a negative balance). This could cause the program to fall over, even though we wrote code in our constructor to prevent negative balances.</p>
<p>Instead, we should have provided a getBalance/setBalance method, and made our balance private or proteced. Other objects can still access the data, but they can’t put invalid data in.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">bank_balance</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> String owner;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> balance; </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">bank_balance</span>(<span class="params"> String name, <span class="keyword">int</span> dollars </span>)</span></div><div class="line">	&#123;</div><div class="line">		owner = name;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (dollars &gt;= <span class="number">0</span>)</div><div class="line">			balance = dollars;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			dollars =<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span>(<span class="params"><span class="keyword">int</span> dollars</span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (dollars &gt;= <span class="number">0</span>)</div><div class="line">			balance = dollars;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			dollars = <span class="number">0</span>;		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="如何构建自己的外部方法，封装内部结构"><a href="#如何构建自己的外部方法，封装内部结构" class="headerlink" title="如何构建自己的外部方法，封装内部结构"></a>如何构建自己的外部方法，封装内部结构</h4><ol>
<li>可以借用其他已有的数据结构，去实现一个custom data structure.</li>
<li>其他人不用去知道你到底使用了什么数据结构，你只需要定义自己的private member variable, 去开放想让别人知道的方法和接口 public function.</li>
<li>This can make a good encapsulation and coupling.</li>
</ol>
<h4 id="如何构建一个类，如何在一个类中定义自己的constructor-Overload-vs-Override"><a href="#如何构建一个类，如何在一个类中定义自己的constructor-Overload-vs-Override" class="headerlink" title="如何构建一个类，如何在一个类中定义自己的constructor, Overload vs. Override"></a>如何构建一个类，如何在一个类中定义自己的constructor, Overload vs. Override</h4><ol>
<li>Declare the private member variables in the class and then concrete them in the constructor if necessary.</li>
<li>So you can have various kinds of constructor with initialization. This is the Overload. The same method name but different type and number of parameters. 如果只是改变了return type 或者 the name of parameters, this is not Overload.</li>
<li>Overriding requires the exactly same signature(method name, the type and number of parameters) and return type and thrown exceptions.</li>
<li>Use Get and Set function to let external objects to access the internal data and controll it.</li>
</ol>
<h4 id="Why-to-use-Polymorphism"><a href="#Why-to-use-Polymorphism" class="headerlink" title="Why to use Polymorphism"></a>Why to use Polymorphism</h4><p><code>Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();</code>       </p>
<p>The main reason you’d do this is to decouple your code from a specfic implementation of the interface. This is called programming to the interface.          </p>
<p>比如: List list = new LinkedList(), 你想改变具体的数据结构，use ArrayList instead of LinkedList, 你仅仅只需要改为List list = new ArrayList()而不需要考虑别的，如果一开始你就使用LinkedList list = new LinkedList(),那么there is no guarantee that the rest of your code doesn’t make use of methods to the LinkedList class.</p>
<h4 id="关于Switch"><a href="#关于Switch" class="headerlink" title="关于Switch"></a>关于Switch</h4><p>Switch 不支持 long, float, double 及其包装类， 支持int, char, byte以及包装类和String.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kth Largest Element in an Array]]></title>
      <url>http://xinli90.com/2016/08/08/Kth-Largest-Element-in-an-Array/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="external">Leetcode-Kth Largest Element in an Array</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>For example,<br>Given [3,2,1,5,6,4] and k = 2, return 5.</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>sort array and get he kth largest element.   </li>
<li>Time O(nlogn), Space O(1)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Maintain a PriorityQueue with k size</li>
<li>Put each element into PriorityQueue and get the peek at last.</li>
<li>Time O(nlogk), Space O(k)</li>
</ol>
<h4 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h4><ol>
<li>Turn to find the kth smallest number</li>
<li>Take use of Quick Sort, each time find the position of pivot and get the length between left and pivot</li>
<li>If the length equals to k, it’ll be the right one.</li>
<li>if the length is less than k, loop the next round for right side of list.</li>
<li>if the length is greater than k, loop the next round for left side of list</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">return</span> nums[nums.length-k];</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        PriorityQueue&lt;Integer&gt; <span class="built_in">queue</span> = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">        	<span class="built_in">queue</span>.offer(num);</div><div class="line">        	<span class="keyword">if</span>(<span class="built_in">queue</span>.size()&gt;k) &#123;</div><div class="line">        		<span class="built_in">queue</span>.poll();</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">queue</span>.peek();</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution3 &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    	<span class="comment">//turn to find kth smallest number</span></div><div class="line">    	<span class="keyword">int</span> size = nums.length;</div><div class="line">        <span class="keyword">return</span> quickSort(nums, <span class="number">0</span>, size<span class="number">-1</span>, size-k+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    	<span class="keyword">int</span> i = left, j = right, pivot = nums[left];</div><div class="line">    	<span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">    		<span class="keyword">while</span>(i&lt;j &amp;&amp; nums[j]&gt;=pivot) j--;</div><div class="line">    		<span class="keyword">if</span>(i&lt;j) nums[i] = nums[j];</div><div class="line">    		<span class="keyword">while</span>(i&lt;j &amp;&amp; nums[i]&lt;=pivot) i++;</div><div class="line">    		<span class="keyword">if</span>(i&lt;j) nums[j] = nums[i];</div><div class="line">    	&#125;</div><div class="line">    	nums[i] = pivot;</div><div class="line">    	<span class="keyword">int</span> m = i - left +<span class="number">1</span>;</div><div class="line">    	<span class="keyword">if</span>(k==m) <span class="keyword">return</span> nums[i];</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(m&lt;k) <span class="keyword">return</span> quickSort(nums, i+<span class="number">1</span>, right, k-m);</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> qucikSort(nums,left, i<span class="number">-1</span>, k);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day4 Difference between Comparator and Comparable]]></title>
      <url>http://xinli90.com/2016/08/08/Day4-Difference-between-Comparator-and-Comparable/</url>
      <content type="html"><![CDATA[<p>本篇是关于Comparator和Comparable的比较和总结.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆内部结构：分析结构特性，比较两者差异</li>
<li>学习、穷解该结构和概念</li>
<li>总结该概念特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>Comparator: interface,可以直接在方法的后面重写和定义。</li>
<li>Comparable: interface, 在类中实现并继承。</li>
</ul>
<h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><ul>
<li>Comparable: A comparable object is capable of comparing itself with another object, like <code>a.compareTo(b)</code>. The class itself must implement the <code>java.lang.Comparable</code> interface in order to be able to compare its instances. 排序接口，若一个类实现了comparable接口，就意味着“该类支持排序”。相当于一个“内部比较器”。</li>
<li>Comparator: A comparator object is capable of comparing two different objects, like <code>compare(a, b)</code>.  The class is not comparing its instance, but some other class’s instances. The comparator class must implement the <code>java.util.Comparator</code>interface. 比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。相当于一个“外部比较器”。</li>
<li>关于排序顺序,ascending and descending</li>
<li>compare: is from the <code>Comparator</code> interface. </li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> <span class="literal">result</span> = compare(T o1, T o2)</div><div class="line"></div><div class="line"><span class="literal">result</span> &gt; <span class="number">0</span>   表明  o1 &gt; o2       </div><div class="line"><span class="literal">result</span> = <span class="number">0</span>   表明  o1 = o2         </div><div class="line"><span class="literal">result</span> &lt; <span class="number">0</span>   表明  o1 &lt; o2</div></pre></td></tr></table></figure>
<ul>
<li>compareTo: is from the <code>Comparable</code> interface.</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> <span class="literal">result</span> = o1.compareTo(o2)</div><div class="line"></div><div class="line"><span class="literal">result</span> &gt; <span class="number">0</span>   表明  o1 &gt; o2       </div><div class="line"><span class="literal">result</span> = <span class="number">0</span>   表明  o1 = o2         </div><div class="line"><span class="literal">result</span> &lt; <span class="number">0</span>   表明  o1 &lt; o2</div></pre></td></tr></table></figure>
<h3 id="应用PriorityQueue"><a href="#应用PriorityQueue" class="headerlink" title="应用PriorityQueue"></a>应用PriorityQueue</h3><ul>
<li>PriorityQueue是利用堆排序Heap sort原理，使用最大堆Max-heap或者最小堆Min-heap，默认最小堆，即每次取出的是最小值，因此每次出队和入队操作不能保证队列元素的有序性，只能保证队头元素和新插入元素的有序性。<br>PriorityQueue is implemented as a Binary Heap,both inserting and removing the values through offer() and poll() methods have O(lg K) complexity.       </li>
</ul>
<p>升序排列，即默认情况:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AscAgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p1.getAge() - p2.getAge();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若希望降序排列:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DescAgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p2.getAge() - p1.getAge();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>时间复杂度： remove()和add()时间复杂度都为O(logn), remove(Object obj) 和 contains() 需要O(n), 取队头只需要O(1).</li>
<li>Why remove() 和 add()的操作复杂度为O(logn):每次添加或减少一个元素的时候，都可能会影响到这个tree的序列，所以需要logn的复杂度的check和update。为了保证最小堆每个父节点都比子节点小，最大堆的每个父节点都比子节点大</li>
<li>Why 只能保证队头元素和新插入元素的有序性: 最大堆或者最小堆只能保证父节点是最大或最小的，其他不能推断出；新插入的元素因为可能会影响到父节点的位置，所以会经过一系列比较让他处在合适的位置。</li>
<li>详细解释:(转) <a href="http://www.importnew.com/20169.html" target="_blank" rel="external">http://www.importnew.com/20169.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day3 Difference between Stack and heap]]></title>
      <url>http://xinli90.com/2016/08/08/Day3-Difference-between-Stack-and-heap/</url>
      <content type="html"><![CDATA[<p>本篇介绍的是Stack与Heap的区别</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆内部结构：分析结构特性，比较两者差异</li>
<li>学习、穷解该结构和概念</li>
<li>总结该概念特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>Heap: It will generate a heap in application startup.  Put the globle variable and object into it. Will have memory leak. </li>
<li>Stack: Every thread will have its own stack. Put the local variable, return address into  it. And it is based on the characteristic of stack, Last in first out. It ensures the application get the most recently thread.</li>
</ul>
<h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><ul>
<li>Where are the stack and heap stored : They both are stored in computer’s RAM(Random Access Memory). </li>
<li>How do threads interact with them and how do them work in multithreading: Each thread has its own stack and multithreads shared with one heap. </li>
<li>How long does memoery on the stack last versus memoery on the heap: In each thread, there are local variables in stack when the function is called and they are deleted automatically when the function end.  Since multithreads share with one heap, there are globle variables and objects storing in the heap. And if you want to delete some resource, you need deallocate it manully. For java, there is garbage collection mechanism to automatically delete memoery from the heap. If you don’t delete this object inside the function, it will end up with memory leak.</li>
<li>Can the stack and heap grow in size: Stack cannot grow in size. It is fixed when stack is created. If there are much more nested function or infinite recursive call, stack overflow will occur. Heap can grow in size based on the application requirement. When there are large number of data or you’re not sure how much data you need to store, you can store them into heap.</li>
<li>Which is faster - the stack or the head: The stack is much faster than the heap. This is because of the way that memory is allocated in the stack. Allocating memory on the stack is as simple as moving the pointer up.</li>
<li>What can go wrong with the stack and the heap: If stack runs out of memory, then this is called a stack overflow and could cause the program crash. The heap could have the problem of fragmentation, which occurs when the available memory on the heap is noncontiguous. But allocating new memory may be impossible because of the fact that even through there is enough memory for the desired allocation, there are not enough memoery in one big block for the desiged amount of memory. </li>
</ul>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><h3 id="Heap-and-Stack"><a href="#Heap-and-Stack" class="headerlink" title="Heap and Stack:"></a>Heap and Stack:</h3><ul>
<li>注意点： 只要是new()新建出来的对象，全部存储在heap中。<br>Code to create an object on the stack:</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">void</span> some<span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span></div><div class="line">&#123;</div><div class="line"><span class="comment">/* create an object "m" of class Member</span></div><div class="line">    this will be put on the stack since the </div><div class="line">    "new" keyword is not used, and we are </div><div class="line">   creating the object inside a function</div><div class="line">*/</div><div class="line">  </div><div class="line">  Member m;</div><div class="line"></div><div class="line">&#125; <span class="comment">//the object "m" is destroyed once the function ends</span></div></pre></td></tr></table></figure>
<p>So, the object “m” is destroyed once the function has run to completion – or, in other words, when it “goes out of scope”. The memory being used for the object “m” on the stack will be removed once the function is done running.</p>
<p>If we want to create an object on the heap inside a function, then this is what the code would look like:</p>
<p>Code to create an object on the heap:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">void</span> some<span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span></div><div class="line">&#123;</div><div class="line"><span class="comment">/* create an object "m" of class Member</span></div><div class="line">    this will be put on the heap since the </div><div class="line">    "new" keyword is used, and we are </div><div class="line">   creating the object inside a function</div><div class="line">*/</div><div class="line">  </div><div class="line">  Member* m = <span class="keyword">new</span> Member( ) ;</div><div class="line">  </div><div class="line">  <span class="comment">/* the object "m" must be deleted</span></div><div class="line">      otherwise a memory leak occurs</div><div class="line">  */</div><div class="line"></div><div class="line">  <span class="keyword">delete</span> m; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the code above, you can see that the “m” object is created inside a function using the “new” keyword. This means that “m” will be created on the heap. But, since “m” is created using the “new” keyword, that also means that we must delete the “m” object on our own as well – otherwise we will end up with a memory leak.</p>
<ul>
<li><p>如果在局部new一个对象时，会在stack和heap中都allocate memoery, 在heap中memory实际建立这个对象，在stack中的memory只是一个指向这个heap对象的指针。 </p>
</li>
<li><p>java中的数据类型，分为基本类型(primitive types)和包装类数据(wrappper class):<br>基本类型都存放在stack. Stack有一个很重要的特殊性，就是存在栈中的数据可以共享。举例：<br>int a = 3;<br>int b = 3;<br>　　编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。        </p>
</li>
</ul>
<p>特别注意：这种字面值的引用于类对象的引用不同。 假设两个类对象的引用指向同一个对象，如果一个引用变量修改了这个对象，那么另一个引用也会反映出这个变化。 相反，字面值的引用不会出现这个问题。</p>
<h3 id="关于特殊包装类：String"><a href="#关于特殊包装类：String" class="headerlink" title="关于特殊包装类：String"></a>关于特殊包装类：String</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String </span><span class="built_in">s1</span> = <span class="string">"abc"</span><span class="comment">;     </span></div><div class="line"><span class="keyword">String </span><span class="built_in">s2</span> = <span class="string">"abc"</span><span class="comment">;       </span></div><div class="line"><span class="keyword">String </span><span class="built_in">s3</span> = new <span class="keyword">String("abc");</span></div><div class="line"><span class="keyword">String </span><span class="built_in">s4</span> = new <span class="keyword">String("abc");</span></div><div class="line"></div><div class="line"><span class="keyword">String </span><span class="built_in">s5</span> = <span class="built_in">s1</span><span class="comment">;</span></div><div class="line"><span class="keyword">String </span><span class="built_in">s6</span> = <span class="built_in">s3</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>For s1 and s2, we put “abc” (String literals)into String Constant Pool. It’s not in heap or stack. But the reference of this string is in stack.  For the String Constant Pool, if we can find string already exists in String Constant Pool, there is no need to create a new string into the pool. We only make this reference refer to this created String.<br>For s3 and s4, we new an object, so put this “abc” (Strig object) into heap. </p>
<h3 id="关于-equals-and"><a href="#关于-equals-and" class="headerlink" title="关于 equals and == :"></a>关于 equals and == :</h3><p><code>equals</code> is to compare the value of the string, <code>==</code> is to compare if two reference point to the same object.      </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">s1</span>.equals(<span class="built_in">s2</span>)<span class="comment">;      //true</span></div><div class="line"><span class="built_in">s1</span>.equals(<span class="built_in">s3</span>)<span class="comment">;		//true</span></div><div class="line"><span class="built_in">s3</span>.equals(<span class="built_in">s4</span>)<span class="comment">;		//true</span></div><div class="line"></div><div class="line"><span class="built_in">s1</span> == <span class="built_in">s2</span><span class="comment">;		//true</span></div><div class="line"><span class="built_in">s1</span> == <span class="built_in">s3</span><span class="comment">;		//false	</span></div><div class="line"><span class="built_in">s3</span> == <span class="built_in">s4</span><span class="comment">;		//false</span></div><div class="line"></div><div class="line"><span class="built_in">s5</span>.equals(<span class="built_in">s3</span>)<span class="comment">;		//true</span></div><div class="line"><span class="built_in">s6</span>.equals(<span class="built_in">s1</span>)<span class="comment">;		//true</span></div><div class="line"><span class="built_in">s5</span> == <span class="built_in">s2</span><span class="comment">;		//true</span></div><div class="line"><span class="built_in">s6</span> == <span class="built_in">s3</span><span class="comment">;		//true</span></div><div class="line"><span class="built_in">s6</span> == <span class="built_in">s4</span><span class="comment">;		//false</span></div><div class="line"></div><div class="line"><span class="built_in">s7</span> == <span class="built_in">s1</span><span class="comment">;		//true</span></div><div class="line"><span class="built_in">s1</span> == <span class="built_in">s2</span><span class="comment">;		//false</span></div></pre></td></tr></table></figure>
<h3 id="值传递-pass-by-value-和引用传递-pass-by-reference"><a href="#值传递-pass-by-value-和引用传递-pass-by-reference" class="headerlink" title="值传递(pass by value)和引用传递(pass by reference)"></a>值传递(pass by value)和引用传递(pass by reference)</h3><p>Java always pass arguments by value NOT by reference.</p>
<p>简单的就两句话：<br>1.基本类型：按值传递<br>2.对象：将引用按值传递           </p>
<p>按值传递的特性：传递的是值而不是引用，所以当形参修改时，实参并没有受到影响。      </p>
<p>举例：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">          Foo f = <span class="keyword">new</span> Foo(<span class="string">"f"</span>);</div><div class="line">          changeReference(f); <span class="comment">// It won't change the reference!</span></div><div class="line">          modifyReference(f); <span class="comment">// It will modify the object that the reference variable "f" refers to!</span></div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeReference</span>(<span class="params">Foo a</span>)</span>&#123;</div><div class="line">          Foo b = <span class="keyword">new</span> Foo(<span class="string">"b"</span>);</div><div class="line">          a = b;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyReference</span>(<span class="params">Foo c</span>)</span>&#123;</div><div class="line">          c.setAttribute(<span class="string">"c"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">     Foo <span class="attr">f</span> = new Foo(<span class="string">"f"</span>);   //   <span class="attr">f</span> =&gt; Object <span class="string">"f"</span></div><div class="line">     </div><div class="line">     public static void changeReference(Foo a)&#123;   // <span class="attr">a</span> =&gt; <span class="literal">null</span></div><div class="line">          Foo <span class="attr">b</span> = new Foo(<span class="string">"b"</span>);    //<span class="attr">b</span> =&gt; Object <span class="string">"b"</span></div><div class="line">          <span class="attr">a</span> = b;        // a <span class="literal">and</span> <span class="attr">b</span> =&gt; Object <span class="string">"b"</span></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     changeReference(f);    // a <span class="literal">and</span> <span class="attr">f</span> =&gt; Object <span class="string">"f"</span> ,<span class="keyword">then</span> inside <span class="attr">a</span> =&gt; Object <span class="string">"b"</span> , f doesn't change.</div><div class="line">     </div><div class="line">     </div><div class="line">     public static void modifyReference(Foo c)&#123;   //<span class="attr">c</span> =&gt; <span class="literal">null</span></div><div class="line">          c.setAttribute(<span class="string">"c"</span>);    // c modify something directly <span class="keyword">in</span> Object <span class="string">"f"</span></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     modifyReference(f);    // c <span class="literal">and</span> <span class="attr">f</span> =&gt; Object <span class="string">"f"</span>, <span class="keyword">then</span> f changed.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>基本类型如int, long, double, long等，pass by value. 传递给其他形参之后如何修改都不会影响original value.     </li>
<li>对象Object，是对象的引用pass by value，每次改变的是所指向的对象即一直指向不同的对象，除非直接修改该对象的内在成员变量的值，否则不会影响original object.     </li>
<li>数组 跟 object 的情况类似，如果直接修改数组中的值，则会直接影响到。      </li>
<li>That’s the reason why we should have a <code>private final int x;</code> when we don’t want the internal member variables are changed.</li>
</ol>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/9404625/java-pass-by-reference/9404727#9404727" target="_blank" rel="external">http://stackoverflow.com/questions/9404625/java-pass-by-reference/9404727#9404727</a>          </li>
<li><a href="http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="external">http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value</a>         </li>
<li><a href="http://www.blogjava.net/heis/archive/2009/04/23/267256.html" target="_blank" rel="external">http://www.blogjava.net/heis/archive/2009/04/23/267256.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Largest Number]]></title>
      <url>http://xinli90.com/2016/08/07/Largest-Number/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/largest-number/" target="_blank" rel="external">Leetcode-Largest Number</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of non negative integers, arrange them such that they form the largest number.</p>
<p>For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.</p>
<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>convert int to string</li>
<li>sort array with string, override comparator. s1 + s2 is different from s2 + s1, for example 12 + 3 &lt; 3 + 12. We can use this rule to compare different string.</li>
<li>Then append them. </li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> class Solution1 &#123;</div><div class="line"> 	<span class="keyword">public</span> ListNode insertionSortList(ListNode head) &#123;		<span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">size</span> = nums.length;</div><div class="line">        <span class="keyword">String</span>[] arr = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="built_in">size</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</div><div class="line">            arr[i] = nums[i]+<span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        * comparator(Object o1, Object o2)&#123;return o1.val-o2.val&#125; 升序ascending</div><div class="line">        * comparator(Object o1, Object o2)&#123;return o2.val-o1.val&#125;降序descending </div><div class="line">        * int i = s1.compare(s2): i&gt;0 =&gt; s1&gt;s2; i&lt;0 =&gt; s1&lt;s2</div><div class="line">        *</div><div class="line">        */</div><div class="line">        </div><div class="line">        Arrays.<span class="built_in">sort</span>(arr,<span class="keyword">new</span> Comparator&lt;<span class="keyword">String</span>&gt;()&#123;</div><div class="line">           @Override</div><div class="line">           <span class="keyword">public</span> <span class="built_in">int</span> compare(<span class="keyword">String</span> s1,<span class="keyword">String</span> s2)&#123;</div><div class="line">               <span class="keyword">String</span> c1 = s1 + s2;</div><div class="line">               <span class="keyword">String</span> c2 = s2 + s1;</div><div class="line">               <span class="keyword">return</span> c2.compareTo(c1);</div><div class="line">           &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"0"</span>)) <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">String</span> s: arr)&#123;</div><div class="line">            builder.<span class="built_in">append</span>(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Insertion Sort List]]></title>
      <url>http://xinli90.com/2016/08/06/Insertion-Sort-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/insertion-sort-list/" target="_blank" rel="external">Leetcode-Insertion Sort List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Sort a linked list using insertion sort.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>current node is the node which we want to insert</li>
<li>find the correct pre and pre.next gap to insert</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line"> 	<span class="keyword">public</span> ListNode insertionSortList(ListNode head) &#123;		<span class="keyword">if</span>(head==<span class="literal">null</span> || head.<span class="keyword">next</span>==<span class="literal">null</span>) return head;</div><div class="line"> 		ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line"> 		ListNode pre = dummy;</div><div class="line"> 		ListNode current = head;</div><div class="line"> 		<span class="keyword">while</span>(current!=<span class="literal">null</span>)&#123;</div><div class="line"> 			<span class="keyword">if</span>(pre.<span class="keyword">next</span>==<span class="literal">null</span> || pre.<span class="keyword">next</span>.val&gt;current.val) pre = dummy;</div><div class="line"> 			<span class="keyword">while</span>(pre.<span class="keyword">next</span>!=<span class="literal">null</span> &amp;&amp; pre.<span class="keyword">next</span>.val &lt; current.val)&#123;</div><div class="line"> 				pre = pre.<span class="keyword">next</span>;</div><div class="line"> 			&#125;</div><div class="line"> 			ListNode <span class="keyword">next</span> = current.<span class="keyword">next</span>;</div><div class="line"> 			current.<span class="keyword">next</span> = pre.<span class="keyword">next</span>;</div><div class="line"> 			pre.<span class="keyword">next</span> = current;</div><div class="line"> 			current = <span class="keyword">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		return dummy.<span class="keyword">next</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sort List]]></title>
      <url>http://xinli90.com/2016/08/05/Sort-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/sort-list/" target="_blank" rel="external">Leetcode-Sort List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Sort a linked list in O(n log n) time using constant space complexity.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Solution1: Merge sort with recursive way, divide and conquer. First divide the list into left and right lists, sort them and then merge two lists. But the space complexity is O(log n). Because our iteration is O(n), we need iterate logn round. The time complexity is O(nlogn),but space complexity is O(logn).       </p>
<p>Solution2: From bottom to top, first sort every two ListNodes, then four  nodes until the whole list. Each time we sort in the same list, the space complexity is O(1).</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> // Recursive solution</div><div class="line"> public class Solution1 &#123;</div><div class="line">    public ListNode sortList(ListNode head) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="attr">head==null</span> || head.<span class="attr">next</span> == <span class="literal">null</span>) return head;</div><div class="line">        ListNode <span class="attr">slow</span> = head, <span class="attr">fast</span> = head, <span class="attr">firstHalf</span> = head;</div><div class="line">        while(fast.next!=<span class="literal">null</span> &amp;&amp; fast.next.next!=<span class="literal">null</span>) &#123;</div><div class="line">        	<span class="attr">slow</span> = slow.next;</div><div class="line">        	<span class="attr">fast</span> = fast.next.next;</div><div class="line">        &#125;</div><div class="line">        ListNode <span class="attr">secondHalf</span> = slow.next;</div><div class="line">        slow.<span class="attr">next</span> = <span class="literal">null</span>;   </div><div class="line">        ListNode <span class="attr">leftList</span> = <span class="literal">null</span>, <span class="attr">rightList</span> = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span>(firstHalf != secondHalf) &#123;</div><div class="line">        	<span class="attr">leftList</span> = sortList(firstHalf);</div><div class="line">        	<span class="attr">rightList</span> = sortList(secondHalf);</div><div class="line">        &#125;</div><div class="line">        return mergeLists(leftList,rightList);</div><div class="line">    &#125;</div><div class="line">    public ListNode mergeLists(ListNode leftList, ListNode rightList) &#123;</div><div class="line">    	<span class="keyword">if</span>(<span class="attr">leftList</span> == <span class="literal">null</span>) return rightList;</div><div class="line">    	<span class="keyword">if</span>(<span class="attr">rightList</span> == <span class="literal">null</span>) return leftList;</div><div class="line">    	ListNode <span class="attr">dummy</span> = new ListNode(-<span class="number">1</span>);</div><div class="line">    	ListNode <span class="attr">newList</span> = dummy;</div><div class="line">    	while(leftList!=<span class="literal">null</span> &amp;&amp; rightList!=<span class="literal">null</span>) &#123;</div><div class="line">    		<span class="keyword">if</span>(leftList.val &gt; rightList.val) &#123;</div><div class="line">    			newList.<span class="attr">next</span> = rightList;</div><div class="line">    			<span class="attr">newList</span> = newList.next;</div><div class="line">    			<span class="attr">rightList</span> = rightList.next;</div><div class="line">    		&#125;<span class="keyword">else</span>&#123;</div><div class="line">    			newList.<span class="attr">next</span> = leftList;</div><div class="line">    			<span class="attr">newList</span> = newList.next;</div><div class="line">    			<span class="attr">leftList</span> = leftList.next;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(leftList!=<span class="literal">null</span>) &#123;</div><div class="line">    		newList.<span class="attr">next</span> = leftList;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(rightList!=<span class="literal">null</span>) &#123;</div><div class="line">    		newList.<span class="attr">next</span> = rightList;</div><div class="line">    	&#125;</div><div class="line">    	return dummy.next;</div><div class="line">    &#125; 	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//Iterative solution, Bottom to top.</div><div class="line">public class Solution2 &#123;</div><div class="line">	public ListNode sortList(ListNode head) &#123;</div><div class="line">		ListNode <span class="attr">dummy</span> = new ListNode(-<span class="number">1</span>);</div><div class="line">		dummy.<span class="attr">next</span> = head;</div><div class="line">		for(int <span class="attr">i=2;</span> <span class="literal">true</span>; i*=<span class="number">2</span>) &#123;</div><div class="line">			int <span class="attr">numberOfMerge</span> = <span class="number">0</span>;</div><div class="line">			ListNode <span class="attr">newList</span> = dummy;</div><div class="line">			while(newList!=<span class="literal">null</span> &amp;&amp; newList.next!=<span class="literal">null</span>) &#123;</div><div class="line">				<span class="attr">newList</span> = merge(newList,i);</div><div class="line">				numberOfMerge ++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(numberOfMerge&lt;=<span class="number">1</span>) break;</div><div class="line">		&#125;</div><div class="line">		return dummy.next;</div><div class="line">	&#125;</div><div class="line">	public ListNode merge(ListNode newList, int length) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="attr">newList==null</span> || newList.<span class="attr">next==null)</span> return <span class="literal">null</span>;</div><div class="line">		ListNode <span class="attr">firstStart</span> = newList.next;</div><div class="line">		ListNode <span class="attr">firstEnd</span> = move(firstStart,length/<span class="number">2</span>-<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span>(<span class="attr">firstEnd</span> == <span class="literal">null</span>) return <span class="literal">null</span>;</div><div class="line">		ListNode <span class="attr">secondStart</span> = firstEnd.next;</div><div class="line">		firstEnd.<span class="attr">next</span> = <span class="literal">null</span>;</div><div class="line">		ListNode <span class="attr">secondEnd</span> = move(secondStart,length/<span class="number">2</span>-<span class="number">1</span>);</div><div class="line">		ListNode <span class="attr">secondEndNext</span> = secondEnd!=<span class="literal">null</span>? secondEnd.next : <span class="literal">null</span>;</div><div class="line">		<span class="keyword">if</span>(secondEndNext!=<span class="literal">null</span>) secondEnd.<span class="attr">next</span> = <span class="literal">null</span>;</div><div class="line">		while(firstStart!=<span class="literal">null</span> || secondStart!=<span class="literal">null</span>) &#123;</div><div class="line">    		<span class="keyword">if</span>(<span class="attr">secondStart==null</span> ||(firstStart!=<span class="literal">null</span> &amp;&amp; firstStart.val &lt; secondStart.val)) &#123;</div><div class="line">    			newList.<span class="attr">next</span> = firstStart;</div><div class="line">    			<span class="attr">newList</span> = newList.next;</div><div class="line">    			<span class="attr">firstStart</span> = firstStart.next;</div><div class="line">    		&#125;<span class="keyword">else</span>&#123;</div><div class="line">    			newList.<span class="attr">next</span> = secondStart;</div><div class="line">    			<span class="attr">newList</span> = newList.next;</div><div class="line">    			<span class="attr">secondStart</span> = secondStart.next;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(firstStart!=<span class="literal">null</span>) &#123;</div><div class="line">    		newList.<span class="attr">next</span> = firstStart;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">if</span>(secondStart!=<span class="literal">null</span>) &#123;</div><div class="line">    		newList.<span class="attr">next</span> = secondStart;</div><div class="line">    	&#125;</div><div class="line">    	<span class="attr">newList</span> = newList.next;</div><div class="line">    	newList.<span class="attr">next</span> = secondEndNext;</div><div class="line">    	return newList;</div><div class="line">	&#125;</div><div class="line">	public ListNode move(ListNode head, int moveBy)&#123;</div><div class="line">		while(head!=<span class="literal">null</span> &amp;&amp; moveBy&gt;<span class="number">0</span>)&#123;</div><div class="line">			<span class="attr">head</span> = head.next;</div><div class="line">			moveBy--;</div><div class="line">		&#125;</div><div class="line">		return head;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Merge k Sorted Lists]]></title>
      <url>http://xinli90.com/2016/08/05/Merge-k-Sorted-Lists/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="external">Leetcode-Merge k Sorted Lists</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Heap Sort. We can build a heap via Priority Queue. Each time we sort k nodes in the queue, then distract the least one and add a new one.       </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>Merge Sort. Time complexity is O(nlogn)</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ListNode mergeKLists(ListNode[] lists) &#123;</div><div class="line">    	<span class="keyword">if</span>(lists==<span class="literal">null</span> || lists.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        PriorityQueue&lt;ListNode&gt; queue = new PriorityQueue&lt;&gt;(lists.length, new Comparator&lt;ListNode&gt;()&#123;</div><div class="line">        	<span class="meta">@Override</span></div><div class="line">        	<span class="keyword">public</span> int compare(ListNode node1, ListNode node2) &#123;</div><div class="line">        		<span class="keyword">return</span> Integer.compare(node1.<span class="keyword">val</span>,node2.<span class="keyword">val</span>);</div><div class="line">        	&#125;</div><div class="line">        &#125;);</div><div class="line">        ListNode dummy = new ListNode(<span class="number">-1</span>);</div><div class="line">        ListNode head = dummy;</div><div class="line">        <span class="keyword">for</span>(ListNode list:lists)&#123;</div><div class="line">        	<span class="keyword">if</span>(list!=<span class="literal">null</span>)queue.add(list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">        	ListNode node = queue.poll();</div><div class="line">        	head.next = node;</div><div class="line">        	head = head.next;</div><div class="line">        	<span class="keyword">if</span>(node.next!=<span class="literal">null</span>)queue.add(node.next);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> ListNode mergeKLists(ListNode[] lists) &#123;</div><div class="line">		<span class="keyword">return</span> partion(lists,<span class="number">0</span>,lists.length<span class="number">-1</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">public</span> ListNode partion(ListNode[] lists, int left,int right)&#123;</div><div class="line">		<span class="keyword">if</span>(left==right) <span class="keyword">return</span> lists[left];</div><div class="line">		<span class="keyword">if</span>(left&lt;right)&#123;</div><div class="line">			int mid = (left+right)/<span class="number">2</span>;</div><div class="line">			ListNode leftList = partion(lists,left,mid);</div><div class="line">			ListNode rightList = partion(lists,mid+<span class="number">1</span>,right);</div><div class="line">			<span class="keyword">return</span> merge(leftList,rightList);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> ListNode merge(ListNode leftList,ListNode rightList)&#123;</div><div class="line">		<span class="keyword">if</span>(leftList==<span class="literal">null</span>) <span class="keyword">return</span> rightList;</div><div class="line">		<span class="keyword">if</span>(rightList==<span class="literal">null</span>) <span class="keyword">return</span> leftList;</div><div class="line">		<span class="comment">//Solution1:recursive way</span></div><div class="line">		<span class="keyword">if</span>(leftList.<span class="keyword">val</span> &lt; rightList.<span class="keyword">val</span>)&#123;</div><div class="line">			leftList.next = merge(leftList.next,rightList);</div><div class="line">			<span class="keyword">return</span> leftList;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			rightList.next = merge(leftList,rightList.next);</div><div class="line">			<span class="keyword">return</span> rightList;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//Solution2:iterative way</span></div><div class="line">		ListNode dummy = new ListNode(<span class="number">-1</span>);</div><div class="line">		ListNode newList = dummy;</div><div class="line">		<span class="keyword">while</span>(leftList!=<span class="literal">null</span> &amp;&amp; rightList!=<span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(leftList.<span class="keyword">val</span> &lt; rightList.<span class="keyword">val</span>)&#123;</div><div class="line">				newList.next = leftList;</div><div class="line">				leftList = leftList.next;		</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				newList.next = rightList;</div><div class="line">				rightList = rightList.next;</div><div class="line">			&#125;</div><div class="line">			newList = newList.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(leftList!=<span class="literal">null</span>)newList.next = leftList;</div><div class="line">		<span class="keyword">if</span>(rightList!=<span class="literal">null</span>)newList.next = rightList;</div><div class="line">		<span class="keyword">return</span> dummy.next;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day2 Algorithm about Sorting]]></title>
      <url>http://xinli90.com/2016/08/04/Day2-Algorithm-about-Sorting/</url>
      <content type="html"><![CDATA[<p>本篇是关于各种排序算法的分析和总结。</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆算法特性</li>
<li>实现算法功能</li>
<li>实战训练使用该算法</li>
<li>总结该算法特点，并总结算法题</li>
</ul>
<h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>直接插入排序Insertion sort: 在已有排好的序列中，依次插入新的元素；         </li>
<li>希尔排序Shell sort: 每次分成若干组，每组进行直接插入排序，每次缩小组数即扩大组内元素，例如第一次每隔五个分为一组，第二次每隔三个分为一组，第三次每隔一个分为一组；        </li>
<li>简单选择排序Selection sort:选择序列中最大的数放在第一位，之后再比较除第一位外剩下所有元素，选出最大数放在第二位，以此类推完成排序；</li>
<li>堆排序Heap sort: 构建最大堆，每次取出堆顶元素即当前最大元素，重新构建最大堆，取出堆顶排序，以此类推完成排序；</li>
<li>冒泡排序Bubble sort: 从后往前两两元素互相比较，移动最大或最小元素至序列首部，之后比较剩下元素，以此类推完成排序；</li>
<li>快速排序Qucik sort: 选出大小位于中间一个元素，以此元素为基准划为左右两组元素再分别进行排序；</li>
<li>归并排序Merge sort: 划为多组，每组两两进行排序，之后两组两组进行合并、排序，之后合并为最终一组；</li>
<li>Counting计数排序: 首先需要限定元素大小，取最大数为k,则设置一个新的数组长度为k+1，统计所有数的个数，填入相对应的位置中，依次相加元素数，再倒序遍历原数组，根据新数组中的位置，排列新的顺序，每排一个，之前记录个数的数组元素减1.   (参考：<a href="http://www.cnblogs.com/developerY/p/3166462.html" target="_blank" rel="external">http://www.cnblogs.com/developerY/p/3166462.html</a> )</li>
<li>Radix基数排序: 将所有数的数位长度统一，长度不够的前面补零，之后从最低位到最高位分别比较每个数字并排序，直到最高位完成即成为一个有序列；</li>
<li>Bucket桶排序: 制定每个桶的规则，然后相对应地分成M个桶，每个桶根据规则填入相对应的元素，每个桶内制定最优排序规则进行排序，最终依次输出每个桶的数据即为有序数列。</li>
</ul>
<h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort:"></a><code>Insertion Sort</code>:</h3><p>Insert each element into sorted list. Move the elements to the right position until it is greater than current element and put this element after the current element.      </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void <span class="keyword">insertionSort(int </span>arr[]) &#123;</div><div class="line">	int size = arr.length<span class="comment">;</span></div><div class="line">	for(int i=<span class="number">1</span><span class="comment">;i&lt;size;i++) &#123;</span></div><div class="line">		int <span class="keyword">j </span>= i-1<span class="comment">;</span></div><div class="line">		int k = arr[i]<span class="comment">;</span></div><div class="line">		while(<span class="keyword">j&gt;=0 </span>&amp;&amp; k &lt; arr[<span class="keyword">j]) </span>&#123;</div><div class="line">			arr[<span class="keyword">j+1] </span>= arr[<span class="keyword">j];</span></div><div class="line">			<span class="keyword">j--;</span></div><div class="line">		&#125;</div><div class="line">		arr[<span class="keyword">j+1] </span>= k<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Shell-Sort"><a href="#Shell-Sort" class="headerlink" title="Shell Sort:"></a><code>Shell Sort</code>:</h3><p>At first divide the array into size/2 arrays, utilizing Insertion Sort. Then divide the array into size/4 arrays until 1 array and sort. </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> shellSort(<span class="keyword">int</span> arr[]) &#123;</div><div class="line">	<span class="keyword">int</span> <span class="keyword">size</span> = arr.length;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> gap = <span class="keyword">size</span><span class="regexp">/2; gap&gt;0; gap/</span>=<span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=gap; i&lt;<span class="keyword">size</span>;i++) &#123;</div><div class="line">			<span class="keyword">int</span> k = arr[i];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;=gap &amp;&amp; k &lt; arr[j-gap]; j-=gap) &#123;</div><div class="line">				arr[j] = arr[j-gap];</div><div class="line">			&#125;</div><div class="line">			a[j] = k;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort:"></a><code>Selection Sort</code>:</h3><p>Each time, find out the maximum element from the last array and switch the head of this last array.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> selectionSort(<span class="keyword">int</span> arr[]) &#123;</div><div class="line"> 	<span class="keyword">int</span> <span class="built_in">size</span> = arr.length;</div><div class="line"> 	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++) &#123;</div><div class="line"> 		<span class="keyword">int</span> maxIndex = i;</div><div class="line"> 		<span class="built_in">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="built_in">size</span>;j++) &#123;</div><div class="line"> 			<span class="built_in">if</span>(arr[maxIndex] &lt; arr[j])&#123;</div><div class="line"> 				maxIndex = j;</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//switch </span></div><div class="line"> 		<span class="keyword">int</span> temp = arr[maxIndex];</div><div class="line"> 		arr[maxIndex] = arr[i];</div><div class="line"> 		arr[i] = temp;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="Heap-Sort"><a href="#Heap-Sort" class="headerlink" title="Heap Sort:"></a><code>Heap Sort</code>:</h3><p>We can use PriorityQueue to implement this function.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort:"></a><code>Bubble Sort</code>:</h3><p>Adjacent elements take into compare and move the less one  into the head. It will be the least one. Then we loop this action until we get the sorted array.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> bubbleSort(<span class="keyword">int</span> arr[]) &#123;</div><div class="line"> 	<span class="keyword">int</span> <span class="built_in">size</span> = arr.length;</div><div class="line"> 	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++) &#123;</div><div class="line"> 		<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="built_in">size</span><span class="number">-1</span>;j&gt;i;j--) &#123;</div><div class="line"> 			<span class="built_in">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;</div><div class="line"> 				<span class="keyword">int</span> temp = arr[j];</div><div class="line"> 				arr[j] = arr[j<span class="number">-1</span>];</div><div class="line"> 				arr[j<span class="number">-1</span>] = temp;</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line"> 	&#125;</div><div class="line"> 	</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort:"></a><code>Quick Sort</code>:</h3><p>Each time, we choose first element of array as pivot.Put all elements which is less than pivot to left and all elements which are greater than pivot to right.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void quickSort(<span class="built_in">int</span> arr[]) &#123;</div><div class="line"> 	<span class="built_in">int</span> size = arr.length;</div><div class="line"> 	<span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = size<span class="number">-1</span>;</div><div class="line"> 	helper(arr,<span class="built_in">left</span>,<span class="built_in">right</span>);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> void helper(<span class="built_in">int</span> arr[],<span class="built_in">int</span> <span class="built_in">left</span>,<span class="built_in">int</span> <span class="built_in">right</span>) &#123;</div><div class="line">    <span class="built_in">int</span> i = <span class="built_in">left</span>, j = <span class="built_in">right</span>, pivot = arr[<span class="built_in">left</span>];</div><div class="line"> 	<span class="keyword">while</span>(i&lt;j) &#123;</div><div class="line"> 		</div><div class="line"> 		<span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= pivot) &#123;</div><div class="line"> 			j--;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span>(i&lt;j) &#123;</div><div class="line"> 			arr[i] = arr[j];</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i] &lt;= pivot) &#123;</div><div class="line"> 			i++;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">if</span>(i&lt;j) &#123;</div><div class="line"> 			arr[j] = arr[i];</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 	&#125;</div><div class="line"> 	arr[i] = pivot;</div><div class="line"> 	helper(arr,<span class="built_in">left</span>,i<span class="number">-1</span>);</div><div class="line"> 	helper(arr,i+<span class="number">1</span>,<span class="built_in">right</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort:"></a><code>Merge Sort</code>:</h3><p>Recursively split the list into sublists until the size of sublist is 1. Then merge those sublists to produce one sorted list.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">if</span>(startIndex &lt; endIndex) &#123;</div><div class="line"> 		<span class="keyword">int</span> midIndex = startIndex + (endIndex-startIndex)/<span class="number">2</span>;</div><div class="line"> 		mergeSort(arr, tempArr, startIndex, midIndex);</div><div class="line"> 		mergeSort(arr, tempArr, midIndex+<span class="number">1</span>, endIndex);</div><div class="line"> 		merge(arr, tempArr, startIndex, midIndex, endIndex);</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> midIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</div><div class="line"> 	<span class="keyword">int</span> i = startIndex, j = midIndex+<span class="number">1</span>;</div><div class="line"> 	<span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"> 	<span class="keyword">while</span>(i&lt;midIndex+<span class="number">1</span> &amp;&amp; j&lt;endIndex+<span class="number">1</span>) &#123;</div><div class="line">    	<span class="keyword">if</span> (arr[i] &gt; arr[j])</div><div class="line">        	tempArr[k++] = arr[j++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">           	tempArr[k++] = arr[i++];</div><div class="line">    &#125;</div><div class="line">      <span class="keyword">while</span> (i &lt; midIndex + <span class="number">1</span>)</div><div class="line">      &#123;</div><div class="line">          tempArr[k++] = arr[i++];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (j &lt; endIndex + <span class="number">1</span>)</div><div class="line">          tempArr[k++] = arr[j++];</div><div class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, j = startIndex; j &lt; endIndex + <span class="number">1</span>; i ++, j ++)</div><div class="line">          arr[j] = tempArr[i];</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="Counting-Sort"><a href="#Counting-Sort" class="headerlink" title="Counting Sort:"></a><code>Counting Sort</code>:</h3><p>If we need sort an array which the value is in [0,k]. Then we will create a new array which the length is k+1. count the value and add the previous number. Then we can get the new index from this array and then get the sorted array.  </p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> countingSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> k) &#123;</div><div class="line"> 	<span class="keyword">int</span> C[] = <span class="keyword">new</span> <span class="keyword">int</span>[k+<span class="number">1</span>];  <span class="comment">//build array C</span></div><div class="line"> 	<span class="keyword">int</span> <span class="built_in">size</span> = arr.length;   <span class="comment">//get the size of arr</span></div><div class="line"> 	<span class="keyword">int</span> B[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];  <span class="comment">//build array B</span></div><div class="line"> 	<span class="built_in">for</span>(<span class="keyword">int</span> i : arr) &#123;</div><div class="line"> 		C[i]++;   <span class="comment">//count the number of element in arr and store into C</span></div><div class="line"> 	&#125;</div><div class="line"> 	<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k+<span class="number">1</span>;i++) &#123;</div><div class="line"> 		C[i] += C[i<span class="number">-1</span>];  <span class="comment">//update C</span></div><div class="line"> 	&#125;</div><div class="line"> 	<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="built_in">size</span><span class="number">-1</span>;j&gt;<span class="number">0</span>;j--) &#123;</div><div class="line"> 		B[C[arr[j]]<span class="number">-1</span>] = arr[j];  <span class="comment">// 将arr中该元素放到排序后数组B中的指定位置</span></div><div class="line"> 		C[arr[j]]--;  <span class="comment">//minus 1, in order to store the next same element.</span></div><div class="line"> 	&#125;</div><div class="line"> 	<span class="built_in">return</span> B;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="Radix-Sort"><a href="#Radix-Sort" class="headerlink" title="Radix Sort:"></a><code>Radix Sort</code>:</h3><p>We have an array, each time we sort array based on the value of digit and use counting sort.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">* <span class="type">Sorts</span> <span class="number">32</span>-bit integers <span class="keyword">with</span> O(n*k) runtime performance.</div><div class="line">* <span class="type">Where</span> k <span class="keyword">is</span> the max number <span class="keyword">of</span> digits <span class="keyword">of</span> the numbers being sorted.</div><div class="line">* (i.e. k=<span class="number">10</span> digits <span class="keyword">for</span> <span class="number">32</span>-bit integers.)</div><div class="line">/</div><div class="line"></div><div class="line">//sort the numbers beginning <span class="keyword">with</span> least-significant digit</div><div class="line">public <span class="built_in">void</span> radixSort(<span class="built_in">int</span> arr[]) &#123;</div><div class="line">	//largest place <span class="keyword">for</span> a <span class="number">32</span>-bit <span class="built_in">int</span> <span class="keyword">is</span> the <span class="number">1</span> billion's place</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> place=<span class="number">1</span>; place&lt;<span class="number">1000000000</span>; place *=<span class="number">10</span>) &#123;</div><div class="line">		//use counting sort at each digit's place</div><div class="line">		input = countingSort(input,place);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> input;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="built_in">int</span>[] countingSort(<span class="built_in">int</span>[] input,<span class="built_in">int</span> place) &#123;</div><div class="line">	<span class="built_in">int</span>[] <span class="keyword">out</span> = new <span class="built_in">int</span>[input.length];</div><div class="line">	<span class="built_in">int</span>[] count = new <span class="built_in">int</span>[<span class="number">10</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> num : input) &#123;</div><div class="line">		<span class="built_in">int</span> digit = getDigit(num,place);</div><div class="line">		count[digit]++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) &#123;</div><div class="line">		count[i] += count[i-<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> j=input.length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</div><div class="line">		<span class="built_in">int</span> digit = getDigit(input[j],place);</div><div class="line">		<span class="keyword">out</span>[count[digit]-<span class="number">1</span>] = input[j];</div><div class="line">		count[digit]--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">out</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="built_in">int</span> getDigit(<span class="built_in">int</span> value, <span class="built_in">int</span> digitPlace)&#123;</div><div class="line">	<span class="keyword">return</span> (value/digitPlace) % <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="学习后总结："><a href="#学习后总结：" class="headerlink" title="学习后总结："></a>学习后总结：</h2><table>
<thead>
<tr>
<th>排序算法</th>
<th>Average Time Complexity</th>
<th>Worst Time Complexity</th>
<th>Space Complexity</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insertion Sort</td>
<td>O(N^2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>Shell Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>Selection Sort</td>
<td>O(N^2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>Heap Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>Bubble Sort</td>
<td>O(N^2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>Quick Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(logN)</td>
<td>不稳定</td>
</tr>
<tr>
<td>Merge Sort</td>
<td>O(NlogN)</td>
<td>O(NlogN)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>Counting Sort</td>
<td>O(N+k)</td>
<td>O(N+k)</td>
<td>O(N+k)</td>
<td>稳定</td>
</tr>
<tr>
<td>Radix Sort</td>
<td>O(logrB)</td>
<td>O(logrB)</td>
<td>O(N)</td>
<td>稳定</td>
</tr>
<tr>
<td>Bucket Sort</td>
<td></td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
</tbody>
</table>
<ul>
<li>What’s the stable sorting: A sorting algorithm is stable if it preserves the order of duplicate keys.</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A priority queue is <span class="keyword">an</span> example <span class="keyword">of</span> this. Say you have this:</div><div class="line"></div><div class="line">(<span class="number">1</span>, <span class="string">"bob"</span>)</div><div class="line">(<span class="number">3</span>, <span class="string">"bill"</span>)</div><div class="line">(<span class="number">1</span>, <span class="string">"jane"</span>)</div><div class="line"></div><div class="line">If you <span class="built_in">sort</span> this <span class="built_in">from</span> smallest <span class="built_in">to</span> largest <span class="built_in">number</span>, <span class="keyword">an</span> unstable <span class="built_in">sort</span> might <span class="built_in">do</span> this.</div><div class="line"></div><div class="line">(<span class="number">1</span>, <span class="string">"jane"</span>)</div><div class="line">(<span class="number">1</span>, <span class="string">"bob"</span>)</div><div class="line">(<span class="number">3</span>, <span class="string">"bill"</span>)</div><div class="line"></div><div class="line">...but <span class="keyword">then</span> <span class="string">"jane"</span> got ahead <span class="keyword">of</span> <span class="string">"bob"</span> even though <span class="keyword">it</span> was supposed <span class="built_in">to</span> be <span class="keyword">the</span> other way around.</div><div class="line"></div><div class="line">Generally, they are useful <span class="keyword">for</span> sorting multiple entries <span class="keyword">in</span> multiple steps.</div></pre></td></tr></table></figure>
<ul>
<li>About Sort Linked List, if there is no need constant space, a very efficient and faster way is store all values of nodes into array(or copy list into array) and sort them.  Then assign these values into each node.</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol>
<li><a href="http://blog.csdn.net/shan9liang/article/details/7533466" target="_blank" rel="external">http://blog.csdn.net/shan9liang/article/details/7533466</a></li>
<li><a href="http://blog.csdn.net/shan9liang/article/details/7540928" target="_blank" rel="external">http://blog.csdn.net/shan9liang/article/details/7540928</a></li>
<li><a href="http://www.jianshu.com/p/f5baf7f27a7e" target="_blank" rel="external">http://www.jianshu.com/p/f5baf7f27a7e</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Linked List II]]></title>
      <url>http://xinli90.com/2016/08/03/Reverse-Linked-List-II/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reverse-linked-list-ii/" target="_blank" rel="external">Leetcode-Reverse Linked List II</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Reverse a linked list from position m to n. Do it in-place and in one-pass.</p>
<p>For example:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL, m = <span class="number">2</span> <span class="keyword">and</span> n = <span class="number">4</span>,</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">5</span>-&gt;NULL.</div></pre></td></tr></table></figure>
<p>Note:<br>Given m, n satisfy the following condition:<br>1 ≤ m ≤ n ≤ length of list.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>Find out the prior node which we prepare to reverse.</li>
<li>For N nodes, we reverse one node each time and make it to be a legal list.</li>
<li>Loop N times and get the final result.</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     ListNode <span class="keyword">next</span>;</div><div class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line"> 	<span class="keyword">public</span> void reverseBetween(ListNode head, <span class="built_in">int</span> m, <span class="built_in">int</span> n) &#123; 		ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line"> 		dummy.<span class="keyword">next</span> = head;</div><div class="line"> 		ListNode pre = dummy;</div><div class="line"> 		ListNode cur = dummy.<span class="keyword">next</span>;</div><div class="line"> 		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;m;i++) &#123;</div><div class="line"> 			pre = pre.<span class="keyword">next</span>;</div><div class="line"> 			cur = cur.<span class="keyword">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;n-m; j++) &#123;</div><div class="line"> 			ListNode reverseNode = cur.<span class="keyword">next</span>;</div><div class="line"> 			cur.<span class="keyword">next</span> = reverseNode.<span class="keyword">next</span>;</div><div class="line"> 			reverseNode.<span class="keyword">next</span> = pre.<span class="keyword">next</span>;</div><div class="line"> 			pre.<span class="keyword">next</span> = reverseNode;</div><div class="line"> 		&#125;</div><div class="line"> 		return dummy.<span class="keyword">next</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reorder List]]></title>
      <url>http://xinli90.com/2016/08/03/Reorder-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/reorder-list/" target="_blank" rel="external">Leetcode-Reorder List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,<br>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>Iterate the list and store all nodes into ArrayList</li>
<li>insert the node into original list until the middle of list</li>
<li>make the next pointer of the middle to null. </li>
<li>Time complexity and space complexity is O(n)</li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>At first find out prior of the middle</li>
<li>reverse the half after middle</li>
<li>reorder the list from the head and the middle.</li>
<li>Time complexity is O(n)and space complexity is O(1)</li>
</ol>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     <span class="type">int</span> val;</div><div class="line"> *     ListNode <span class="built_in">next</span>;</div><div class="line"> *     ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="comment">//Solution1</span></div><div class="line"> public class Solution1 &#123;</div><div class="line"> 	public void reorderList(ListNode head) &#123;</div><div class="line"> 	 	ArrayList&lt;ListNode&gt; list = new ArrayList&lt;&gt;();</div><div class="line"> 		ListNode node = head;</div><div class="line"> 		<span class="keyword">while</span>(node!=<span class="built_in">null</span>) &#123;</div><div class="line"> 			list.add(node);</div><div class="line"> 			node = node.<span class="built_in">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		node = head;</div><div class="line"> 		<span class="type">int</span> size = list.size();</div><div class="line"> 		ListNode nextNode;</div><div class="line"> 		for(double i=size<span class="number">-1</span>; i&lt;size/<span class="number">2</span>; i--) &#123;</div><div class="line"> 			nextNode = node.<span class="built_in">next</span>;</div><div class="line"> 			node.<span class="built_in">next</span> = list.<span class="built_in">get</span>((<span class="type">int</span>) i);</div><div class="line"> 			node.<span class="built_in">next</span>.<span class="built_in">next</span> = nextNode;</div><div class="line"> 			node = node.<span class="built_in">next</span>.<span class="built_in">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		node.<span class="built_in">next</span> = <span class="built_in">null</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//Solution2</span></div><div class="line"> public class Solution2 &#123;</div><div class="line"> 	public void reorderList(ListNode head) &#123; </div><div class="line"> 		<span class="comment">//find out the middle</span></div><div class="line"> 		ListNode p1 = head;</div><div class="line"> 		ListNode p2 = head;</div><div class="line"> 		<span class="keyword">while</span>(p2.<span class="built_in">next</span>!=<span class="built_in">null</span> &amp;&amp; p2.<span class="built_in">next</span>.<span class="built_in">next</span>!=<span class="built_in">null</span>) &#123;</div><div class="line"> 			p1 = p1.<span class="built_in">next</span>;</div><div class="line"> 			p2 = p2.<span class="built_in">next</span>.<span class="built_in">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		ListNode middle = p1.<span class="built_in">next</span>;</div><div class="line"> 		ListNode <span class="built_in">prior</span> = p1;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//reverse the half after middle</span></div><div class="line"> 		<span class="built_in">prior</span>.<span class="built_in">next</span> = reverseList(middle);</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//reorder</span></div><div class="line"> 		p1 = head;</div><div class="line"> 		<span class="comment">//the middle has changed, we use prior.next to get middle</span></div><div class="line"> 		p2 = <span class="built_in">prior</span>.<span class="built_in">next</span>;</div><div class="line"> 		<span class="keyword">while</span>(p1!=<span class="built_in">prior</span>) &#123;</div><div class="line"> 			<span class="built_in">prior</span>.<span class="built_in">next</span> = p2.<span class="built_in">next</span>;</div><div class="line"> 			p2.<span class="built_in">next</span> = p1.<span class="built_in">next</span>;</div><div class="line"> 			p1.<span class="built_in">next</span> = p2;</div><div class="line"> 			p1 = p2.<span class="built_in">next</span>;</div><div class="line"> 			p2 = <span class="built_in">prior</span>.<span class="built_in">next</span>;</div><div class="line"> 			</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 	&#125;</div><div class="line"> 	</div><div class="line"> 	public ListNode reverseList(ListNode node) &#123;</div><div class="line"> 		ListNode preNode = <span class="built_in">null</span>;</div><div class="line"> 		ListNode nextNode = <span class="built_in">null</span>;</div><div class="line"> 		<span class="keyword">while</span>(node!=<span class="built_in">null</span>) &#123;</div><div class="line"> 			nextNode = node.<span class="built_in">next</span>;</div><div class="line"> 			node.<span class="built_in">next</span> = preNode;</div><div class="line"> 			preNode = node;</div><div class="line"> 			node = nextNode;</div><div class="line"> 		&#125;</div><div class="line"> 		return preNode;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Copy List with Random Pointer]]></title>
      <url>http://xinli90.com/2016/08/03/Copy-List-with-Random-Pointer/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="external">Leetcode-Copy List with Random Pointer</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a <code>deep copy</code> of the list.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>This is my wrong solution. Although this solution can pass the test cases, every next and random node only has label but no its next and random node.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> RandomListNode copyRandomList(RandomListNode head) &#123;</div><div class="line">       <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       RandomListNode node = <span class="keyword">new</span> RandomListNode(head.label);</div><div class="line">       RandomListNode dummy = <span class="keyword">new</span> RandomListNode(-<span class="number">1</span>);</div><div class="line">       dummy.<span class="keyword">next</span> = node;</div><div class="line">       <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</div><div class="line">           node.<span class="keyword">next</span> = head.<span class="keyword">next</span>==<span class="keyword">null</span>? <span class="keyword">null</span> : <span class="keyword">new</span> RandomListNode(head.<span class="keyword">next</span>.label);</div><div class="line">           node.random = head.random==<span class="keyword">null</span>? <span class="keyword">null</span> : <span class="keyword">new</span> RandomListNode(head.random.label);</div><div class="line">           head = head.<span class="keyword">next</span>;</div><div class="line">           node = node.<span class="keyword">next</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> dummy.<span class="keyword">next</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>The correct solution is we need use the new existed node as a next and random node.    </p>
<h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><ol>
<li>we utilize HashMap to collect all copy node only with the value;     </li>
<li>Each time, we add next and random pointer which is only in this HashMap. </li>
<li>Time complexity and space complexity is O(n)     </li>
</ol>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><ol>
<li>Iterate the original list and duplicate each node. The duplicated node follows its original node.</li>
<li>Iterate the duplicated nodes and assign the next and random pointer for each nodes.</li>
<li>Extract the duplicated nodes and recover the original list</li>
<li>Although the time complexity and space complexity is O(n), the extra space complexity is O(1).</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list with a random pointer.</div><div class="line"> * class RandomListNode &#123;</div><div class="line"> *     int label;</div><div class="line"> *     RandomListNode next, random;</div><div class="line"> *     RandomListNode(int x) &#123; this.label = x; &#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="comment">//Solution1</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line"> 	<span class="keyword">public</span> RandomListNode copyRandomList(RandomListNode head) &#123;</div><div class="line"> 		HashMap&lt;RandomListNode,RandomListNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"> 		RandomListNode node = head;</div><div class="line"> 		<span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</div><div class="line"> 			map.put(node,<span class="keyword">new</span> RandomListNode(node.label));</div><div class="line"> 			node = node.<span class="keyword">next</span>;</div><div class="line"> 		&#125; </div><div class="line"> 		node = head;</div><div class="line"> 		<span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</div><div class="line"> 			map.get(node).<span class="keyword">next</span> = map.get(node.<span class="keyword">next</span>);</div><div class="line"> 			map.get(node).random = map.get(node.random);</div><div class="line"> 			node = node.<span class="keyword">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">return</span> map.get(head);</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//Solution2</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line"> 	<span class="keyword">public</span> RandomListNode copyRandomList(RandomListNode head) &#123;</div><div class="line"> 		RandomListNode newList = head;</div><div class="line"> 		RandomListNode nextNode = head;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//A-&gt;B-&gt;C =&gt; A-&gt;A'-&gt; B-&gt;B'-&gt; C-&gt;C'</span></div><div class="line"> 		<span class="keyword">while</span>(newList!=<span class="keyword">null</span>) &#123;</div><div class="line"> 			nextNode = newList.<span class="keyword">next</span>;</div><div class="line"> 			</div><div class="line"> 			newList.<span class="keyword">next</span> = <span class="keyword">new</span> RandomListNode(newList.label);</div><div class="line"> 			</div><div class="line"> 			newList.<span class="keyword">next</span>.<span class="keyword">next</span> = nextNode;</div><div class="line"> 			newList = nextNode;</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//add random pointer</span></div><div class="line"> 		newList = head;</div><div class="line"> 		<span class="keyword">while</span>(newList!=<span class="keyword">null</span>) &#123;</div><div class="line"> 			<span class="keyword">if</span>(newList.random!=<span class="keyword">null</span>)&#123;</div><div class="line"> 				newList.<span class="keyword">next</span>.random = newList.random.<span class="keyword">next</span>;</div><div class="line"> 			&#125;<span class="comment">//if newList.random==null,then the default of random is null.</span></div><div class="line"> 			</div><div class="line"> 			newList = newList.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//extract duplicated nodes and recover the original list</span></div><div class="line"> 		RandomListNode dummy = <span class="keyword">new</span> RandomListNode(-<span class="number">1</span>);</div><div class="line"> 		RandomListNode <span class="keyword">copy</span> = dummy;</div><div class="line"> 		RandomListNode copyNext = dummy;</div><div class="line"> 		</div><div class="line"> 		newList = head;</div><div class="line"> 		</div><div class="line"> 		<span class="keyword">while</span>(newList!=<span class="keyword">null</span>) &#123;</div><div class="line"> 			nextNode = newList.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line"> 			</div><div class="line"> 			copyNext = newList.<span class="keyword">next</span>;</div><div class="line"> 			<span class="keyword">copy</span>.<span class="keyword">next</span> = copyNext;</div><div class="line"> 			<span class="keyword">copy</span> = <span class="keyword">copy</span>.<span class="keyword">next</span>;</div><div class="line"> 			</div><div class="line"> 			newList.<span class="keyword">next</span> = nextNode;</div><div class="line"> 			newList = newList.<span class="keyword">next</span>;</div><div class="line"> 			</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">return</span> dummy.<span class="keyword">next</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intersection of Two Linked Lists]]></title>
      <url>http://xinli90.com/2016/08/03/Intersection-of-Two-Linked-Lists/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="external">Leetcode-Intersection of Two Linked Lists</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">A:          <span class="built_in">a1</span> → <span class="built_in">a2</span></div><div class="line">                   ↘</div><div class="line">                     <span class="built_in">c1</span> → <span class="built_in">c2</span> → <span class="built_in">c3</span></div><div class="line">                   ↗            </div><div class="line"><span class="keyword">B: </span>    <span class="keyword">b1 </span>→ <span class="keyword">b2 </span>→ <span class="keyword">b3</span></div></pre></td></tr></table></figure>
<p>begin to intersect at node c1.</p>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ul>
<li>If the two linked lists have no intersection at all, return null.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><p>Utilizing HashSet to save each node from headA and compare each node from headB to find out the first intersected node.<br>Time complexity is O(n) and space complexity is O(n).     </p>
<h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><p>If we want to run in O(n) time and use only O(1) memory, we should compare headA with headB and traverse each node once. But the point is the length of headA and headB is different.<br>So in order to counteract the difference, we can splice two lists and find out the intersected node. We suppose that there are A different nodes in the first list, B different nodes in the second list and C common nodes.<br>Therefore, A + C + B = B + C + A. </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="comment">//Solution1</span></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</div><div class="line"> 	<span class="keyword">public</span> ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</div><div class="line"> 		HashSet&lt;ListNode&gt; <span class="keyword">list</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"> 		<span class="keyword">while</span>(headA != <span class="keyword">null</span>) &#123;</div><div class="line"> 			<span class="keyword">list</span>.add(headA);</div><div class="line"> 			headA = headA.next;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">while</span>(headB !=<span class="keyword">null</span>) &#123;</div><div class="line"> 			<span class="keyword">if</span>(<span class="keyword">list</span>.contains(headB)) &#123;</div><div class="line"> 				<span class="keyword">return</span> headB;</div><div class="line"> 			&#125;</div><div class="line"> 			headB = headB.next;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//Solution2</span></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</div><div class="line"> 	<span class="keyword">public</span> ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</div><div class="line"> 	<span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> 	ListNode pointerA = headA;</div><div class="line"> 	ListNode pointerB = headB;</div><div class="line"> 	<span class="comment">//if pointerA == pointerB == null, it means we have already traverse headA and headB and cannot find the common node. </span></div><div class="line"> 	<span class="keyword">while</span>(pointerA != pointerB) &#123;</div><div class="line"> 		pointerA = pointerA == <span class="keyword">null</span>? headB : pointerA.next;</div><div class="line"> 		pointerB = pointerB == <span class="keyword">null</span>? headA : pointerB.next;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="keyword">return</span> pointerA;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS学习笔记-chapter1~3]]></title>
      <url>http://xinli90.com/2016/07/28/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-chapter1-3/</url>
      <content type="html"><![CDATA[<p>此学习笔记根据《iOS开发指南》（第四版）学习总结</p>
<h2 id="Chapter-01"><a href="#Chapter-01" class="headerlink" title="Chapter 01"></a>Chapter 01</h2><ul>
<li>iOS 9 新特性：3D Touch, 分屏多任务, Apple pay增强, Wallet</li>
<li>Objective-C 多重参数方法的定义：    </li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>(void)insertObject: (id)anObject atIndex:(NSUInteger) index &#123;&#125;</div><div class="line"></div><div class="line">其中：</div><div class="line"></div><div class="line"><span class="bullet">1. </span>-代表方法是实例方法， + 代表方法是类方法即静态方法；</div><div class="line"><span class="bullet">2. </span>void代表方法返回值</div><div class="line"><span class="bullet">3. </span>insertObject 和 atIndex 代表方法签名关键词</div><div class="line"><span class="bullet">4. </span>id 和 NSUInteger 代表参数类型</div><div class="line"><span class="bullet">5. </span>anObject 和 index 代表参数</div></pre></td></tr></table></figure>
<ul>
<li>错误处理约定：给方法传递一个&amp;error(NSError地址)， 当方法调用完成之后，若发生错误则error不为nil，若没有错误则error为nil.</li>
</ul>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSString *defaultDBPath = [frameworkBundlePath stringByAppendingPathComponent:@<span class="string">"NotesList.plist"</span>];</div><div class="line">NSError *<span class="built_in">error</span>;</div><div class="line">BOOL success = [fileManager copyItemAtPath:defaultDBPath toPath:<span class="built_in">self</span>.plistFilePath <span class="built_in">error</span>:&amp;<span class="built_in">error</span>];</div><div class="line"><span class="keyword">if</span>(<span class="built_in">error</span>) &#123;</div><div class="line">	NSLog(<span class="string">"数据保存错误:%@"</span>, <span class="built_in">error</span>.localizedDescription);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Chapter-02"><a href="#Chapter-02" class="headerlink" title="Chapter 02"></a>Chapter 02</h2><ul>
<li>当新建一个iOS工程后，会产生两个类AppDelegate和ViewController；两个界面布局文件Main.storyboard故事板文件和LaunchScreen.storyboard应用启动界面故事板文件；Assets.xcassets资源目录，可以用来管理图片； Info.plist工程属性文件。   </li>
<li>AppDelegate 是应用程序委托对象, 继承了UIResponder类，使得具有处理响应事件的能力。外加上UIApplicationDelegate委托协议使得AppDelegate成为应用程序委托对象，这种对象能够响应应用程序的生命周期。</li>
<li>在Asset.xcassets文件夹中，可以放置工程中的图片；Supporting Files组只有一个Info.plist文件，该文件是工程属性描述文件，其中保存着工程的属性设置。在访问资源文件时，文件夹和组是有区别的，访问文件夹中的资源时需要将文件夹作为路径。如果icon.png文件放在image文件夹下，则访问它的路径是image/icon.png;如果image是组，则访问它的路径是icon.png。</li>
<li>应用生命周期：<br>Not Running (非运行状态)：应用没有运行或被系统终止；<br>Inactive(前台非活动状态)：应用正在进入前台状态，但是还不能接受事件处理；<br>Active(前台活动状态)：应用进入前台状态，能接受事件处理；<br>Background(后台状态)：应用进入后台后，依然能够执行代码。如果有可执行的代码，就会执行代码，如果没有可执行的代码或将可执行的代码执行完毕，应用会马上进入挂起状态；<br>Suspended(挂起状态)：被挂起的应用进入一种“冷冻”状态，不能执行代码。如果系统内存不够，应用会被终止。      </li>
</ul>
<h3 id="场景应用："><a href="#场景应用：" class="headerlink" title="场景应用："></a>场景应用：</h3><ol>
<li>用户点击应用图标的时候，可能是第一次启动这个应用，也可能是应用终止后再次启用：<br>Not running -&gt; Inactive : 调用application:didFinishLaunchingWithOptions:方法，发出UIApplicationDidFinishLaunchingNotification通知。<br>Inactive -&gt; Active : 调用applicationDidBecomeActive方法，发出UIApplicationDidBecomeActiveNotification通知。   </li>
<li>应用处于运行状态时点击Home键应用会退出：分为两种情况<br>应用可以在后台运行或者挂起:<br>Active -&gt; Inactive : 调用applicationWillResignActive方法，发出UIApplicationWillResignActiveNotification通知。<br>Inactive -&gt; Background : 应用从非活动状态进入到后台。<br>Background -&gt; Suspended : 调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroundNotification通知。<br>应用不可以在后台运行或者挂起:<br>Active -&gt; Inactive : 应用由活动状态转为非活动状态<br>Inactive -&gt; Background : 应用从非活动状态进入后台<br>Background -&gt; Suspended : 调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroundNotification通知<br>Suspended -&gt; Not running : 调用applicationWillTerminate方法，发出UIApplicationWillTerminateNotification通知。      </li>
<li>挂起状态的应用重新运行:<br>Suspended -&gt; Background : 应用从挂起状态进入后台<br>Background -&gt; Inactive : 调用applicationWillEnterForeground方法，发出UIApplicationWillEnterForegroundNotification通知<br>Inactive -&gt; Active : 调用applicationDidBecomeActive方法， 发出UIApplicationDidBecomeActiveNodification通知。</li>
<li>应用在后台处理完成是进入挂起状态，如果发出低内存警告，则应用会被清除内存从而终止运行:  Background -&gt; Suspended -&gt; Not running</li>
</ol>
<h3 id="iOS整体框架："><a href="#iOS整体框架：" class="headerlink" title="iOS整体框架："></a>iOS整体框架：</h3><p>Cocoa Touch 层<br>Media 层<br>Core Services 层<br>Core OS 层         </p>
<h2 id="Chapter-03"><a href="#Chapter-03" class="headerlink" title="Chapter 03"></a>Chapter 03</h2><h3 id="视图的生命周期"><a href="#视图的生命周期" class="headerlink" title="视图的生命周期"></a>视图的生命周期</h3><ul>
<li>视图创建并加载到内存中，调用viewDidLoad方法，此时视图并未出现；</li>
<li>视图可见，之前会调用viewWillAppear,之后会调用viewDidAppear;</li>
<li>视图不可见，之前会调用viewWillDisappear,之后会调用viewDidDisappear;</li>
<li>系统低内存时，调用didReceiveMemoryWarning方法.</li>
</ul>
<p>viewDidLoad 方法在应用运行的时候只调用一次，而其他四个方法可以被反复调用多次。</p>
<h3 id="视图属性"><a href="#视图属性" class="headerlink" title="视图属性"></a>视图属性</h3><ul>
<li>frame 属性是该视图在父视图坐标系统中的位置和大小</li>
<li>bounds 属性是该视图在本地坐标系统中的位置和大小       </li>
</ul>
<p>frame 属性类型是CGRect结构体，CGRect包含 origin 和 size.<br>origin 是坐标点类型，是CGPoint结构体，包含 x 和 y.<br>size 是高和宽类型，是CGSize结构体，包含 width 和 height.   </p>
<h3 id="构建界面的三种方式"><a href="#构建界面的三种方式" class="headerlink" title="构建界面的三种方式"></a>构建界面的三种方式</h3><ul>
<li>storyboard 文件</li>
<li>XIB 文件</li>
<li>autolayout纯代码文件 </li>
</ul>
<p>团队协调开发的取舍：在一个项目需要很多人协同开发的时候，如果使用Main.storyboard，因为一个工程只有一个storyboard文件，会导致多人需要同时修改storyboard文件时产生错误和冲突；使用XIB和纯代码方式则不会出现这个问题，因为每个Xib文件和纯代码方式都是描述单个界面，文件都是多个、分散、不会发生版本冲突的。但是storyboard的问题的解决方法是统一由一个人来负责修改该文件，其他人员一律不得修改。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Duplicates from Sorted List]]></title>
      <url>http://xinli90.com/2016/07/19/Remove-Duplicates-from-Sorted-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="external">Leetcode-Remove Duplicates from Sorted List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>For example,</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Given <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>, return <span class="number">1</span>-&gt;<span class="number">2.</span></div><div class="line">Given <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">3</span>, return <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3.</span></div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Traversing the list. If the value of current node equals to the value of the next one, skipping this next node and continue to compare from the new next node.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> <span class="comment">//Two pointers</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> Solution1 &#123;</div><div class="line">    <span class="keyword">public</span> ListNode deleteDuplicates(ListNode head) &#123;</div><div class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span> || head.<span class="keyword">next</span>==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        dummy.<span class="keyword">next</span> = head;</div><div class="line">        ListNode prev = head;</div><div class="line">        ListNode cur = head.<span class="keyword">next</span>;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</div><div class="line">        	<span class="keyword">if</span>(pre.val == cur.val)&#123;</div><div class="line">        		pre.<span class="keyword">next</span> = cur.<span class="keyword">next</span>;</div><div class="line">        		cur = cur.<span class="keyword">next</span>;</div><div class="line">        	&#125;<span class="keyword">else</span>&#123;</div><div class="line">        		prev = prev.<span class="keyword">next</span>;</div><div class="line">        		cur = cur.<span class="keyword">next</span>;</div><div class="line">        	&#125;      </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy.<span class="keyword">next</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//One pointer</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> ListNode deleteDuplicates(ListNode head) &#123;</div><div class="line">		ListNode node = head;</div><div class="line">		<span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(node.<span class="keyword">next</span>==<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(node.val == node.<span class="keyword">next</span>.val) &#123;</div><div class="line">				node.<span class="keyword">next</span> = node.<span class="keyword">next</span>.<span class="keyword">next</span>;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				node = node.<span class="keyword">next</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Recursive solution</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution2 &#123;</div><div class="line">	<span class="keyword">public</span> ListNode deleteDuplicates(ListNode head) &#123;</div><div class="line">		<span class="keyword">if</span>(head == <span class="keyword">null</span> || head.<span class="keyword">next</span> == <span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">		head.<span class="keyword">next</span> = deleteDuplicates(head.<span class="keyword">next</span>);</div><div class="line">		<span class="keyword">return</span> head.val == head.<span class="keyword">next</span>.val? head.<span class="keyword">next</span> : head;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day1 DataStructure about List]]></title>
      <url>http://xinli90.com/2016/07/18/Day1-DataStructure-about-List/</url>
      <content type="html"><![CDATA[<p>本篇是关于List的分析和总结.</p>
<h2 id="攻略模板"><a href="#攻略模板" class="headerlink" title="攻略模板"></a>攻略模板</h2><ul>
<li>回忆数据结构：分析数据结构特性，比较类似数据结构差异</li>
<li>实现数据结构</li>
<li>实战训练使用该数据结构</li>
<li>总结该数据结构特点，并总结算法题</li>
</ul>
<h3 id="Java-util"><a href="#Java-util" class="headerlink" title="Java.util"></a>Java.util</h3><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><h5 id="List-ArrayList-LinkedList-and-Array"><a href="#List-ArrayList-LinkedList-and-Array" class="headerlink" title="List: ArrayList, LinkedList and Array"></a>List: ArrayList, LinkedList and Array</h5><h2 id="自己回忆"><a href="#自己回忆" class="headerlink" title="自己回忆"></a>自己回忆</h2><ul>
<li>ArrayList: search:O(1), add and delete: O(n). If there are more elements, the capacity expands to 50% more.         </li>
<li>LinkedList: search:O(n), add and delete: O(1), it has linked node and cost more space. In each node, there are pointer to point pre and next node.        </li>
<li>Array: initialized with fixed length. search is O(1), add and delete: Actually it equals to creating a new Array without this element(delete) or with this element(add).        </li>
</ul>
<h2 id="实现数据结构"><a href="#实现数据结构" class="headerlink" title="实现数据结构"></a>实现数据结构</h2><ul>
<li>ArrayList实现了List, Cloneable, Serializable，RandomAccess.   not thread safe.      </li>
<li>LinkedList 实现了List, Cloneable, Serializable, Deque: Deque 的功能为addFirst,addLast,removeFirst,removeLast等.        </li>
<li>Vector实现了List, Cloneable, RandomAccess: thread safe. 因为是synchronized . 可以initialize with 增长系数.        </li>
</ul>
<h2 id="学习后总结"><a href="#学习后总结" class="headerlink" title="学习后总结"></a>学习后总结</h2><ul>
<li>ArrayList implements RandomAccess interface, so it has higher efficiency in read.  It’s internally implemented as array(Object[ ])</li>
<li>LinkedList is doubly linked list, so it is faster to add and remove elements. We’re able to access the elements via index from the beginning or the ending, it depends on comparing with this specific index and the middle of the list.  It’s internally implemented as doubly linked list. It is a chain of entities, each entity has previous, next pointer and this element.</li>
<li>Array can contain primitive data type and object. ArrayList only contains objects.</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Array</th>
<th>ArrayList</th>
</tr>
</thead>
<tbody>
<tr>
<td>Resizable</td>
<td>No, it has fixed size.</td>
<td>Yes. the size will grow automatically by 1.5 times</td>
</tr>
<tr>
<td>Primitive</td>
<td>Contain Primitive data type and Object</td>
<td>Only contains Objects, not primitive type.if list.add(1), it will through auto-boxing ensures add object into list.</td>
</tr>
<tr>
<td>Length</td>
<td>use array.length</td>
<td>use list.size()</td>
</tr>
<tr>
<td>Add Elements</td>
<td>Assignment operator</td>
<td>add() method, 添加某一位value,需要使用System.arrayCopy 移动该插入位之后所有元素往后移</td>
</tr>
<tr>
<td>Multi-dimensional</td>
<td>It can be multi dimensional</td>
<td>It is always single dimensional</td>
</tr>
</tbody>
</table>
<ul>
<li>在LinkedList类型的题目中，如果把head赋给一个新的ListNode, 例如ListNode node = head; 那么对于node的操作都会对original list造成影响。 如果想不造成影响，则需要create a new ListNode. 即ListNode node = new ListNode(-1);  其中: head相当于original list中的头指针，而node为new list中的头指针，如果需要对new list进行操作，可以保留头指针，然后对该new list进行操作。使用ListNode list = node; 最后 return node.next; </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 常用操作]]></title>
      <url>http://xinli90.com/2016/07/05/hexo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇是关于Hexo的基本操作步骤.</p>
<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>每次部署的步骤，可按以下三步来进行。</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line"></div><div class="line">hexo <span class="keyword">generate</span></div><div class="line"></div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="一些常用命令："><a href="#一些常用命令：" class="headerlink" title="一些常用命令："></a>一些常用命令：</h2><p>hexo new “postName” #新建文章</p>
<p>hexo new page”pageName” #新建页面</p>
<p>hexo generate #生成静态页面至public目录</p>
<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
<p>hexo deploy #将.deploy目录部署到GitHub</p>
<p>hexo help # 查看帮助</p>
<p>hexo version #查看Hexo的版本</p>
<h2 id="发表博文"><a href="#发表博文" class="headerlink" title="发表博文"></a>发表博文</h2><ol>
<li>首先cd blog, 进入blog文件夹下， 使用 hexo new “postName” #新建文章</li>
<li>在source/_post/ 中 会产生 postName.md文件, 直接双击打开 书写博文，保存</li>
<li>使用 hexo server 本地浏览效果</li>
<li>使用 hexo clean, hexo generate 和 hexo deploy 部署三部曲 把当前文章部署到服务器上，即完成文章发布。</li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol>
<li>首先cd blog, 进入blog文件夹下，比如我这里用的是 maupassant 主题</li>
<li>git clone <a href="https://github.com/icylogic/maupassant-hexo.git" target="_blank" rel="external">https://github.com/icylogic/maupassant-hexo.git</a> themes/maupassant   ，直接会把主题安装到themes/ 下. 也可能需要安装其他支持文件：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-renderer-sass <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-jade <span class="comment">--save</span></div></pre></td></tr></table></figure>
<ol>
<li>然后修改blog文件夹下 _config.yml 中， theme : maupassant </li>
</ol>
<p>具体可以参照： <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">here</a> maintained by @tufu9441.</p>
<h2 id="DIY功能以及SEO"><a href="#DIY功能以及SEO" class="headerlink" title="DIY功能以及SEO"></a>DIY功能以及SEO</h2><p>参考博客：<a href="http://codingpub.github.io/2016/04/10/%E5%AE%9A%E5%88%B6Hexo-maupassant/#预定义参数" target="_blank" rel="external">Coding Plub</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Nth Node From End of List]]></title>
      <url>http://xinli90.com/2016/07/05/Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<p>This is the solution about <a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="external">Leetcode-Remove Nth Node From End of List</a>.</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> linked <span class="built_in">list</span>: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, <span class="keyword">and</span> n = <span class="number">2.</span></div><div class="line"></div><div class="line"><span class="type">After</span> removing the second node from the <span class="keyword">end</span>, the linked <span class="built_in">list</span> becomes <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5.</span></div></pre></td></tr></table></figure>
<p>Note:<br>Given n will always be valid.<br>Try to do this in one pass. </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ol>
<li>In order to find this node in one pass, we maintain two pointers and then move the current pointer forward with n steps.</li>
<li>Keep this interval and move two pointers at the same speed until the current pointer reaches to the end.</li>
<li>The previous one points to the previous node of target, then delete this target.</li>
<li>The most important thing is we need ensure what we changed is in the same linked list.</li>
</ol>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     <span class="type">int</span> val;</div><div class="line"> *     ListNode <span class="built_in">next</span>;</div><div class="line"> *     ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"> </div><div class="line"> public class Solution &#123;</div><div class="line">    public ListNode removeNthFromEnd(ListNode head, <span class="type">int</span> n) &#123;</div><div class="line">        ListNode dummy = new ListNode(<span class="number">0</span>);</div><div class="line">        dummy.<span class="built_in">next</span> = head;</div><div class="line">        ListNode <span class="built_in">prev</span> = dummy;</div><div class="line">        ListNode cur = dummy;</div><div class="line">        <span class="type">int</span> <span class="built_in">count</span> = n;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">count</span>&gt;<span class="number">0</span>)&#123;</div><div class="line">            cur = cur.<span class="built_in">next</span>;</div><div class="line">            <span class="built_in">count</span>--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(cur.<span class="built_in">next</span>!=<span class="built_in">null</span>)&#123;</div><div class="line">            <span class="built_in">prev</span> = <span class="built_in">prev</span>.<span class="built_in">next</span>;</div><div class="line">            cur = cur.<span class="built_in">next</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">prev</span>.<span class="built_in">next</span> = <span class="built_in">prev</span>.<span class="built_in">next</span>.<span class="built_in">next</span>;</div><div class="line">        return dummy.<span class="built_in">next</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
